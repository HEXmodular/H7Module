
H7TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfa0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  0800c238  0800c238  0001c238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800c654  0800c654  0001c654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800c658  0800c658  0001c658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000013c  24000000  0800c65c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002c4c  2400013c  0800c798  0002013c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24002d88  0800c798  00022d88  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0004ce78  00000000  00000000  0002016a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000057c9  00000000  00000000  0006cfe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000032c0  00000000  00000000  000727b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00003028  00000000  00000000  00075a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003ba0b  00000000  00000000  00078a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002a8e7  00000000  00000000  000b44a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001723ad  00000000  00000000  000ded8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00251137  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000db94  00000000  00000000  00251188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400013c 	.word	0x2400013c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c220 	.word	0x0800c220

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000140 	.word	0x24000140
 80002d4:	0800c220 	.word	0x0800c220

080002d8 <HAL_TIM_PeriodElapsedCallback>:
extern uint8_t u8x8_byte_stm32_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr);

static u8g2_t u8g2;
int counter = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM12) {
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a0d      	ldr	r2, [pc, #52]	; (800031c <HAL_TIM_PeriodElapsedCallback+0x44>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d111      	bne.n	800030e <HAL_TIM_PeriodElapsedCallback+0x36>
    	 	 __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, counter);
 80002ea:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80002ec:	681a      	ldr	r2, [r3, #0]
 80002ee:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	635a      	str	r2, [r3, #52]	; 0x34
    	    counter+=4;
 80002f4:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	3304      	adds	r3, #4
 80002fa:	4a09      	ldr	r2, [pc, #36]	; (8000320 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80002fc:	6013      	str	r3, [r2, #0]
    	    if (counter == 4096) counter = 0;
 80002fe:	4b08      	ldr	r3, [pc, #32]	; (8000320 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000306:	d102      	bne.n	800030e <HAL_TIM_PeriodElapsedCallback+0x36>
 8000308:	4b05      	ldr	r3, [pc, #20]	; (8000320 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
    }
}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40001800 	.word	0x40001800
 8000320:	24000310 	.word	0x24000310
 8000324:	240001a4 	.word	0x240001a4

08000328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800032e:	f002 fb37 	bl	80029a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000332:	f000 f84b 	bl	80003cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000336:	f000 f9f3 	bl	8000720 <MX_GPIO_Init>
  MX_I2C1_Init();
 800033a:	f000 f8c3 	bl	80004c4 <MX_I2C1_Init>
  MX_TIM8_Init();
 800033e:	f000 f95b 	bl	80005f8 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000342:	f000 f8ff 	bl	8000544 <MX_TIM2_Init>
  MX_TIM12_Init();
 8000346:	f000 f9b1 	bl	80006ac <MX_TIM12_Init>
  MX_USB_DEVICE_Init();
 800034a:	f00b fab7 	bl	800b8bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 800034e:	4817      	ldr	r0, [pc, #92]	; (80003ac <main+0x84>)
 8000350:	f006 fea4 	bl	800709c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim12);
 8000354:	4816      	ldr	r0, [pc, #88]	; (80003b0 <main+0x88>)
 8000356:	f006 ff11 	bl	800717c <HAL_TIM_Base_Start_IT>
//  HAL_TIM_PWM_Init(&htim2);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800035a:	2100      	movs	r1, #0
 800035c:	4813      	ldr	r0, [pc, #76]	; (80003ac <main+0x84>)
 800035e:	f006 ffdd 	bl	800731c <HAL_TIM_PWM_Start>


//  TIM2->CCR1 = 2047;
//  __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, 100);

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000362:	213c      	movs	r1, #60	; 0x3c
 8000364:	4811      	ldr	r0, [pc, #68]	; (80003ac <main+0x84>)
 8000366:	f007 f98d 	bl	8007684 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 800036a:	213c      	movs	r1, #60	; 0x3c
 800036c:	4811      	ldr	r0, [pc, #68]	; (80003b4 <main+0x8c>)
 800036e:	f007 f989 	bl	8007684 <HAL_TIM_Encoder_Start>
  u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_i2c, u8x8_stm32_gpio_and_delay);
 8000372:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <main+0x90>)
 8000374:	4a11      	ldr	r2, [pc, #68]	; (80003bc <main+0x94>)
 8000376:	4912      	ldr	r1, [pc, #72]	; (80003c0 <main+0x98>)
 8000378:	4812      	ldr	r0, [pc, #72]	; (80003c4 <main+0x9c>)
 800037a:	f000 fe23 	bl	8000fc4 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>

	/* Initialize Display */
	u8g2_InitDisplay(&u8g2);
 800037e:	4811      	ldr	r0, [pc, #68]	; (80003c4 <main+0x9c>)
 8000380:	f002 fa42 	bl	8002808 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 8000384:	2100      	movs	r1, #0
 8000386:	480f      	ldr	r0, [pc, #60]	; (80003c4 <main+0x9c>)
 8000388:	f002 fa4d 	bl	8002826 <u8x8_SetPowerSave>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	char stringNum[8];
	auto count = 0;
 800038c:	2300      	movs	r3, #0
 800038e:	60fb      	str	r3, [r7, #12]
	auto prevCount = 0;
 8000390:	2300      	movs	r3, #0
 8000392:	60bb      	str	r3, [r7, #8]

	//MIDI Callback set
//	MIDI_Receive_Set_CallBack(&MIDI_ReceiveCallback);
	MIDI_Set_u8g2(&u8g2);
 8000394:	480b      	ldr	r0, [pc, #44]	; (80003c4 <main+0x9c>)
 8000396:	f000 fd5d 	bl	8000e54 <MIDI_Set_u8g2>

  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800039a:	2102      	movs	r1, #2
 800039c:	480a      	ldr	r0, [pc, #40]	; (80003c8 <main+0xa0>)
 800039e:	f002 fe9a 	bl	80030d6 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80003a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003a6:	f002 fb8d 	bl	8002ac4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80003aa:	e7f6      	b.n	800039a <main+0x72>
 80003ac:	240001a4 	.word	0x240001a4
 80003b0:	2400023c 	.word	0x2400023c
 80003b4:	240001f0 	.word	0x240001f0
 80003b8:	08000c25 	.word	0x08000c25
 80003bc:	08000c59 	.word	0x08000c59
 80003c0:	0800c5d8 	.word	0x0800c5d8
 80003c4:	24000288 	.word	0x24000288
 80003c8:	58020000 	.word	0x58020000

080003cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b09c      	sub	sp, #112	; 0x70
 80003d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003d6:	224c      	movs	r2, #76	; 0x4c
 80003d8:	2100      	movs	r1, #0
 80003da:	4618      	mov	r0, r3
 80003dc:	f00b ff18 	bl	800c210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2220      	movs	r2, #32
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f00b ff12 	bl	800c210 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003ec:	2002      	movs	r0, #2
 80003ee:	f004 fd7b 	bl	8004ee8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003f2:	2300      	movs	r3, #0
 80003f4:	603b      	str	r3, [r7, #0]
 80003f6:	4b31      	ldr	r3, [pc, #196]	; (80004bc <SystemClock_Config+0xf0>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4a30      	ldr	r2, [pc, #192]	; (80004bc <SystemClock_Config+0xf0>)
 80003fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000400:	6193      	str	r3, [r2, #24]
 8000402:	4b2e      	ldr	r3, [pc, #184]	; (80004bc <SystemClock_Config+0xf0>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800040a:	603b      	str	r3, [r7, #0]
 800040c:	4b2c      	ldr	r3, [pc, #176]	; (80004c0 <SystemClock_Config+0xf4>)
 800040e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000410:	4a2b      	ldr	r2, [pc, #172]	; (80004c0 <SystemClock_Config+0xf4>)
 8000412:	f043 0301 	orr.w	r3, r3, #1
 8000416:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000418:	4b29      	ldr	r3, [pc, #164]	; (80004c0 <SystemClock_Config+0xf4>)
 800041a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800041c:	f003 0301 	and.w	r3, r3, #1
 8000420:	603b      	str	r3, [r7, #0]
 8000422:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000424:	bf00      	nop
 8000426:	4b25      	ldr	r3, [pc, #148]	; (80004bc <SystemClock_Config+0xf0>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800042e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000432:	d1f8      	bne.n	8000426 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000434:	2321      	movs	r3, #33	; 0x21
 8000436:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800043c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800043e:	2301      	movs	r3, #1
 8000440:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000442:	2302      	movs	r3, #2
 8000444:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000446:	2302      	movs	r3, #2
 8000448:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800044a:	2305      	movs	r3, #5
 800044c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 800044e:	23c0      	movs	r3, #192	; 0xc0
 8000450:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000452:	2302      	movs	r3, #2
 8000454:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000456:	2302      	movs	r3, #2
 8000458:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800045a:	2302      	movs	r3, #2
 800045c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800045e:	2308      	movs	r3, #8
 8000460:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000462:	2300      	movs	r3, #0
 8000464:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000466:	2300      	movs	r3, #0
 8000468:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800046e:	4618      	mov	r0, r3
 8000470:	f004 fd84 	bl	8004f7c <HAL_RCC_OscConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800047a:	f000 f9b3 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047e:	233f      	movs	r3, #63	; 0x3f
 8000480:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000482:	2303      	movs	r3, #3
 8000484:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800048a:	2308      	movs	r3, #8
 800048c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800048e:	2340      	movs	r3, #64	; 0x40
 8000490:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000492:	2340      	movs	r3, #64	; 0x40
 8000494:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800049a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800049c:	2340      	movs	r3, #64	; 0x40
 800049e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	2104      	movs	r1, #4
 80004a4:	4618      	mov	r0, r3
 80004a6:	f005 f997 	bl	80057d8 <HAL_RCC_ClockConfig>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80004b0:	f000 f998 	bl	80007e4 <Error_Handler>
  }
}
 80004b4:	bf00      	nop
 80004b6:	3770      	adds	r7, #112	; 0x70
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	58024800 	.word	0x58024800
 80004c0:	58000400 	.word	0x58000400

080004c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <MX_I2C1_Init+0x74>)
 80004ca:	4a1c      	ldr	r2, [pc, #112]	; (800053c <MX_I2C1_Init+0x78>)
 80004cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80004ce:	4b1a      	ldr	r3, [pc, #104]	; (8000538 <MX_I2C1_Init+0x74>)
 80004d0:	4a1b      	ldr	r2, [pc, #108]	; (8000540 <MX_I2C1_Init+0x7c>)
 80004d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004d4:	4b18      	ldr	r3, [pc, #96]	; (8000538 <MX_I2C1_Init+0x74>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004da:	4b17      	ldr	r3, [pc, #92]	; (8000538 <MX_I2C1_Init+0x74>)
 80004dc:	2201      	movs	r2, #1
 80004de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004e0:	4b15      	ldr	r3, [pc, #84]	; (8000538 <MX_I2C1_Init+0x74>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004e6:	4b14      	ldr	r3, [pc, #80]	; (8000538 <MX_I2C1_Init+0x74>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004ec:	4b12      	ldr	r3, [pc, #72]	; (8000538 <MX_I2C1_Init+0x74>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004f2:	4b11      	ldr	r3, [pc, #68]	; (8000538 <MX_I2C1_Init+0x74>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004f8:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <MX_I2C1_Init+0x74>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004fe:	480e      	ldr	r0, [pc, #56]	; (8000538 <MX_I2C1_Init+0x74>)
 8000500:	f002 fe04 	bl	800310c <HAL_I2C_Init>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800050a:	f000 f96b 	bl	80007e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800050e:	2100      	movs	r1, #0
 8000510:	4809      	ldr	r0, [pc, #36]	; (8000538 <MX_I2C1_Init+0x74>)
 8000512:	f003 f97d 	bl	8003810 <HAL_I2CEx_ConfigAnalogFilter>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800051c:	f000 f962 	bl	80007e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000520:	2100      	movs	r1, #0
 8000522:	4805      	ldr	r0, [pc, #20]	; (8000538 <MX_I2C1_Init+0x74>)
 8000524:	f003 f9bf 	bl	80038a6 <HAL_I2CEx_ConfigDigitalFilter>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800052e:	f000 f959 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	24000158 	.word	0x24000158
 800053c:	40005400 	.word	0x40005400
 8000540:	307075b1 	.word	0x307075b1

08000544 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08a      	sub	sp, #40	; 0x28
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800054a:	f107 031c 	add.w	r3, r7, #28
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000556:	463b      	mov	r3, r7
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]
 8000564:	615a      	str	r2, [r3, #20]
 8000566:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <MX_TIM2_Init+0xb0>)
 800056a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800056e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000570:	4b20      	ldr	r3, [pc, #128]	; (80005f4 <MX_TIM2_Init+0xb0>)
 8000572:	2200      	movs	r2, #0
 8000574:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000576:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <MX_TIM2_Init+0xb0>)
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4095;
 800057c:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <MX_TIM2_Init+0xb0>)
 800057e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000582:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000584:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <MX_TIM2_Init+0xb0>)
 8000586:	2200      	movs	r2, #0
 8000588:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800058a:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <MX_TIM2_Init+0xb0>)
 800058c:	2280      	movs	r2, #128	; 0x80
 800058e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000590:	4818      	ldr	r0, [pc, #96]	; (80005f4 <MX_TIM2_Init+0xb0>)
 8000592:	f006 fe6b 	bl	800726c <HAL_TIM_PWM_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800059c:	f000 f922 	bl	80007e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005a4:	2300      	movs	r3, #0
 80005a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005a8:	f107 031c 	add.w	r3, r7, #28
 80005ac:	4619      	mov	r1, r3
 80005ae:	4811      	ldr	r0, [pc, #68]	; (80005f4 <MX_TIM2_Init+0xb0>)
 80005b0:	f008 f87e 	bl	80086b0 <HAL_TIMEx_MasterConfigSynchronization>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80005ba:	f000 f913 	bl	80007e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005be:	2360      	movs	r3, #96	; 0x60
 80005c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2047;
 80005c2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80005c6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80005cc:	2304      	movs	r3, #4
 80005ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005d0:	463b      	mov	r3, r7
 80005d2:	2200      	movs	r2, #0
 80005d4:	4619      	mov	r1, r3
 80005d6:	4807      	ldr	r0, [pc, #28]	; (80005f4 <MX_TIM2_Init+0xb0>)
 80005d8:	f007 fa02 	bl	80079e0 <HAL_TIM_PWM_ConfigChannel>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80005e2:	f000 f8ff 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005e6:	4803      	ldr	r0, [pc, #12]	; (80005f4 <MX_TIM2_Init+0xb0>)
 80005e8:	f000 fa1a 	bl	8000a20 <HAL_TIM_MspPostInit>

}
 80005ec:	bf00      	nop
 80005ee:	3728      	adds	r7, #40	; 0x28
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	240001a4 	.word	0x240001a4

080005f8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08c      	sub	sp, #48	; 0x30
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	2224      	movs	r2, #36	; 0x24
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f00b fe02 	bl	800c210 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800060c:	463b      	mov	r3, r7
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000616:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <MX_TIM8_Init+0xac>)
 8000618:	4a23      	ldr	r2, [pc, #140]	; (80006a8 <MX_TIM8_Init+0xb0>)
 800061a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800061c:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <MX_TIM8_Init+0xac>)
 800061e:	2200      	movs	r2, #0
 8000620:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000622:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <MX_TIM8_Init+0xac>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000628:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <MX_TIM8_Init+0xac>)
 800062a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800062e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000630:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <MX_TIM8_Init+0xac>)
 8000632:	2200      	movs	r2, #0
 8000634:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000636:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_TIM8_Init+0xac>)
 8000638:	2200      	movs	r2, #0
 800063a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800063c:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <MX_TIM8_Init+0xac>)
 800063e:	2280      	movs	r2, #128	; 0x80
 8000640:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000642:	2303      	movs	r3, #3
 8000644:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800064a:	2301      	movs	r3, #1
 800064c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000652:	230f      	movs	r3, #15
 8000654:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000656:	2300      	movs	r3, #0
 8000658:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800065a:	2301      	movs	r3, #1
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000662:	230f      	movs	r3, #15
 8000664:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	4619      	mov	r1, r3
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <MX_TIM8_Init+0xac>)
 800066e:	f006 ff63 	bl	8007538 <HAL_TIM_Encoder_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000678:	f000 f8b4 	bl	80007e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	4619      	mov	r1, r3
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_TIM8_Init+0xac>)
 800068e:	f008 f80f 	bl	80086b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000698:	f000 f8a4 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	3730      	adds	r7, #48	; 0x30
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	240001f0 	.word	0x240001f0
 80006a8:	40010400 	.word	0x40010400

080006ac <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006b2:	463b      	mov	r3, r7
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80006be:	4b16      	ldr	r3, [pc, #88]	; (8000718 <MX_TIM12_Init+0x6c>)
 80006c0:	4a16      	ldr	r2, [pc, #88]	; (800071c <MX_TIM12_Init+0x70>)
 80006c2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_TIM12_Init+0x6c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ca:	4b13      	ldr	r3, [pc, #76]	; (8000718 <MX_TIM12_Init+0x6c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 4095;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_TIM12_Init+0x6c>)
 80006d2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006d6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_TIM12_Init+0x6c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_TIM12_Init+0x6c>)
 80006e0:	2280      	movs	r2, #128	; 0x80
 80006e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80006e4:	480c      	ldr	r0, [pc, #48]	; (8000718 <MX_TIM12_Init+0x6c>)
 80006e6:	f006 fc81 	bl	8006fec <HAL_TIM_Base_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 80006f0:	f000 f878 	bl	80007e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80006fa:	463b      	mov	r3, r7
 80006fc:	4619      	mov	r1, r3
 80006fe:	4806      	ldr	r0, [pc, #24]	; (8000718 <MX_TIM12_Init+0x6c>)
 8000700:	f007 fa82 	bl	8007c08 <HAL_TIM_ConfigClockSource>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 800070a:	f000 f86b 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	2400023c 	.word	0x2400023c
 800071c:	40001800 	.word	0x40001800

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	4b29      	ldr	r3, [pc, #164]	; (80007dc <MX_GPIO_Init+0xbc>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a27      	ldr	r2, [pc, #156]	; (80007dc <MX_GPIO_Init+0xbc>)
 800073e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <MX_GPIO_Init+0xbc>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000754:	4b21      	ldr	r3, [pc, #132]	; (80007dc <MX_GPIO_Init+0xbc>)
 8000756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075a:	4a20      	ldr	r2, [pc, #128]	; (80007dc <MX_GPIO_Init+0xbc>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000764:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <MX_GPIO_Init+0xbc>)
 8000766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <MX_GPIO_Init+0xbc>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000778:	4a18      	ldr	r2, [pc, #96]	; (80007dc <MX_GPIO_Init+0xbc>)
 800077a:	f043 0304 	orr.w	r3, r3, #4
 800077e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_GPIO_Init+0xbc>)
 8000784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_GPIO_Init+0xbc>)
 8000792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000796:	4a11      	ldr	r2, [pc, #68]	; (80007dc <MX_GPIO_Init+0xbc>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_GPIO_Init+0xbc>)
 80007a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2102      	movs	r1, #2
 80007b2:	480b      	ldr	r0, [pc, #44]	; (80007e0 <MX_GPIO_Init+0xc0>)
 80007b4:	f002 fc76 	bl	80030a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007b8:	2302      	movs	r3, #2
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_GPIO_Init+0xc0>)
 80007d0:	f002 fab8 	bl	8002d44 <HAL_GPIO_Init>

}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	; 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	58024400 	.word	0x58024400
 80007e0:	58020000 	.word	0x58020000

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	e7fe      	b.n	80007ec <Error_Handler+0x8>
	...

080007f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <HAL_MspInit+0x30>)
 80007f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007fc:	4a08      	ldr	r2, [pc, #32]	; (8000820 <HAL_MspInit+0x30>)
 80007fe:	f043 0302 	orr.w	r3, r3, #2
 8000802:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_MspInit+0x30>)
 8000808:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800080c:	f003 0302 	and.w	r3, r3, #2
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	58024400 	.word	0x58024400

08000824 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b0b8      	sub	sp, #224	; 0xe0
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	22bc      	movs	r2, #188	; 0xbc
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f00b fce3 	bl	800c210 <memset>
  if(hi2c->Instance==I2C1)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a24      	ldr	r2, [pc, #144]	; (80008e0 <HAL_I2C_MspInit+0xbc>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d141      	bne.n	80008d8 <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000854:	2308      	movs	r3, #8
 8000856:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000858:	2300      	movs	r3, #0
 800085a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800085e:	f107 0310 	add.w	r3, r7, #16
 8000862:	4618      	mov	r0, r3
 8000864:	f005 fb18 	bl	8005e98 <HAL_RCCEx_PeriphCLKConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800086e:	f7ff ffb9 	bl	80007e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <HAL_I2C_MspInit+0xc0>)
 8000874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000878:	4a1a      	ldr	r2, [pc, #104]	; (80008e4 <HAL_I2C_MspInit+0xc0>)
 800087a:	f043 0302 	orr.w	r3, r3, #2
 800087e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000882:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <HAL_I2C_MspInit+0xc0>)
 8000884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000888:	f003 0302 	and.w	r3, r3, #2
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000890:	23c0      	movs	r3, #192	; 0xc0
 8000892:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000896:	2312      	movs	r3, #18
 8000898:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008a8:	2304      	movs	r3, #4
 80008aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80008b2:	4619      	mov	r1, r3
 80008b4:	480c      	ldr	r0, [pc, #48]	; (80008e8 <HAL_I2C_MspInit+0xc4>)
 80008b6:	f002 fa45 	bl	8002d44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008ba:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <HAL_I2C_MspInit+0xc0>)
 80008bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80008c0:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <HAL_I2C_MspInit+0xc0>)
 80008c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_I2C_MspInit+0xc0>)
 80008cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80008d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008d8:	bf00      	nop
 80008da:	37e0      	adds	r7, #224	; 0xe0
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40005400 	.word	0x40005400
 80008e4:	58024400 	.word	0x58024400
 80008e8:	58020400 	.word	0x58020400

080008ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008fc:	d10e      	bne.n	800091c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008fe:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <HAL_TIM_PWM_MspInit+0x3c>)
 8000900:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000904:	4a08      	ldr	r2, [pc, #32]	; (8000928 <HAL_TIM_PWM_MspInit+0x3c>)
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_TIM_PWM_MspInit+0x3c>)
 8000910:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800091c:	bf00      	nop
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	58024400 	.word	0x58024400

0800092c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a1e      	ldr	r2, [pc, #120]	; (80009c4 <HAL_TIM_Encoder_MspInit+0x98>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d135      	bne.n	80009ba <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800094e:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000950:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000954:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000956:	f043 0302 	orr.w	r3, r3, #2
 800095a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000960:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000964:	f003 0302 	and.w	r3, r3, #2
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <HAL_TIM_Encoder_MspInit+0x9c>)
 800096e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000972:	4a15      	ldr	r2, [pc, #84]	; (80009c8 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_TIM_Encoder_MspInit+0x9c>)
 800097e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800098a:	23c0      	movs	r3, #192	; 0xc0
 800098c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000992:	2301      	movs	r3, #1
 8000994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800099a:	2303      	movs	r3, #3
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4809      	ldr	r0, [pc, #36]	; (80009cc <HAL_TIM_Encoder_MspInit+0xa0>)
 80009a6:	f002 f9cd 	bl	8002d44 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	202b      	movs	r0, #43	; 0x2b
 80009b0:	f002 f993 	bl	8002cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80009b4:	202b      	movs	r0, #43	; 0x2b
 80009b6:	f002 f9aa 	bl	8002d0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80009ba:	bf00      	nop
 80009bc:	3728      	adds	r7, #40	; 0x28
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40010400 	.word	0x40010400
 80009c8:	58024400 	.word	0x58024400
 80009cc:	58020800 	.word	0x58020800

080009d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM12)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <HAL_TIM_Base_MspInit+0x48>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d116      	bne.n	8000a10 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <HAL_TIM_Base_MspInit+0x4c>)
 80009e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80009e8:	4a0c      	ldr	r2, [pc, #48]	; (8000a1c <HAL_TIM_Base_MspInit+0x4c>)
 80009ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <HAL_TIM_Base_MspInit+0x4c>)
 80009f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80009f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2100      	movs	r1, #0
 8000a04:	202b      	movs	r0, #43	; 0x2b
 8000a06:	f002 f968 	bl	8002cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8000a0a:	202b      	movs	r0, #43	; 0x2b
 8000a0c:	f002 f97f 	bl	8002d0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40001800 	.word	0x40001800
 8000a1c:	58024400 	.word	0x58024400

08000a20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a40:	d11e      	bne.n	8000a80 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <HAL_TIM_MspPostInit+0x68>)
 8000a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a48:	4a0f      	ldr	r2, [pc, #60]	; (8000a88 <HAL_TIM_MspPostInit+0x68>)
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a52:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <HAL_TIM_MspPostInit+0x68>)
 8000a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a60:	2301      	movs	r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a70:	2301      	movs	r3, #1
 8000a72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4804      	ldr	r0, [pc, #16]	; (8000a8c <HAL_TIM_MspPostInit+0x6c>)
 8000a7c:	f002 f962 	bl	8002d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a80:	bf00      	nop
 8000a82:	3720      	adds	r7, #32
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	58024400 	.word	0x58024400
 8000a8c:	58020000 	.word	0x58020000

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <NMI_Handler+0x4>

08000a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <UsageFault_Handler+0x4>

08000aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000adc:	f001 ffd2 	bl	8002a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000ae8:	4803      	ldr	r0, [pc, #12]	; (8000af8 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8000aea:	f006 fe59 	bl	80077a0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8000aee:	4803      	ldr	r0, [pc, #12]	; (8000afc <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8000af0:	f006 fe56 	bl	80077a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	240001f0 	.word	0x240001f0
 8000afc:	2400023c 	.word	0x2400023c

08000b00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <OTG_FS_IRQHandler+0x10>)
 8000b06:	f003 f871 	bl	8003bec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	24000ca8 	.word	0x24000ca8

08000b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b18:	4b37      	ldr	r3, [pc, #220]	; (8000bf8 <SystemInit+0xe4>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1e:	4a36      	ldr	r2, [pc, #216]	; (8000bf8 <SystemInit+0xe4>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b28:	4b34      	ldr	r3, [pc, #208]	; (8000bfc <SystemInit+0xe8>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f003 030f 	and.w	r3, r3, #15
 8000b30:	2b06      	cmp	r3, #6
 8000b32:	d807      	bhi.n	8000b44 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b34:	4b31      	ldr	r3, [pc, #196]	; (8000bfc <SystemInit+0xe8>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f023 030f 	bic.w	r3, r3, #15
 8000b3c:	4a2f      	ldr	r2, [pc, #188]	; (8000bfc <SystemInit+0xe8>)
 8000b3e:	f043 0307 	orr.w	r3, r3, #7
 8000b42:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b44:	4b2e      	ldr	r3, [pc, #184]	; (8000c00 <SystemInit+0xec>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a2d      	ldr	r2, [pc, #180]	; (8000c00 <SystemInit+0xec>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b50:	4b2b      	ldr	r3, [pc, #172]	; (8000c00 <SystemInit+0xec>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b56:	4b2a      	ldr	r3, [pc, #168]	; (8000c00 <SystemInit+0xec>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	4929      	ldr	r1, [pc, #164]	; (8000c00 <SystemInit+0xec>)
 8000b5c:	4b29      	ldr	r3, [pc, #164]	; (8000c04 <SystemInit+0xf0>)
 8000b5e:	4013      	ands	r3, r2
 8000b60:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b62:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <SystemInit+0xe8>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f003 0308 	and.w	r3, r3, #8
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d007      	beq.n	8000b7e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b6e:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <SystemInit+0xe8>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f023 030f 	bic.w	r3, r3, #15
 8000b76:	4a21      	ldr	r2, [pc, #132]	; (8000bfc <SystemInit+0xe8>)
 8000b78:	f043 0307 	orr.w	r3, r3, #7
 8000b7c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b7e:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <SystemInit+0xec>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b84:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <SystemInit+0xec>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b8a:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <SystemInit+0xec>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b90:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <SystemInit+0xec>)
 8000b92:	4a1d      	ldr	r2, [pc, #116]	; (8000c08 <SystemInit+0xf4>)
 8000b94:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b96:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <SystemInit+0xec>)
 8000b98:	4a1c      	ldr	r2, [pc, #112]	; (8000c0c <SystemInit+0xf8>)
 8000b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b9c:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <SystemInit+0xec>)
 8000b9e:	4a1c      	ldr	r2, [pc, #112]	; (8000c10 <SystemInit+0xfc>)
 8000ba0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <SystemInit+0xec>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <SystemInit+0xec>)
 8000baa:	4a19      	ldr	r2, [pc, #100]	; (8000c10 <SystemInit+0xfc>)
 8000bac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <SystemInit+0xec>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <SystemInit+0xec>)
 8000bb6:	4a16      	ldr	r2, [pc, #88]	; (8000c10 <SystemInit+0xfc>)
 8000bb8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <SystemInit+0xec>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <SystemInit+0xec>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <SystemInit+0xec>)
 8000bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <SystemInit+0xec>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <SystemInit+0x100>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <SystemInit+0x104>)
 8000bd8:	4013      	ands	r3, r2
 8000bda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000bde:	d202      	bcs.n	8000be6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000be0:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <SystemInit+0x108>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <SystemInit+0x10c>)
 8000be8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000bec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00
 8000bfc:	52002000 	.word	0x52002000
 8000c00:	58024400 	.word	0x58024400
 8000c04:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c08:	02020200 	.word	0x02020200
 8000c0c:	01ff0000 	.word	0x01ff0000
 8000c10:	01010280 	.word	0x01010280
 8000c14:	5c001000 	.word	0x5c001000
 8000c18:	ffff0000 	.word	0xffff0000
 8000c1c:	51008108 	.word	0x51008108
 8000c20:	52004000 	.word	0x52004000

08000c24 <u8x8_stm32_gpio_and_delay>:

//extern SPI_HandleTypeDef hspi2;
extern I2C_HandleTypeDef hi2c1;

uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	460b      	mov	r3, r1
 8000c30:	72fb      	strb	r3, [r7, #11]
 8000c32:	4613      	mov	r3, r2
 8000c34:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 8000c36:	7afb      	ldrb	r3, [r7, #11]
 8000c38:	2b28      	cmp	r3, #40	; 0x28
 8000c3a:	d006      	beq.n	8000c4a <u8x8_stm32_gpio_and_delay+0x26>
 8000c3c:	2b29      	cmp	r3, #41	; 0x29
 8000c3e:	d105      	bne.n	8000c4c <u8x8_stm32_gpio_and_delay+0x28>
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 8000c40:	7abb      	ldrb	r3, [r7, #10]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 ff3e 	bl	8002ac4 <HAL_Delay>
		break;
 8000c48:	e000      	b.n	8000c4c <u8x8_stm32_gpio_and_delay+0x28>
		break;
 8000c4a:	bf00      	nop
//	case U8X8_MSG_GPIO_RESET:
//		/* Insert codes for RST pin control */
//		HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, arg_int);
//		break;
	}
	return 1;
 8000c4c:	2301      	movs	r3, #1
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <u8x8_byte_stm32_hw_i2c>:
//	}
//	return 1;
//}

uint8_t u8x8_byte_stm32_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af02      	add	r7, sp, #8
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	460b      	mov	r3, r1
 8000c64:	72fb      	strb	r3, [r7, #11]
 8000c66:	4613      	mov	r3, r2
 8000c68:	72bb      	strb	r3, [r7, #10]
	/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
	static uint8_t buffer[32];
	static uint8_t buf_idx;
	uint8_t *data;

	switch(msg)
 8000c6a:	7afb      	ldrb	r3, [r7, #11]
 8000c6c:	3b14      	subs	r3, #20
 8000c6e:	2b0c      	cmp	r3, #12
 8000c70:	d847      	bhi.n	8000d02 <u8x8_byte_stm32_hw_i2c+0xaa>
 8000c72:	a201      	add	r2, pc, #4	; (adr r2, 8000c78 <u8x8_byte_stm32_hw_i2c+0x20>)
 8000c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c78:	08000d07 	.word	0x08000d07
 8000c7c:	08000d03 	.word	0x08000d03
 8000c80:	08000d03 	.word	0x08000d03
 8000c84:	08000cad 	.word	0x08000cad
 8000c88:	08000cdd 	.word	0x08000cdd
 8000c8c:	08000ce5 	.word	0x08000ce5
 8000c90:	08000d03 	.word	0x08000d03
 8000c94:	08000d03 	.word	0x08000d03
 8000c98:	08000d03 	.word	0x08000d03
 8000c9c:	08000d03 	.word	0x08000d03
 8000ca0:	08000d03 	.word	0x08000d03
 8000ca4:	08000d03 	.word	0x08000d03
 8000ca8:	08000d07 	.word	0x08000d07
	{
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t *)arg_ptr;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	617b      	str	r3, [r7, #20]
		while( arg_int > 0 )
 8000cb0:	e010      	b.n	8000cd4 <u8x8_byte_stm32_hw_i2c+0x7c>
		{
			buffer[buf_idx++] = *data;
 8000cb2:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <u8x8_byte_stm32_hw_i2c+0xc0>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	1c5a      	adds	r2, r3, #1
 8000cb8:	b2d1      	uxtb	r1, r2
 8000cba:	4a17      	ldr	r2, [pc, #92]	; (8000d18 <u8x8_byte_stm32_hw_i2c+0xc0>)
 8000cbc:	7011      	strb	r1, [r2, #0]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	7819      	ldrb	r1, [r3, #0]
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <u8x8_byte_stm32_hw_i2c+0xc4>)
 8000cc6:	5499      	strb	r1, [r3, r2]
			data++;
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	617b      	str	r3, [r7, #20]
			arg_int--;
 8000cce:	7abb      	ldrb	r3, [r7, #10]
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	72bb      	strb	r3, [r7, #10]
		while( arg_int > 0 )
 8000cd4:	7abb      	ldrb	r3, [r7, #10]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d1eb      	bne.n	8000cb2 <u8x8_byte_stm32_hw_i2c+0x5a>
		}
		break;
 8000cda:	e017      	b.n	8000d0c <u8x8_byte_stm32_hw_i2c+0xb4>
		/* add your custom code to init i2c subsystem */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		break;
	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <u8x8_byte_stm32_hw_i2c+0xc0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
		break;
 8000ce2:	e013      	b.n	8000d0c <u8x8_byte_stm32_hw_i2c+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		if(HAL_I2C_Master_Transmit(&hi2c1, (DEVICE_ADDRESS << 1), buffer, buf_idx, TX_TIMEOUT) != HAL_OK) return 0;
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <u8x8_byte_stm32_hw_i2c+0xc0>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	2264      	movs	r2, #100	; 0x64
 8000cec:	9200      	str	r2, [sp, #0]
 8000cee:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <u8x8_byte_stm32_hw_i2c+0xc4>)
 8000cf0:	2178      	movs	r1, #120	; 0x78
 8000cf2:	480b      	ldr	r0, [pc, #44]	; (8000d20 <u8x8_byte_stm32_hw_i2c+0xc8>)
 8000cf4:	f002 fa9a 	bl	800322c <HAL_I2C_Master_Transmit>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d005      	beq.n	8000d0a <u8x8_byte_stm32_hw_i2c+0xb2>
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e005      	b.n	8000d0e <u8x8_byte_stm32_hw_i2c+0xb6>
		break;
	default:
		return 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	e003      	b.n	8000d0e <u8x8_byte_stm32_hw_i2c+0xb6>
		break;
 8000d06:	bf00      	nop
 8000d08:	e000      	b.n	8000d0c <u8x8_byte_stm32_hw_i2c+0xb4>
		break;
 8000d0a:	bf00      	nop
	}
	return 1;
 8000d0c:	2301      	movs	r3, #1
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	24000314 	.word	0x24000314
 8000d1c:	24000318 	.word	0x24000318
 8000d20:	24000158 	.word	0x24000158

08000d24 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d28:	f3bf 8f4f 	dsb	sy
}
 8000d2c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <__NVIC_SystemReset+0x24>)
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000d36:	4904      	ldr	r1, [pc, #16]	; (8000d48 <__NVIC_SystemReset+0x24>)
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <__NVIC_SystemReset+0x28>)
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d3e:	f3bf 8f4f 	dsb	sy
}
 8000d42:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <__NVIC_SystemReset+0x20>
 8000d48:	e000ed00 	.word	0xe000ed00
 8000d4c:	05fa0004 	.word	0x05fa0004

08000d50 <MIDI_Init>:
  *         Initializes the MIDI media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t MIDI_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	70fb      	strb	r3, [r7, #3]
  /*
     Add your initialization code here
  */
  return (0);
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <MIDI_DeInit>:
  *         DeInitializes the MIDI media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t MIDI_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
 8000d72:	460b      	mov	r3, r1
 8000d74:	70fb      	strb	r3, [r7, #3]
  /*
     Add your deinitialization code here
  */
  return (0);
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <MIDI_Send>:
  * @param  buffer: bufferfer of data to be received
  * @param  length: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t MIDI_Send (uint8_t* buffer, uint32_t length)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  uint8_t ret = USBD_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	73fb      	strb	r3, [r7, #15]

  USBD_MIDI_SetTxBuffer(&hUsbDeviceFS, buffer, length);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	461a      	mov	r2, r3
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	4807      	ldr	r0, [pc, #28]	; (8000db8 <MIDI_Send+0x34>)
 8000d9c:	f009 faca 	bl	800a334 <USBD_MIDI_SetTxBuffer>

  ret = USBD_MIDI_TransmitPacket(&hUsbDeviceFS);
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MIDI_Send+0x34>)
 8000da2:	f009 fae3 	bl	800a36c <USBD_MIDI_TransmitPacket>
 8000da6:	4603      	mov	r3, r0
 8000da8:	73fb      	strb	r3, [r7, #15]

  return (ret);
 8000daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	240007cc 	.word	0x240007cc

08000dbc <MIDI_Receive>:
  * @param  buffer: bufferfer of data to be received
  * @param  length: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t MIDI_Receive (uint8_t* buffer, uint32_t length)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]

	//  MIDI_Receive_CallBack(buffer);
	  u8g2_ClearBuffer(&u8g2);
 8000dc6:	4820      	ldr	r0, [pc, #128]	; (8000e48 <MIDI_Receive+0x8c>)
 8000dc8:	f000 f86a 	bl	8000ea0 <u8g2_ClearBuffer>
	  u8g2_SetFont(&u8g2, u8g2_font_pcsenior_8u);
 8000dcc:	491f      	ldr	r1, [pc, #124]	; (8000e4c <MIDI_Receive+0x90>)
 8000dce:	481e      	ldr	r0, [pc, #120]	; (8000e48 <MIDI_Receive+0x8c>)
 8000dd0:	f000 fe8e 	bl	8001af0 <u8g2_SetFont>
	  u8g2_DrawStr(&u8g2, 0,8*1, "TEST");
 8000dd4:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <MIDI_Receive+0x94>)
 8000dd6:	2208      	movs	r2, #8
 8000dd8:	2100      	movs	r1, #0
 8000dda:	481b      	ldr	r0, [pc, #108]	; (8000e48 <MIDI_Receive+0x8c>)
 8000ddc:	f000 fde6 	bl	80019ac <u8g2_DrawStr>
	  u8g2_SendBuffer(&u8g2);
 8000de0:	4819      	ldr	r0, [pc, #100]	; (8000e48 <MIDI_Receive+0x8c>)
 8000de2:	f000 f8d0 	bl	8000f86 <u8g2_SendBuffer>

  uint8_t chan = buffer[1] & 0xf;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3301      	adds	r3, #1
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	f003 030f 	and.w	r3, r3, #15
 8000df0:	73fb      	strb	r3, [r7, #15]
  uint8_t msgtype = buffer[1] & 0xf0;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3301      	adds	r3, #1
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	f023 030f 	bic.w	r3, r3, #15
 8000dfc:	73bb      	strb	r3, [r7, #14]
  uint8_t b1 =  buffer[2];
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	789b      	ldrb	r3, [r3, #2]
 8000e02:	737b      	strb	r3, [r7, #13]
  uint8_t b2 =  buffer[3];
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	78db      	ldrb	r3, [r3, #3]
 8000e08:	733b      	strb	r3, [r7, #12]
  uint16_t b = ((b2 & 0x7f) << 7) | (b1 & 0x7f);
 8000e0a:	7b3b      	ldrb	r3, [r7, #12]
 8000e0c:	01db      	lsls	r3, r3, #7
 8000e0e:	b21b      	sxth	r3, r3
 8000e10:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 8000e14:	b21a      	sxth	r2, r3
 8000e16:	7b7b      	ldrb	r3, [r7, #13]
 8000e18:	b21b      	sxth	r3, r3
 8000e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	4313      	orrs	r3, r2
 8000e22:	b21b      	sxth	r3, r3
 8000e24:	817b      	strh	r3, [r7, #10]
  

  switch (msgtype) {
 8000e26:	7bbb      	ldrb	r3, [r7, #14]
 8000e28:	2bf0      	cmp	r3, #240	; 0xf0
 8000e2a:	d104      	bne.n	8000e36 <MIDI_Receive+0x7a>
  case 0xF0:
    if(chan == 0x0F) {
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	2b0f      	cmp	r3, #15
 8000e30:	d103      	bne.n	8000e3a <MIDI_Receive+0x7e>
        NVIC_SystemReset(); // Reset into DFU mode
 8000e32:	f7ff ff77 	bl	8000d24 <__NVIC_SystemReset>
    }
  	break;
  default:
  	break;
 8000e36:	bf00      	nop
 8000e38:	e000      	b.n	8000e3c <MIDI_Receive+0x80>
  	break;
 8000e3a:	bf00      	nop
  }
  return (0);
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	24000338 	.word	0x24000338
 8000e4c:	0800c29c 	.word	0x0800c29c
 8000e50:	0800c238 	.word	0x0800c238

08000e54 <MIDI_Set_u8g2>:

void MIDI_Receive_Set_CallBack(void (*fp)(uint8_t*)) {
	MIDI_Receive_CallBack = fp;
}

void MIDI_Set_u8g2(u8g2_t *lib) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	u8g2 = *lib;
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	; (8000e94 <MIDI_Set_u8g2+0x40>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4610      	mov	r0, r2
 8000e62:	4619      	mov	r1, r3
 8000e64:	2388      	movs	r3, #136	; 0x88
 8000e66:	461a      	mov	r2, r3
 8000e68:	f00b f9c4 	bl	800c1f4 <memcpy>

	  u8g2_ClearBuffer(&u8g2);
 8000e6c:	4809      	ldr	r0, [pc, #36]	; (8000e94 <MIDI_Set_u8g2+0x40>)
 8000e6e:	f000 f817 	bl	8000ea0 <u8g2_ClearBuffer>
	  u8g2_SetFont(&u8g2, u8g2_font_pcsenior_8u);
 8000e72:	4909      	ldr	r1, [pc, #36]	; (8000e98 <MIDI_Set_u8g2+0x44>)
 8000e74:	4807      	ldr	r0, [pc, #28]	; (8000e94 <MIDI_Set_u8g2+0x40>)
 8000e76:	f000 fe3b 	bl	8001af0 <u8g2_SetFont>
	  u8g2_DrawStr(&u8g2, 0,8*1, "SET");
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <MIDI_Set_u8g2+0x48>)
 8000e7c:	2208      	movs	r2, #8
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4804      	ldr	r0, [pc, #16]	; (8000e94 <MIDI_Set_u8g2+0x40>)
 8000e82:	f000 fd93 	bl	80019ac <u8g2_DrawStr>
	  u8g2_SendBuffer(&u8g2);
 8000e86:	4803      	ldr	r0, [pc, #12]	; (8000e94 <MIDI_Set_u8g2+0x40>)
 8000e88:	f000 f87d 	bl	8000f86 <u8g2_SendBuffer>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	24000338 	.word	0x24000338
 8000e98:	0800c29c 	.word	0x0800c29c
 8000e9c:	0800c240 	.word	0x0800c240

08000ea0 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	7c1b      	ldrb	r3, [r3, #16]
 8000eae:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	fb02 f303 	mul.w	r3, r2, r3
 8000ebe:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f00b f99e 	bl	800c210 <memset>
}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af02      	add	r7, sp, #8
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	70fb      	strb	r3, [r7, #3]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	7c1b      	ldrb	r3, [r3, #16]
 8000ef2:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8000ef4:	78fb      	ldrb	r3, [r7, #3]
 8000ef6:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000efc:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	89ba      	ldrh	r2, [r7, #12]
 8000f04:	fb12 f303 	smulbb	r3, r2, r3
 8000f08:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8000f0a:	89bb      	ldrh	r3, [r7, #12]
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8000f10:	89bb      	ldrh	r3, [r7, #12]
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	4413      	add	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8000f18:	7bf9      	ldrb	r1, [r7, #15]
 8000f1a:	78ba      	ldrb	r2, [r7, #2]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	460b      	mov	r3, r1
 8000f22:	2100      	movs	r1, #0
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f001 fc3e 	bl	80027a6 <u8x8_DrawTile>
}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b084      	sub	sp, #16
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f44:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f4c:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	7c5b      	ldrb	r3, [r3, #17]
 8000f54:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8000f56:	7bba      	ldrb	r2, [r7, #14]
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff ffbd 	bl	8000edc <u8g2_send_tile_row>
    src_row++;
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	3301      	adds	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8000f68:	7bbb      	ldrb	r3, [r7, #14]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8000f6e:	7bfa      	ldrb	r2, [r7, #15]
 8000f70:	7b7b      	ldrb	r3, [r7, #13]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d203      	bcs.n	8000f7e <u8g2_send_buffer+0x4c>
 8000f76:	7bba      	ldrb	r2, [r7, #14]
 8000f78:	7b3b      	ldrb	r3, [r7, #12]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d3eb      	bcc.n	8000f56 <u8g2_send_buffer+0x24>
}
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ffcf 	bl	8000f32 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f001 fc57 	bl	8002848 <u8x8_RefreshDisplay>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <u8g2_m_16_8_f>:
  static uint8_t buf[256];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  static uint8_t buf[1024];
  *page_cnt = 8;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2208      	movs	r2, #8
 8000fb0:	701a      	strb	r2, [r3, #0]
  return buf;
 8000fb2:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <u8g2_m_16_8_f+0x1c>)
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	240003c0 	.word	0x240003c0

08000fc4 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af02      	add	r7, sp, #8
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x44>)
 8000fda:	490c      	ldr	r1, [pc, #48]	; (800100c <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x48>)
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	f001 fc97 	bl	8002910 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8000fe2:	f107 0313 	add.w	r3, r7, #19
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ffdc 	bl	8000fa4 <u8g2_m_16_8_f>
 8000fec:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8000fee:	7cfa      	ldrb	r2, [r7, #19]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x4c>)
 8000ff6:	6979      	ldr	r1, [r7, #20]
 8000ff8:	68f8      	ldr	r0, [r7, #12]
 8000ffa:	f000 ffa1 	bl	8001f40 <u8g2_SetupBuffer>
}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	08002445 	.word	0x08002445
 800100c:	080026a1 	.word	0x080026a1
 8001010:	08001dc5 	.word	0x08001dc5

08001014 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	781b      	ldrb	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8001044:	78fb      	ldrb	r3, [r7, #3]
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	81fb      	strh	r3, [r7, #14]
    font++;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3301      	adds	r3, #1
 8001056:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8001058:	89fb      	ldrh	r3, [r7, #14]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b29a      	uxth	r2, r3
 8001064:	89fb      	ldrh	r3, [r7, #14]
 8001066:	4413      	add	r3, r2
 8001068:	81fb      	strh	r3, [r7, #14]
    return pos;
 800106a:	89fb      	ldrh	r3, [r7, #14]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001082:	2100      	movs	r1, #0
 8001084:	6838      	ldr	r0, [r7, #0]
 8001086:	f7ff ffc5 	bl	8001014 <u8g2_font_get_byte>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001092:	2101      	movs	r1, #1
 8001094:	6838      	ldr	r0, [r7, #0]
 8001096:	f7ff ffbd 	bl	8001014 <u8g2_font_get_byte>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80010a2:	2102      	movs	r1, #2
 80010a4:	6838      	ldr	r0, [r7, #0]
 80010a6:	f7ff ffb5 	bl	8001014 <u8g2_font_get_byte>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80010b2:	2103      	movs	r1, #3
 80010b4:	6838      	ldr	r0, [r7, #0]
 80010b6:	f7ff ffad 	bl	8001014 <u8g2_font_get_byte>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80010c2:	2104      	movs	r1, #4
 80010c4:	6838      	ldr	r0, [r7, #0]
 80010c6:	f7ff ffa5 	bl	8001014 <u8g2_font_get_byte>
 80010ca:	4603      	mov	r3, r0
 80010cc:	461a      	mov	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80010d2:	2105      	movs	r1, #5
 80010d4:	6838      	ldr	r0, [r7, #0]
 80010d6:	f7ff ff9d 	bl	8001014 <u8g2_font_get_byte>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80010e2:	2106      	movs	r1, #6
 80010e4:	6838      	ldr	r0, [r7, #0]
 80010e6:	f7ff ff95 	bl	8001014 <u8g2_font_get_byte>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80010f2:	2107      	movs	r1, #7
 80010f4:	6838      	ldr	r0, [r7, #0]
 80010f6:	f7ff ff8d 	bl	8001014 <u8g2_font_get_byte>
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8001102:	2108      	movs	r1, #8
 8001104:	6838      	ldr	r0, [r7, #0]
 8001106:	f7ff ff85 	bl	8001014 <u8g2_font_get_byte>
 800110a:	4603      	mov	r3, r0
 800110c:	461a      	mov	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8001112:	2109      	movs	r1, #9
 8001114:	6838      	ldr	r0, [r7, #0]
 8001116:	f7ff ff7d 	bl	8001014 <u8g2_font_get_byte>
 800111a:	4603      	mov	r3, r0
 800111c:	b25a      	sxtb	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8001122:	210a      	movs	r1, #10
 8001124:	6838      	ldr	r0, [r7, #0]
 8001126:	f7ff ff75 	bl	8001014 <u8g2_font_get_byte>
 800112a:	4603      	mov	r3, r0
 800112c:	b25a      	sxtb	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001132:	210b      	movs	r1, #11
 8001134:	6838      	ldr	r0, [r7, #0]
 8001136:	f7ff ff6d 	bl	8001014 <u8g2_font_get_byte>
 800113a:	4603      	mov	r3, r0
 800113c:	b25a      	sxtb	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001142:	210c      	movs	r1, #12
 8001144:	6838      	ldr	r0, [r7, #0]
 8001146:	f7ff ff65 	bl	8001014 <u8g2_font_get_byte>
 800114a:	4603      	mov	r3, r0
 800114c:	b25a      	sxtb	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001152:	210d      	movs	r1, #13
 8001154:	6838      	ldr	r0, [r7, #0]
 8001156:	f7ff ff5d 	bl	8001014 <u8g2_font_get_byte>
 800115a:	4603      	mov	r3, r0
 800115c:	b25a      	sxtb	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001162:	210e      	movs	r1, #14
 8001164:	6838      	ldr	r0, [r7, #0]
 8001166:	f7ff ff55 	bl	8001014 <u8g2_font_get_byte>
 800116a:	4603      	mov	r3, r0
 800116c:	b25a      	sxtb	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8001172:	210f      	movs	r1, #15
 8001174:	6838      	ldr	r0, [r7, #0]
 8001176:	f7ff ff4d 	bl	8001014 <u8g2_font_get_byte>
 800117a:	4603      	mov	r3, r0
 800117c:	b25a      	sxtb	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001182:	2110      	movs	r1, #16
 8001184:	6838      	ldr	r0, [r7, #0]
 8001186:	f7ff ff45 	bl	8001014 <u8g2_font_get_byte>
 800118a:	4603      	mov	r3, r0
 800118c:	b25a      	sxtb	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001192:	2111      	movs	r1, #17
 8001194:	6838      	ldr	r0, [r7, #0]
 8001196:	f7ff ff4f 	bl	8001038 <u8g2_font_get_word>
 800119a:	4603      	mov	r3, r0
 800119c:	461a      	mov	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80011a2:	2113      	movs	r1, #19
 80011a4:	6838      	ldr	r0, [r7, #0]
 80011a6:	f7ff ff47 	bl	8001038 <u8g2_font_get_word>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80011b2:	2115      	movs	r1, #21
 80011b4:	6838      	ldr	r0, [r7, #0]
 80011b6:	f7ff ff3f 	bl	8001038 <u8g2_font_get_word>
 80011ba:	4603      	mov	r3, r0
 80011bc:	461a      	mov	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	82da      	strh	r2, [r3, #22]
#endif
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80011ca:	b480      	push	{r7}
 80011cc:	b085      	sub	sp, #20
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	460b      	mov	r3, r1
 80011d4:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	7a9b      	ldrb	r3, [r3, #10]
 80011da:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	7b7b      	ldrb	r3, [r7, #13]
 80011e8:	fa42 f303 	asr.w	r3, r2, r3
 80011ec:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80011ee:	7b7b      	ldrb	r3, [r7, #13]
 80011f0:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80011f2:	7bba      	ldrb	r2, [r7, #14]
 80011f4:	78fb      	ldrb	r3, [r7, #3]
 80011f6:	4413      	add	r3, r2
 80011f8:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80011fa:	7bbb      	ldrb	r3, [r7, #14]
 80011fc:	2b07      	cmp	r3, #7
 80011fe:	d91a      	bls.n	8001236 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8001200:	2308      	movs	r3, #8
 8001202:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8001204:	7b3a      	ldrb	r2, [r7, #12]
 8001206:	7b7b      	ldrb	r3, [r7, #13]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	1c5a      	adds	r2, r3, #1
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	7b3b      	ldrb	r3, [r7, #12]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	b25a      	sxtb	r2, r3
 8001226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122a:	4313      	orrs	r3, r2
 800122c:	b25b      	sxtb	r3, r3
 800122e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8001230:	7bbb      	ldrb	r3, [r7, #14]
 8001232:	3b08      	subs	r3, #8
 8001234:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8001236:	78fb      	ldrb	r3, [r7, #3]
 8001238:	f04f 32ff 	mov.w	r2, #4294967295
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	b2db      	uxtb	r3, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	b2da      	uxtb	r2, r3
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4013      	ands	r3, r2
 800124a:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	7bba      	ldrb	r2, [r7, #14]
 8001250:	729a      	strb	r2, [r3, #10]
  return val;
 8001252:	7bfb      	ldrb	r3, [r7, #15]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800126c:	78fb      	ldrb	r3, [r7, #3]
 800126e:	4619      	mov	r1, r3
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ffaa 	bl	80011ca <u8g2_font_decode_get_unsigned_bits>
 8001276:	4603      	mov	r3, r0
 8001278:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800127a:	2301      	movs	r3, #1
 800127c:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800127e:	78fb      	ldrb	r3, [r7, #3]
 8001280:	3b01      	subs	r3, #1
 8001282:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8001284:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	7bbb      	ldrb	r3, [r7, #14]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	b2db      	uxtb	r3, r3
 8001298:	73fb      	strb	r3, [r7, #15]
  return v;
 800129a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80012a6:	b490      	push	{r4, r7}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4604      	mov	r4, r0
 80012ae:	4608      	mov	r0, r1
 80012b0:	4611      	mov	r1, r2
 80012b2:	461a      	mov	r2, r3
 80012b4:	4623      	mov	r3, r4
 80012b6:	71fb      	strb	r3, [r7, #7]
 80012b8:	4603      	mov	r3, r0
 80012ba:	71bb      	strb	r3, [r7, #6]
 80012bc:	460b      	mov	r3, r1
 80012be:	717b      	strb	r3, [r7, #5]
 80012c0:	4613      	mov	r3, r2
 80012c2:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80012c4:	793b      	ldrb	r3, [r7, #4]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d010      	beq.n	80012ec <u8g2_add_vector_y+0x46>
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	dc13      	bgt.n	80012f6 <u8g2_add_vector_y+0x50>
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d002      	beq.n	80012d8 <u8g2_add_vector_y+0x32>
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d005      	beq.n	80012e2 <u8g2_add_vector_y+0x3c>
 80012d6:	e00e      	b.n	80012f6 <u8g2_add_vector_y+0x50>
  {
    case 0:
      dy += y;
 80012d8:	797a      	ldrb	r2, [r7, #5]
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	4413      	add	r3, r2
 80012de:	71fb      	strb	r3, [r7, #7]
      break;
 80012e0:	e00e      	b.n	8001300 <u8g2_add_vector_y+0x5a>
    case 1:
      dy += x;
 80012e2:	79ba      	ldrb	r2, [r7, #6]
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	4413      	add	r3, r2
 80012e8:	71fb      	strb	r3, [r7, #7]
      break;
 80012ea:	e009      	b.n	8001300 <u8g2_add_vector_y+0x5a>
    case 2:
      dy -= y;
 80012ec:	797b      	ldrb	r3, [r7, #5]
 80012ee:	79fa      	ldrb	r2, [r7, #7]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	71fb      	strb	r3, [r7, #7]
      break;
 80012f4:	e004      	b.n	8001300 <u8g2_add_vector_y+0x5a>
    default:
      dy -= x;
 80012f6:	79bb      	ldrb	r3, [r7, #6]
 80012f8:	79fa      	ldrb	r2, [r7, #7]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	71fb      	strb	r3, [r7, #7]
      break;      
 80012fe:	bf00      	nop
  }
  return dy;
 8001300:	79fb      	ldrb	r3, [r7, #7]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bc90      	pop	{r4, r7}
 800130a:	4770      	bx	lr

0800130c <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 800130c:	b490      	push	{r4, r7}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4604      	mov	r4, r0
 8001314:	4608      	mov	r0, r1
 8001316:	4611      	mov	r1, r2
 8001318:	461a      	mov	r2, r3
 800131a:	4623      	mov	r3, r4
 800131c:	71fb      	strb	r3, [r7, #7]
 800131e:	4603      	mov	r3, r0
 8001320:	71bb      	strb	r3, [r7, #6]
 8001322:	460b      	mov	r3, r1
 8001324:	717b      	strb	r3, [r7, #5]
 8001326:	4613      	mov	r3, r2
 8001328:	713b      	strb	r3, [r7, #4]
  switch(dir)
 800132a:	793b      	ldrb	r3, [r7, #4]
 800132c:	2b02      	cmp	r3, #2
 800132e:	d010      	beq.n	8001352 <u8g2_add_vector_x+0x46>
 8001330:	2b02      	cmp	r3, #2
 8001332:	dc13      	bgt.n	800135c <u8g2_add_vector_x+0x50>
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <u8g2_add_vector_x+0x32>
 8001338:	2b01      	cmp	r3, #1
 800133a:	d005      	beq.n	8001348 <u8g2_add_vector_x+0x3c>
 800133c:	e00e      	b.n	800135c <u8g2_add_vector_x+0x50>
  {
    case 0:
      dx += x;
 800133e:	79ba      	ldrb	r2, [r7, #6]
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	4413      	add	r3, r2
 8001344:	71fb      	strb	r3, [r7, #7]
      break;
 8001346:	e00e      	b.n	8001366 <u8g2_add_vector_x+0x5a>
    case 1:
      dx -= y;
 8001348:	797b      	ldrb	r3, [r7, #5]
 800134a:	79fa      	ldrb	r2, [r7, #7]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	71fb      	strb	r3, [r7, #7]
      break;
 8001350:	e009      	b.n	8001366 <u8g2_add_vector_x+0x5a>
    case 2:
      dx -= x;
 8001352:	79bb      	ldrb	r3, [r7, #6]
 8001354:	79fa      	ldrb	r2, [r7, #7]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	71fb      	strb	r3, [r7, #7]
      break;
 800135a:	e004      	b.n	8001366 <u8g2_add_vector_x+0x5a>
    default:
      dx += y;
 800135c:	797a      	ldrb	r2, [r7, #5]
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	4413      	add	r3, r2
 8001362:	71fb      	strb	r3, [r7, #7]
      break;      
 8001364:	bf00      	nop
  }
  return dx;
 8001366:	79fb      	ldrb	r3, [r7, #7]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bc90      	pop	{r4, r7}
 8001370:	4770      	bx	lr

08001372 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b088      	sub	sp, #32
 8001376:	af02      	add	r7, sp, #8
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	460b      	mov	r3, r1
 800137c:	70fb      	strb	r3, [r7, #3]
 800137e:	4613      	mov	r3, r2
 8001380:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3358      	adds	r3, #88	; 0x58
 8001386:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8001388:	78fb      	ldrb	r3, [r7, #3]
 800138a:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001392:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800139a:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80013a2:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80013a4:	7bfa      	ldrb	r2, [r7, #15]
 80013a6:	7d7b      	ldrb	r3, [r7, #21]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80013b0:	7dfa      	ldrb	r2, [r7, #23]
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d201      	bcs.n	80013bc <u8g2_font_decode_len+0x4a>
      current = cnt;
 80013b8:	7dfb      	ldrb	r3, [r7, #23]
 80013ba:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	791b      	ldrb	r3, [r3, #4]
 80013c0:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	795b      	ldrb	r3, [r3, #5]
 80013c6:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80013c8:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80013cc:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	7b9b      	ldrb	r3, [r3, #14]
 80013d4:	7bb8      	ldrb	r0, [r7, #14]
 80013d6:	f7ff ff99 	bl	800130c <u8g2_add_vector_x>
 80013da:	4603      	mov	r3, r0
 80013dc:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80013de:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80013e2:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	7b9b      	ldrb	r3, [r3, #14]
 80013ea:	7b78      	ldrb	r0, [r7, #13]
 80013ec:	f7ff ff5b 	bl	80012a6 <u8g2_add_vector_y>
 80013f0:	4603      	mov	r3, r0
 80013f2:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80013f4:	78bb      	ldrb	r3, [r7, #2]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00f      	beq.n	800141a <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	7b1a      	ldrb	r2, [r3, #12]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	7b9b      	ldrb	r3, [r3, #14]
 8001408:	7db8      	ldrb	r0, [r7, #22]
 800140a:	7b7a      	ldrb	r2, [r7, #13]
 800140c:	7bb9      	ldrb	r1, [r7, #14]
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	4603      	mov	r3, r0
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 fbf5 	bl	8001c02 <u8g2_DrawHVLine>
 8001418:	e012      	b.n	8001440 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	7adb      	ldrb	r3, [r3, #11]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10e      	bne.n	8001440 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	7b5a      	ldrb	r2, [r3, #13]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	7b9b      	ldrb	r3, [r3, #14]
 8001430:	7db8      	ldrb	r0, [r7, #22]
 8001432:	7b7a      	ldrb	r2, [r7, #13]
 8001434:	7bb9      	ldrb	r1, [r7, #14]
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	4603      	mov	r3, r0
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 fbe1 	bl	8001c02 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001440:	7dfa      	ldrb	r2, [r7, #23]
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	429a      	cmp	r2, r3
 8001446:	d309      	bcc.n	800145c <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8001448:	7dfa      	ldrb	r2, [r7, #23]
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	757b      	strb	r3, [r7, #21]
    ly++;
 8001454:	7d3b      	ldrb	r3, [r7, #20]
 8001456:	3301      	adds	r3, #1
 8001458:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800145a:	e79f      	b.n	800139c <u8g2_font_decode_len+0x2a>
      break;
 800145c:	bf00      	nop
  }
  lx += cnt;
 800145e:	7d7a      	ldrb	r2, [r7, #21]
 8001460:	7dfb      	ldrb	r3, [r7, #23]
 8001462:	4413      	add	r3, r2
 8001464:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001466:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 800146e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	71da      	strb	r2, [r3, #7]
  
}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b084      	sub	sp, #16
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3358      	adds	r3, #88	; 0x58
 800148c:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80014a0:	4619      	mov	r1, r3
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f7ff fe91 	bl	80011ca <u8g2_font_decode_get_unsigned_bits>
 80014a8:	4603      	mov	r3, r0
 80014aa:	b25a      	sxtb	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80014b6:	4619      	mov	r1, r3
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f7ff fe86 	bl	80011ca <u8g2_font_decode_get_unsigned_bits>
 80014be:	4603      	mov	r3, r0
 80014c0:	b25a      	sxtb	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	7b1b      	ldrb	r3, [r3, #12]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	bf0c      	ite	eq
 80014d8:	2301      	moveq	r3, #1
 80014da:	2300      	movne	r3, #0
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	461a      	mov	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	735a      	strb	r2, [r3, #13]
}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af02      	add	r7, sp, #8
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3358      	adds	r3, #88	; 0x58
 80014fa:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 80014fc:	6839      	ldr	r1, [r7, #0]
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ffbd 	bl	800147e <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800150a:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8001512:	4619      	mov	r1, r3
 8001514:	6938      	ldr	r0, [r7, #16]
 8001516:	f7ff fea3 	bl	8001260 <u8g2_font_decode_get_signed_bits>
 800151a:	4603      	mov	r3, r0
 800151c:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8001524:	4619      	mov	r1, r3
 8001526:	6938      	ldr	r0, [r7, #16]
 8001528:	f7ff fe9a 	bl	8001260 <u8g2_font_decode_get_signed_bits>
 800152c:	4603      	mov	r3, r0
 800152e:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001536:	4619      	mov	r1, r3
 8001538:	6938      	ldr	r0, [r7, #16]
 800153a:	f7ff fe91 	bl	8001260 <u8g2_font_decode_get_signed_bits>
 800153e:	4603      	mov	r3, r0
 8001540:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001548:	2b00      	cmp	r3, #0
 800154a:	f340 80cf 	ble.w	80016ec <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	7918      	ldrb	r0, [r3, #4]
 8001552:	7bfa      	ldrb	r2, [r7, #15]
 8001554:	7b7b      	ldrb	r3, [r7, #13]
 8001556:	4413      	add	r3, r2
 8001558:	b2db      	uxtb	r3, r3
 800155a:	425b      	negs	r3, r3
 800155c:	b2db      	uxtb	r3, r3
 800155e:	b25a      	sxtb	r2, r3
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	7b9b      	ldrb	r3, [r3, #14]
 8001564:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001568:	f7ff fed0 	bl	800130c <u8g2_add_vector_x>
 800156c:	4603      	mov	r3, r0
 800156e:	461a      	mov	r2, r3
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	7958      	ldrb	r0, [r3, #5]
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	7b7b      	ldrb	r3, [r7, #13]
 800157c:	4413      	add	r3, r2
 800157e:	b2db      	uxtb	r3, r3
 8001580:	425b      	negs	r3, r3
 8001582:	b2db      	uxtb	r3, r3
 8001584:	b25a      	sxtb	r2, r3
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	7b9b      	ldrb	r3, [r3, #14]
 800158a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800158e:	f7ff fe8a 	bl	80012a6 <u8g2_add_vector_y>
 8001592:	4603      	mov	r3, r0
 8001594:	461a      	mov	r2, r3
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	791b      	ldrb	r3, [r3, #4]
 800159e:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	795b      	ldrb	r3, [r3, #5]
 80015a4:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 80015a6:	7dfb      	ldrb	r3, [r7, #23]
 80015a8:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 80015aa:	7d7b      	ldrb	r3, [r7, #21]
 80015ac:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	7b9b      	ldrb	r3, [r3, #14]
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d852      	bhi.n	800165c <u8g2_font_decode_glyph+0x170>
 80015b6:	a201      	add	r2, pc, #4	; (adr r2, 80015bc <u8g2_font_decode_glyph+0xd0>)
 80015b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015bc:	080015cd 	.word	0x080015cd
 80015c0:	080015e5 	.word	0x080015e5
 80015c4:	08001609 	.word	0x08001609
 80015c8:	08001639 	.word	0x08001639
      {
	case 0:
	    x1 += decode->glyph_width;
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	7dbb      	ldrb	r3, [r7, #22]
 80015d6:	4413      	add	r3, r2
 80015d8:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	7d3b      	ldrb	r3, [r7, #20]
 80015de:	4413      	add	r3, r2
 80015e0:	753b      	strb	r3, [r7, #20]
	    break;
 80015e2:	e03b      	b.n	800165c <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	7dfa      	ldrb	r2, [r7, #23]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80015ec:	7dfb      	ldrb	r3, [r7, #23]
 80015ee:	3301      	adds	r3, #1
 80015f0:	75fb      	strb	r3, [r7, #23]
	    x1++;
 80015f2:	7dbb      	ldrb	r3, [r7, #22]
 80015f4:	3301      	adds	r3, #1
 80015f6:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	7d3b      	ldrb	r3, [r7, #20]
 8001602:	4413      	add	r3, r2
 8001604:	753b      	strb	r3, [r7, #20]
	    break;
 8001606:	e029      	b.n	800165c <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	7dfa      	ldrb	r2, [r7, #23]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001616:	7dfb      	ldrb	r3, [r7, #23]
 8001618:	3301      	adds	r3, #1
 800161a:	75fb      	strb	r3, [r7, #23]
	    x1++;
 800161c:	7dbb      	ldrb	r3, [r7, #22]
 800161e:	3301      	adds	r3, #1
 8001620:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	7d7a      	ldrb	r2, [r7, #21]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800162a:	7d7b      	ldrb	r3, [r7, #21]
 800162c:	3301      	adds	r3, #1
 800162e:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001630:	7d3b      	ldrb	r3, [r7, #20]
 8001632:	3301      	adds	r3, #1
 8001634:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001636:	e011      	b.n	800165c <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8001638:	7bfa      	ldrb	r2, [r7, #15]
 800163a:	7dbb      	ldrb	r3, [r7, #22]
 800163c:	4413      	add	r3, r2
 800163e:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001646:	b2db      	uxtb	r3, r3
 8001648:	7d7a      	ldrb	r2, [r7, #21]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800164e:	7d7b      	ldrb	r3, [r7, #21]
 8001650:	3301      	adds	r3, #1
 8001652:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001654:	7d3b      	ldrb	r3, [r7, #20]
 8001656:	3301      	adds	r3, #1
 8001658:	753b      	strb	r3, [r7, #20]
	    break;	  
 800165a:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 800165c:	7db8      	ldrb	r0, [r7, #22]
 800165e:	7d7a      	ldrb	r2, [r7, #21]
 8001660:	7df9      	ldrb	r1, [r7, #23]
 8001662:	7d3b      	ldrb	r3, [r7, #20]
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	4603      	mov	r3, r0
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fb80 	bl	8001d6e <u8g2_IsIntersection>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <u8g2_font_decode_glyph+0x18e>
	return d;
 8001674:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001678:	e03a      	b.n	80016f0 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	2200      	movs	r2, #0
 800167e:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	2200      	movs	r2, #0
 8001684:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800168c:	4619      	mov	r1, r3
 800168e:	6938      	ldr	r0, [r7, #16]
 8001690:	f7ff fd9b 	bl	80011ca <u8g2_font_decode_get_unsigned_bits>
 8001694:	4603      	mov	r3, r0
 8001696:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800169e:	4619      	mov	r1, r3
 80016a0:	6938      	ldr	r0, [r7, #16]
 80016a2:	f7ff fd92 	bl	80011ca <u8g2_font_decode_get_unsigned_bits>
 80016a6:	4603      	mov	r3, r0
 80016a8:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80016aa:	7afb      	ldrb	r3, [r7, #11]
 80016ac:	2200      	movs	r2, #0
 80016ae:	4619      	mov	r1, r3
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff fe5e 	bl	8001372 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80016b6:	7abb      	ldrb	r3, [r7, #10]
 80016b8:	2201      	movs	r2, #1
 80016ba:	4619      	mov	r1, r3
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff fe58 	bl	8001372 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80016c2:	2101      	movs	r1, #1
 80016c4:	6938      	ldr	r0, [r7, #16]
 80016c6:	f7ff fd80 	bl	80011ca <u8g2_font_decode_get_unsigned_bits>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1ec      	bne.n	80016aa <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80016d6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80016da:	429a      	cmp	r2, r3
 80016dc:	dd00      	ble.n	80016e0 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80016de:	e7d2      	b.n	8001686 <u8g2_font_decode_glyph+0x19a>
	break;
 80016e0:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	7b1a      	ldrb	r2, [r3, #12]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  }
  return d;
 80016ec:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001708:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	3317      	adds	r3, #23
 800170e:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001710:	887b      	ldrh	r3, [r7, #2]
 8001712:	2bff      	cmp	r3, #255	; 0xff
 8001714:	d82a      	bhi.n	800176c <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001716:	887b      	ldrh	r3, [r7, #2]
 8001718:	2b60      	cmp	r3, #96	; 0x60
 800171a:	d907      	bls.n	800172c <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8001722:	461a      	mov	r2, r3
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	4413      	add	r3, r2
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	e009      	b.n	8001740 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 800172c:	887b      	ldrh	r3, [r7, #2]
 800172e:	2b40      	cmp	r3, #64	; 0x40
 8001730:	d906      	bls.n	8001740 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001738:	461a      	mov	r2, r3
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	4413      	add	r3, r2
 800173e:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	3301      	adds	r3, #1
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d04e      	beq.n	80017e8 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	b29b      	uxth	r3, r3
 8001750:	887a      	ldrh	r2, [r7, #2]
 8001752:	429a      	cmp	r2, r3
 8001754:	d102      	bne.n	800175c <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	3302      	adds	r3, #2
 800175a:	e049      	b.n	80017f0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	3301      	adds	r3, #1
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	4413      	add	r3, r2
 8001768:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800176a:	e7e9      	b.n	8001740 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8001772:	461a      	mov	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	4413      	add	r3, r2
 8001778:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800177e:	2100      	movs	r1, #0
 8001780:	6938      	ldr	r0, [r7, #16]
 8001782:	f7ff fc59 	bl	8001038 <u8g2_font_get_word>
 8001786:	4603      	mov	r3, r0
 8001788:	461a      	mov	r2, r3
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	4413      	add	r3, r2
 800178e:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001790:	2102      	movs	r1, #2
 8001792:	6938      	ldr	r0, [r7, #16]
 8001794:	f7ff fc50 	bl	8001038 <u8g2_font_get_word>
 8001798:	4603      	mov	r3, r0
 800179a:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	3304      	adds	r3, #4
 80017a0:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80017a2:	89fa      	ldrh	r2, [r7, #14]
 80017a4:	887b      	ldrh	r3, [r7, #2]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d3e9      	bcc.n	800177e <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80017b0:	89fb      	ldrh	r3, [r7, #14]
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	3301      	adds	r3, #1
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	b29a      	uxth	r2, r3
 80017be:	89fb      	ldrh	r3, [r7, #14]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80017c4:	89fb      	ldrh	r3, [r7, #14]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d010      	beq.n	80017ec <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80017ca:	89fa      	ldrh	r2, [r7, #14]
 80017cc:	887b      	ldrh	r3, [r7, #2]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d102      	bne.n	80017d8 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	3303      	adds	r3, #3
 80017d6:	e00b      	b.n	80017f0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	3302      	adds	r3, #2
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	461a      	mov	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	4413      	add	r3, r2
 80017e4:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80017e6:	e7e0      	b.n	80017aa <u8g2_font_get_glyph_data+0xb2>
	break;
 80017e8:	bf00      	nop
 80017ea:	e000      	b.n	80017ee <u8g2_font_get_glyph_data+0xf6>
	break;
 80017ec:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	4608      	mov	r0, r1
 8001802:	4611      	mov	r1, r2
 8001804:	461a      	mov	r2, r3
 8001806:	4603      	mov	r3, r0
 8001808:	70fb      	strb	r3, [r7, #3]
 800180a:	460b      	mov	r3, r1
 800180c:	70bb      	strb	r3, [r7, #2]
 800180e:	4613      	mov	r3, r2
 8001810:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	78fa      	ldrb	r2, [r7, #3]
 800181a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8g2->font_decode.target_y = y;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	78ba      	ldrb	r2, [r7, #2]
 8001822:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001826:	883b      	ldrh	r3, [r7, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ff64 	bl	80016f8 <u8g2_font_get_glyph_data>
 8001830:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d005      	beq.n	8001844 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff fe56 	bl	80014ec <u8g2_font_decode_glyph>
 8001840:	4603      	mov	r3, r0
 8001842:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8001844:	7bfb      	ldrb	r3, [r7, #15]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	4608      	mov	r0, r1
 800185a:	4611      	mov	r1, r2
 800185c:	461a      	mov	r2, r3
 800185e:	4603      	mov	r3, r0
 8001860:	70fb      	strb	r3, [r7, #3]
 8001862:	460b      	mov	r3, r1
 8001864:	70bb      	strb	r3, [r7, #2]
 8001866:	4613      	mov	r3, r2
 8001868:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8001870:	2b03      	cmp	r3, #3
 8001872:	d833      	bhi.n	80018dc <u8g2_DrawGlyph+0x8c>
 8001874:	a201      	add	r2, pc, #4	; (adr r2, 800187c <u8g2_DrawGlyph+0x2c>)
 8001876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187a:	bf00      	nop
 800187c:	0800188d 	.word	0x0800188d
 8001880:	080018a1 	.word	0x080018a1
 8001884:	080018b5 	.word	0x080018b5
 8001888:	080018c9 	.word	0x080018c9
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	4798      	blx	r3
 8001894:	4603      	mov	r3, r0
 8001896:	461a      	mov	r2, r3
 8001898:	78bb      	ldrb	r3, [r7, #2]
 800189a:	4413      	add	r3, r2
 800189c:	70bb      	strb	r3, [r7, #2]
      break;
 800189e:	e01d      	b.n	80018dc <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	4798      	blx	r3
 80018a8:	4603      	mov	r3, r0
 80018aa:	461a      	mov	r2, r3
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	1a9b      	subs	r3, r3, r2
 80018b0:	70fb      	strb	r3, [r7, #3]
      break;
 80018b2:	e013      	b.n	80018dc <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	4798      	blx	r3
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	78bb      	ldrb	r3, [r7, #2]
 80018c2:	1a9b      	subs	r3, r3, r2
 80018c4:	70bb      	strb	r3, [r7, #2]
      break;
 80018c6:	e009      	b.n	80018dc <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	4798      	blx	r3
 80018d0:	4603      	mov	r3, r0
 80018d2:	461a      	mov	r2, r3
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	4413      	add	r3, r2
 80018d8:	70fb      	strb	r3, [r7, #3]
      break;
 80018da:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80018dc:	883b      	ldrh	r3, [r7, #0]
 80018de:	78ba      	ldrb	r2, [r7, #2]
 80018e0:	78f9      	ldrb	r1, [r7, #3]
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ff88 	bl	80017f8 <u8g2_font_draw_glyph>
 80018e8:	4603      	mov	r3, r0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop

080018f4 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	460b      	mov	r3, r1
 8001900:	72fb      	strb	r3, [r7, #11]
 8001902:	4613      	mov	r3, r2
 8001904:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f000 fc6e 	bl	80021e8 <u8x8_utf8_init>
  sum = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	7812      	ldrb	r2, [r2, #0]
 8001918:	4611      	mov	r1, r2
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	4798      	blx	r3
 800191e:	4603      	mov	r3, r0
 8001920:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001922:	8abb      	ldrh	r3, [r7, #20]
 8001924:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001928:	4293      	cmp	r3, r2
 800192a:	d038      	beq.n	800199e <u8g2_draw_string+0xaa>
      break;
    str++;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3301      	adds	r3, #1
 8001930:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001932:	8abb      	ldrh	r3, [r7, #20]
 8001934:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001938:	4293      	cmp	r3, r2
 800193a:	d0e9      	beq.n	8001910 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 800193c:	8abb      	ldrh	r3, [r7, #20]
 800193e:	7aba      	ldrb	r2, [r7, #10]
 8001940:	7af9      	ldrb	r1, [r7, #11]
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f7ff ff84 	bl	8001850 <u8g2_DrawGlyph>
 8001948:	4603      	mov	r3, r0
 800194a:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8001952:	2b03      	cmp	r3, #3
 8001954:	d81e      	bhi.n	8001994 <u8g2_draw_string+0xa0>
 8001956:	a201      	add	r2, pc, #4	; (adr r2, 800195c <u8g2_draw_string+0x68>)
 8001958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195c:	0800196d 	.word	0x0800196d
 8001960:	08001977 	.word	0x08001977
 8001964:	08001981 	.word	0x08001981
 8001968:	0800198b 	.word	0x0800198b
      {
	case 0:
	  x += delta;
 800196c:	7afa      	ldrb	r2, [r7, #11]
 800196e:	7cfb      	ldrb	r3, [r7, #19]
 8001970:	4413      	add	r3, r2
 8001972:	72fb      	strb	r3, [r7, #11]
	  break;
 8001974:	e00e      	b.n	8001994 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001976:	7aba      	ldrb	r2, [r7, #10]
 8001978:	7cfb      	ldrb	r3, [r7, #19]
 800197a:	4413      	add	r3, r2
 800197c:	72bb      	strb	r3, [r7, #10]
	  break;
 800197e:	e009      	b.n	8001994 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001980:	7afa      	ldrb	r2, [r7, #11]
 8001982:	7cfb      	ldrb	r3, [r7, #19]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	72fb      	strb	r3, [r7, #11]
	  break;
 8001988:	e004      	b.n	8001994 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 800198a:	7aba      	ldrb	r2, [r7, #10]
 800198c:	7cfb      	ldrb	r3, [r7, #19]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	72bb      	strb	r3, [r7, #10]
	  break;
 8001992:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 8001994:	7dfa      	ldrb	r2, [r7, #23]
 8001996:	7cfb      	ldrb	r3, [r7, #19]
 8001998:	4413      	add	r3, r2
 800199a:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800199c:	e7b8      	b.n	8001910 <u8g2_draw_string+0x1c>
      break;
 800199e:	bf00      	nop
    }
  }
  return sum;
 80019a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop

080019ac <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	460b      	mov	r3, r1
 80019b8:	72fb      	strb	r3, [r7, #11]
 80019ba:	4613      	mov	r3, r2
 80019bc:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4a06      	ldr	r2, [pc, #24]	; (80019dc <u8g2_DrawStr+0x30>)
 80019c2:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80019c4:	7aba      	ldrb	r2, [r7, #10]
 80019c6:	7af9      	ldrb	r1, [r7, #11]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f7ff ff92 	bl	80018f4 <u8g2_draw_string>
 80019d0:	4603      	mov	r3, r0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	08002205 	.word	0x08002205

080019e0 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d05d      	beq.n	8001aac <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f993 2075 	ldrsb.w	r2, [r3, #117]	; 0x75
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f993 2076 	ldrsb.w	r2, [r3, #118]	; 0x76
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d04d      	beq.n	8001aae <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d11c      	bne.n	8001a56 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f993 3077 	ldrsb.w	r3, [r3, #119]	; 0x77
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	da05      	bge.n	8001a38 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f993 2077 	ldrsb.w	r2, [r3, #119]	; 0x77
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f993 3078 	ldrsb.w	r3, [r3, #120]	; 0x78
 8001a44:	429a      	cmp	r2, r3
 8001a46:	dd32      	ble.n	8001aae <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f993 2078 	ldrsb.w	r2, [r3, #120]	; 0x78
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8001a54:	e02b      	b.n	8001aae <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8001a64:	4619      	mov	r1, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8001a6c:	440b      	add	r3, r1
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	da0d      	bge.n	8001a8e <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	b25a      	sxtb	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	dd07      	ble.n	8001aae <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8001aaa:	e000      	b.n	8001aae <u8g2_UpdateRefHeight+0xce>
    return;
 8001aac:	bf00      	nop
  }  
}
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  return 0;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a04      	ldr	r2, [pc, #16]	; (8001aec <u8g2_SetFontPosBaseline+0x1c>)
 8001adc:	655a      	str	r2, [r3, #84]	; 0x54
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	08001ab9 	.word	0x08001ab9

08001af0 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d00b      	beq.n	8001b1c <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	651a      	str	r2, [r3, #80]	; 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3368      	adds	r3, #104	; 0x68
 8001b0e:	6839      	ldr	r1, [r7, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fab1 	bl	8001078 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff ff62 	bl	80019e0 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	460b      	mov	r3, r1
 8001b34:	71fb      	strb	r3, [r7, #7]
 8001b36:	4613      	mov	r3, r2
 8001b38:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
 8001b42:	75bb      	strb	r3, [r7, #22]
  b += *len;
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	781a      	ldrb	r2, [r3, #0]
 8001b48:	7dbb      	ldrb	r3, [r7, #22]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8001b4e:	7dfa      	ldrb	r2, [r7, #23]
 8001b50:	7dbb      	ldrb	r3, [r7, #22]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d90b      	bls.n	8001b6e <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8001b56:	7dfa      	ldrb	r2, [r7, #23]
 8001b58:	79bb      	ldrb	r3, [r7, #6]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d205      	bcs.n	8001b6a <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8001b5e:	79bb      	ldrb	r3, [r7, #6]
 8001b60:	75bb      	strb	r3, [r7, #22]
      b--;
 8001b62:	7dbb      	ldrb	r3, [r7, #22]
 8001b64:	3b01      	subs	r3, #1
 8001b66:	75bb      	strb	r3, [r7, #22]
 8001b68:	e001      	b.n	8001b6e <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8001b6e:	7dfa      	ldrb	r2, [r7, #23]
 8001b70:	79bb      	ldrb	r3, [r7, #6]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d301      	bcc.n	8001b7a <u8g2_clip_intersection2+0x56>
    return 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	e01c      	b.n	8001bb4 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8001b7a:	7dba      	ldrb	r2, [r7, #22]
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d801      	bhi.n	8001b86 <u8g2_clip_intersection2+0x62>
    return 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e016      	b.n	8001bb4 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8001b86:	7dfa      	ldrb	r2, [r7, #23]
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d201      	bcs.n	8001b92 <u8g2_clip_intersection2+0x6e>
    a = c;
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 8001b92:	7dba      	ldrb	r2, [r7, #22]
 8001b94:	79bb      	ldrb	r3, [r7, #6]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d901      	bls.n	8001b9e <u8g2_clip_intersection2+0x7a>
    b = d;
 8001b9a:	79bb      	ldrb	r3, [r7, #6]
 8001b9c:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	7dfa      	ldrb	r2, [r7, #23]
 8001ba2:	701a      	strb	r2, [r3, #0]
  b -= a;
 8001ba4:	7dba      	ldrb	r2, [r7, #22]
 8001ba6:	7dfb      	ldrb	r3, [r7, #23]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	7dba      	ldrb	r2, [r7, #22]
 8001bb0:	701a      	strb	r2, [r3, #0]
  return 1;
 8001bb2:	2301      	movs	r3, #1
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	371c      	adds	r7, #28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af02      	add	r7, sp, #8
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	4608      	mov	r0, r1
 8001bca:	4611      	mov	r1, r2
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4603      	mov	r3, r0
 8001bd0:	70fb      	strb	r3, [r7, #3]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	70bb      	strb	r3, [r7, #2]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001be0:	78ba      	ldrb	r2, [r7, #2]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001bea:	7878      	ldrb	r0, [r7, #1]
 8001bec:	78ba      	ldrb	r2, [r7, #2]
 8001bee:	78f9      	ldrb	r1, [r7, #3]
 8001bf0:	7e3b      	ldrb	r3, [r7, #24]
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	47a0      	blx	r4
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd90      	pop	{r4, r7, pc}

08001c02 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001c02:	b590      	push	{r4, r7, lr}
 8001c04:	b085      	sub	sp, #20
 8001c06:	af02      	add	r7, sp, #8
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	4608      	mov	r0, r1
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4603      	mov	r3, r0
 8001c12:	70fb      	strb	r3, [r7, #3]
 8001c14:	460b      	mov	r3, r1
 8001c16:	70bb      	strb	r3, [r7, #2]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d06d      	beq.n	8001d02 <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8001c26:	787b      	ldrb	r3, [r7, #1]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d06a      	beq.n	8001d02 <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8001c2c:	787b      	ldrb	r3, [r7, #1]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d918      	bls.n	8001c64 <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 8001c32:	7e3b      	ldrb	r3, [r7, #24]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d109      	bne.n	8001c4c <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 8001c38:	78fa      	ldrb	r2, [r7, #3]
 8001c3a:	787b      	ldrb	r3, [r7, #1]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	70fb      	strb	r3, [r7, #3]
	  x++;
 8001c42:	78fb      	ldrb	r3, [r7, #3]
 8001c44:	3301      	adds	r3, #1
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	70fb      	strb	r3, [r7, #3]
 8001c4a:	e00b      	b.n	8001c64 <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 8001c4c:	7e3b      	ldrb	r3, [r7, #24]
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d108      	bne.n	8001c64 <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 8001c52:	78ba      	ldrb	r2, [r7, #2]
 8001c54:	787b      	ldrb	r3, [r7, #1]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	70bb      	strb	r3, [r7, #2]
	  y++;
 8001c5c:	78bb      	ldrb	r3, [r7, #2]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 8001c64:	7e3b      	ldrb	r3, [r7, #24]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 8001c6c:	7e3b      	ldrb	r3, [r7, #24]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d119      	bne.n	8001ca6 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8001c78:	78bb      	ldrb	r3, [r7, #2]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d838      	bhi.n	8001cf0 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8001c84:	78bb      	ldrb	r3, [r7, #2]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d934      	bls.n	8001cf4 <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001c96:	1c79      	adds	r1, r7, #1
 8001c98:	1cf8      	adds	r0, r7, #3
 8001c9a:	f7ff ff43 	bl	8001b24 <u8g2_clip_intersection2>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d119      	bne.n	8001cd8 <u8g2_DrawHVLine+0xd6>
	  return;
 8001ca4:	e02d      	b.n	8001d02 <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d822      	bhi.n	8001cf8 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d91e      	bls.n	8001cfc <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001cca:	1c79      	adds	r1, r7, #1
 8001ccc:	1cb8      	adds	r0, r7, #2
 8001cce:	f7ff ff29 	bl	8001b24 <u8g2_clip_intersection2>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d013      	beq.n	8001d00 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cdc:	689c      	ldr	r4, [r3, #8]
 8001cde:	78f9      	ldrb	r1, [r7, #3]
 8001ce0:	78ba      	ldrb	r2, [r7, #2]
 8001ce2:	7878      	ldrb	r0, [r7, #1]
 8001ce4:	7e3b      	ldrb	r3, [r7, #24]
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	4603      	mov	r3, r0
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	47a0      	blx	r4
 8001cee:	e008      	b.n	8001d02 <u8g2_DrawHVLine+0x100>
	  return;
 8001cf0:	bf00      	nop
 8001cf2:	e006      	b.n	8001d02 <u8g2_DrawHVLine+0x100>
	  return;
 8001cf4:	bf00      	nop
 8001cf6:	e004      	b.n	8001d02 <u8g2_DrawHVLine+0x100>
	  return;
 8001cf8:	bf00      	nop
 8001cfa:	e002      	b.n	8001d02 <u8g2_DrawHVLine+0x100>
	  return;
 8001cfc:	bf00      	nop
 8001cfe:	e000      	b.n	8001d02 <u8g2_DrawHVLine+0x100>
	  return;
 8001d00:	bf00      	nop
    }
}
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd90      	pop	{r4, r7, pc}

08001d08 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8001d08:	b490      	push	{r4, r7}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4604      	mov	r4, r0
 8001d10:	4608      	mov	r0, r1
 8001d12:	4611      	mov	r1, r2
 8001d14:	461a      	mov	r2, r3
 8001d16:	4623      	mov	r3, r4
 8001d18:	71fb      	strb	r3, [r7, #7]
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71bb      	strb	r3, [r7, #6]
 8001d1e:	460b      	mov	r3, r1
 8001d20:	717b      	strb	r3, [r7, #5]
 8001d22:	4613      	mov	r3, r2
 8001d24:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8001d26:	797a      	ldrb	r2, [r7, #5]
 8001d28:	79bb      	ldrb	r3, [r7, #6]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d20d      	bcs.n	8001d4a <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8001d2e:	793a      	ldrb	r2, [r7, #4]
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d901      	bls.n	8001d3a <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e014      	b.n	8001d64 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8001d3a:	797a      	ldrb	r2, [r7, #5]
 8001d3c:	793b      	ldrb	r3, [r7, #4]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d901      	bls.n	8001d46 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e00e      	b.n	8001d64 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	e00c      	b.n	8001d64 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8001d4a:	793a      	ldrb	r2, [r7, #4]
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d907      	bls.n	8001d62 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8001d52:	797a      	ldrb	r2, [r7, #5]
 8001d54:	793b      	ldrb	r3, [r7, #4]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d901      	bls.n	8001d5e <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e002      	b.n	8001d64 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	e000      	b.n	8001d64 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8001d62:	2300      	movs	r3, #0
    }
  }
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc90      	pop	{r4, r7}
 8001d6c:	4770      	bx	lr

08001d6e <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	4608      	mov	r0, r1
 8001d78:	4611      	mov	r1, r2
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	70fb      	strb	r3, [r7, #3]
 8001d80:	460b      	mov	r3, r1
 8001d82:	70bb      	strb	r3, [r7, #2]
 8001d84:	4613      	mov	r3, r2
 8001d86:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 0047 	ldrb.w	r0, [r3, #71]	; 0x47
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 8001d94:	7c3b      	ldrb	r3, [r7, #16]
 8001d96:	78ba      	ldrb	r2, [r7, #2]
 8001d98:	f7ff ffb6 	bl	8001d08 <u8g2_is_intersection_decision_tree>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <u8g2_IsIntersection+0x38>
    return 0; 
 8001da2:	2300      	movs	r3, #0
 8001da4:	e00a      	b.n	8001dbc <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 0045 	ldrb.w	r0, [r3, #69]	; 0x45
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 8001db2:	787b      	ldrb	r3, [r7, #1]
 8001db4:	78fa      	ldrb	r2, [r7, #3]
 8001db6:	f7ff ffa7 	bl	8001d08 <u8g2_is_intersection_decision_tree>
 8001dba:	4603      	mov	r3, r0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	4608      	mov	r0, r1
 8001dce:	4611      	mov	r1, r2
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	70fb      	strb	r3, [r7, #3]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	70bb      	strb	r3, [r7, #2]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8001dde:	78bb      	ldrb	r3, [r7, #2]
 8001de0:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8001de2:	7cfb      	ldrb	r3, [r7, #19]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 8001dea:	2301      	movs	r3, #1
 8001dec:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8001dee:	7c3a      	ldrb	r2, [r7, #16]
 8001df0:	7cfb      	ldrb	r3, [r7, #19]
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d801      	bhi.n	8001e0e <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8001e0a:	7c3b      	ldrb	r3, [r7, #16]
 8001e0c:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d001      	beq.n	8001e1c <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8001e18:	7c3b      	ldrb	r3, [r7, #16]
 8001e1a:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8001e1c:	78bb      	ldrb	r3, [r7, #2]
 8001e1e:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8001e20:	89fb      	ldrh	r3, [r7, #14]
 8001e22:	f023 0307 	bic.w	r3, r3, #7
 8001e26:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	7c1b      	ldrb	r3, [r3, #16]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	89fa      	ldrh	r2, [r7, #14]
 8001e32:	fb12 f303 	smulbb	r3, r2, r3
 8001e36:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3c:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8001e3e:	89fb      	ldrh	r3, [r7, #14]
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	4413      	add	r3, r2
 8001e44:	617b      	str	r3, [r7, #20]
  ptr += x;
 8001e46:	78fb      	ldrb	r3, [r7, #3]
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8001e4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d117      	bne.n	8001e86 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	781a      	ldrb	r2, [r3, #0]
 8001e5a:	7cbb      	ldrb	r3, [r7, #18]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	781a      	ldrb	r2, [r3, #0]
 8001e68:	7c7b      	ldrb	r3, [r7, #17]
 8001e6a:	4053      	eors	r3, r2
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	701a      	strb	r2, [r3, #0]
	ptr++;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	3301      	adds	r3, #1
 8001e76:	617b      	str	r3, [r7, #20]
	len--;
 8001e78:	787b      	ldrb	r3, [r7, #1]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 8001e7e:	787b      	ldrb	r3, [r7, #1]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1e8      	bne.n	8001e56 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8001e84:	e039      	b.n	8001efa <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	781a      	ldrb	r2, [r3, #0]
 8001e8a:	7cbb      	ldrb	r3, [r7, #18]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	781a      	ldrb	r2, [r3, #0]
 8001e98:	7c7b      	ldrb	r3, [r7, #17]
 8001e9a:	4053      	eors	r3, r2
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8001ea2:	7cfb      	ldrb	r3, [r7, #19]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 8001ea8:	7cfb      	ldrb	r3, [r7, #19]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	74fb      	strb	r3, [r7, #19]
      len--;
 8001eb0:	787b      	ldrb	r3, [r7, #1]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 8001eb6:	7cfb      	ldrb	r3, [r7, #19]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d115      	bne.n	8001ee8 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d801      	bhi.n	8001ed8 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d008      	beq.n	8001ef4 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	747b      	strb	r3, [r7, #17]
 8001ee6:	e005      	b.n	8001ef4 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 8001ee8:	7cbb      	ldrb	r3, [r7, #18]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8001eee:	7c7b      	ldrb	r3, [r7, #17]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8001ef4:	787b      	ldrb	r3, [r7, #1]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1c5      	bne.n	8001e86 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8001efa:	bf00      	nop
 8001efc:	371c      	adds	r7, #28
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  u8g2->clip_y0 = 0;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	22ff      	movs	r2, #255	; 0xff
 8001f22:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	22ff      	movs	r2, #255	; 0xff
 8001f2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  u8g2->cb->update_page_win(u8g2);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	4798      	blx	r3
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	603b      	str	r3, [r7, #0]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	651a      	str	r2, [r3, #80]	; 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	631a      	str	r2, [r3, #48]	; 0x30
  
  u8g2->tile_buf_ptr = buf;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	639a      	str	r2, [r3, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	79fa      	ldrb	r2, [r7, #7]
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  u8g2->tile_curr_row = 0;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  
  u8g2->draw_color = 1;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  u8g2->is_auto_page_clear = 1;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  
  u8g2->cb = u8g2_cb;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f7ff ffaf 	bl	8001f06 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f7ff fd91 	bl	8001ad0 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b085      	sub	sp, #20
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd2:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7bfa      	ldrb	r2, [r7, #15]
 8001fde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
  t = display_info->tile_width;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	7c1b      	ldrb	r3, [r3, #16]
 8001fe6:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	2b1f      	cmp	r3, #31
 8001fec:	d901      	bls.n	8001ff2 <u8g2_update_dimension_common+0x34>
    t = 31;
 8001fee:	231f      	movs	r3, #31
 8001ff0:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002006:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	7bfa      	ldrb	r2, [r7, #15]
 8002012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800201c:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 8002026:	4413      	add	r3, r2
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	7c52      	ldrb	r2, [r2, #17]
 800202c:	4293      	cmp	r3, r2
 800202e:	dd06      	ble.n	800203e <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	7c5a      	ldrb	r2, [r3, #17]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	4413      	add	r3, r2
 8002066:	b2da      	uxtb	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	22f0      	movs	r2, #240	; 0xf0
 8002072:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	8a9b      	ldrh	r3, [r3, #20]
 800207a:	2bf0      	cmp	r3, #240	; 0xf0
 800207c:	d805      	bhi.n	800208a <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	8a9b      	ldrh	r3, [r3, #20]
 8002082:	b2da      	uxtb	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	8adb      	ldrh	r3, [r3, #22]
 800208e:	b2da      	uxtb	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif

}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af02      	add	r7, sp, #8
 80020a8:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	4603      	mov	r3, r0
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff fe51 	bl	8001d6e <u8g2_IsIntersection>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d104      	bne.n	80020dc <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80020da:	e03b      	b.n	8002154 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d205      	bcs.n	8002100 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800210c:	429a      	cmp	r2, r3
 800210e:	d905      	bls.n	800211c <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8002128:	429a      	cmp	r2, r3
 800212a:	d205      	bcs.n	8002138 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002144:	429a      	cmp	r2, r3
 8002146:	d905      	bls.n	8002154 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8002154:	bf00      	nop
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff ff2a 	bl	8001fbe <u8g2_update_dimension_common>
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff ff7b 	bl	80020a2 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af02      	add	r7, sp, #8
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	4608      	mov	r0, r1
 80021be:	4611      	mov	r1, r2
 80021c0:	461a      	mov	r2, r3
 80021c2:	4603      	mov	r3, r0
 80021c4:	70fb      	strb	r3, [r7, #3]
 80021c6:	460b      	mov	r3, r1
 80021c8:	70bb      	strb	r3, [r7, #2]
 80021ca:	4613      	mov	r3, r2
 80021cc:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80021ce:	7878      	ldrb	r0, [r7, #1]
 80021d0:	78ba      	ldrb	r2, [r7, #2]
 80021d2:	78f9      	ldrb	r1, [r7, #3]
 80021d4:	7c3b      	ldrb	r3, [r7, #16]
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	4603      	mov	r3, r0
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff fcf0 	bl	8001bc0 <u8g2_draw_hv_line_2dir>
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <u8x8_ascii_next+0x18>
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	2b0a      	cmp	r3, #10
 800221a:	d102      	bne.n	8002222 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 800221c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002220:	e001      	b.n	8002226 <u8x8_ascii_next+0x22>
  return b;
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	b29b      	uxth	r3, r3
}
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002232:	b590      	push	{r4, r7, lr}
 8002234:	b085      	sub	sp, #20
 8002236:	af00      	add	r7, sp, #0
 8002238:	60f8      	str	r0, [r7, #12]
 800223a:	460b      	mov	r3, r1
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	691c      	ldr	r4, [r3, #16]
 8002244:	7afa      	ldrb	r2, [r7, #11]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2117      	movs	r1, #23
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	47a0      	blx	r4
 800224e:	4603      	mov	r3, r0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	bd90      	pop	{r4, r7, pc}

08002258 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002264:	1cfb      	adds	r3, r7, #3
 8002266:	461a      	mov	r2, r3
 8002268:	2101      	movs	r1, #1
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff ffe1 	bl	8002232 <u8x8_byte_SendBytes>
 8002270:	4603      	mov	r3, r0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 800227a:	b590      	push	{r4, r7, lr}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691c      	ldr	r4, [r3, #16]
 8002286:	2300      	movs	r3, #0
 8002288:	2200      	movs	r2, #0
 800228a:	2118      	movs	r1, #24
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	47a0      	blx	r4
 8002290:	4603      	mov	r3, r0
}
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	bd90      	pop	{r4, r7, pc}

0800229a <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 800229a:	b590      	push	{r4, r7, lr}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691c      	ldr	r4, [r3, #16]
 80022a6:	2300      	movs	r3, #0
 80022a8:	2200      	movs	r2, #0
 80022aa:	2119      	movs	r1, #25
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	47a0      	blx	r4
 80022b0:	4603      	mov	r3, r0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd90      	pop	{r4, r7, pc}

080022ba <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80022ba:	b590      	push	{r4, r7, lr}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	460b      	mov	r3, r1
 80022c4:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68dc      	ldr	r4, [r3, #12]
 80022ca:	78fa      	ldrb	r2, [r7, #3]
 80022cc:	2300      	movs	r3, #0
 80022ce:	2115      	movs	r1, #21
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	47a0      	blx	r4
 80022d4:	4603      	mov	r3, r0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd90      	pop	{r4, r7, pc}

080022de <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80022de:	b590      	push	{r4, r7, lr}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	460b      	mov	r3, r1
 80022e8:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68dc      	ldr	r4, [r3, #12]
 80022ee:	78fa      	ldrb	r2, [r7, #3]
 80022f0:	2300      	movs	r3, #0
 80022f2:	2116      	movs	r1, #22
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	47a0      	blx	r4
 80022f8:	4603      	mov	r3, r0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd90      	pop	{r4, r7, pc}

08002302 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002302:	b590      	push	{r4, r7, lr}
 8002304:	b085      	sub	sp, #20
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	460b      	mov	r3, r1
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	68dc      	ldr	r4, [r3, #12]
 8002314:	7afa      	ldrb	r2, [r7, #11]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2117      	movs	r1, #23
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	47a0      	blx	r4
 800231e:	4603      	mov	r3, r0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	bd90      	pop	{r4, r7, pc}

08002328 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002328:	b590      	push	{r4, r7, lr}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68dc      	ldr	r4, [r3, #12]
 8002334:	2300      	movs	r3, #0
 8002336:	2200      	movs	r2, #0
 8002338:	2118      	movs	r1, #24
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	47a0      	blx	r4
 800233e:	4603      	mov	r3, r0
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	bd90      	pop	{r4, r7, pc}

08002348 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68dc      	ldr	r4, [r3, #12]
 8002354:	2300      	movs	r3, #0
 8002356:	2200      	movs	r2, #0
 8002358:	2119      	movs	r1, #25
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	47a0      	blx	r4
 800235e:	4603      	mov	r3, r0
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	bd90      	pop	{r4, r7, pc}

08002368 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002368:	b590      	push	{r4, r7, lr}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	73fb      	strb	r3, [r7, #15]
    data++;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	3301      	adds	r3, #1
 800237c:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800237e:	7bfb      	ldrb	r3, [r7, #15]
 8002380:	2bfe      	cmp	r3, #254	; 0xfe
 8002382:	d031      	beq.n	80023e8 <u8x8_cad_SendSequence+0x80>
 8002384:	2bfe      	cmp	r3, #254	; 0xfe
 8002386:	dc3d      	bgt.n	8002404 <u8x8_cad_SendSequence+0x9c>
 8002388:	2b19      	cmp	r3, #25
 800238a:	dc3b      	bgt.n	8002404 <u8x8_cad_SendSequence+0x9c>
 800238c:	2b18      	cmp	r3, #24
 800238e:	da23      	bge.n	80023d8 <u8x8_cad_SendSequence+0x70>
 8002390:	2b16      	cmp	r3, #22
 8002392:	dc02      	bgt.n	800239a <u8x8_cad_SendSequence+0x32>
 8002394:	2b15      	cmp	r3, #21
 8002396:	da03      	bge.n	80023a0 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002398:	e034      	b.n	8002404 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800239a:	2b17      	cmp	r3, #23
 800239c:	d00e      	beq.n	80023bc <u8x8_cad_SendSequence+0x54>
	return;
 800239e:	e031      	b.n	8002404 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68dc      	ldr	r4, [r3, #12]
 80023aa:	7bba      	ldrb	r2, [r7, #14]
 80023ac:	7bf9      	ldrb	r1, [r7, #15]
 80023ae:	2300      	movs	r3, #0
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	47a0      	blx	r4
	  data++;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	3301      	adds	r3, #1
 80023b8:	603b      	str	r3, [r7, #0]
	  break;
 80023ba:	e022      	b.n	8002402 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80023c2:	f107 030e 	add.w	r3, r7, #14
 80023c6:	461a      	mov	r2, r3
 80023c8:	2101      	movs	r1, #1
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff ff99 	bl	8002302 <u8x8_cad_SendData>
	  data++;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	3301      	adds	r3, #1
 80023d4:	603b      	str	r3, [r7, #0]
	  break;
 80023d6:	e014      	b.n	8002402 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68dc      	ldr	r4, [r3, #12]
 80023dc:	7bf9      	ldrb	r1, [r7, #15]
 80023de:	2300      	movs	r3, #0
 80023e0:	2200      	movs	r2, #0
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	47a0      	blx	r4
	  break;
 80023e6:	e00c      	b.n	8002402 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80023ee:	7bbb      	ldrb	r3, [r7, #14]
 80023f0:	461a      	mov	r2, r3
 80023f2:	2129      	movs	r1, #41	; 0x29
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 fa36 	bl	8002866 <u8x8_gpio_call>
	  data++;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	3301      	adds	r3, #1
 80023fe:	603b      	str	r3, [r7, #0]
	  break;
 8002400:	bf00      	nop
    cmd = *data;
 8002402:	e7b6      	b.n	8002372 <u8x8_cad_SendSequence+0xa>
	return;
 8002404:	bf00      	nop
    }
  }
}
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	bd90      	pop	{r4, r7, pc}

0800240c <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 800240c:	b590      	push	{r4, r7, lr}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	460b      	mov	r3, r1
 8002416:	607a      	str	r2, [r7, #4]
 8002418:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f7ff ff2d 	bl	800227a <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8002420:	2140      	movs	r1, #64	; 0x40
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f7ff ff18 	bl	8002258 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	691c      	ldr	r4, [r3, #16]
 800242c:	7afa      	ldrb	r2, [r7, #11]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2117      	movs	r1, #23
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f7ff ff2f 	bl	800229a <u8x8_byte_EndTransfer>
}
 800243c:	bf00      	nop
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	bd90      	pop	{r4, r7, pc}

08002444 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002444:	b590      	push	{r4, r7, lr}
 8002446:	b087      	sub	sp, #28
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	607b      	str	r3, [r7, #4]
 800244e:	460b      	mov	r3, r1
 8002450:	72fb      	strb	r3, [r7, #11]
 8002452:	4613      	mov	r3, r2
 8002454:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 8002456:	7afb      	ldrb	r3, [r7, #11]
 8002458:	3b14      	subs	r3, #20
 800245a:	2b05      	cmp	r3, #5
 800245c:	d86e      	bhi.n	800253c <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 800245e:	a201      	add	r2, pc, #4	; (adr r2, 8002464 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 8002460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002464:	080024fb 	.word	0x080024fb
 8002468:	0800247d 	.word	0x0800247d
 800246c:	080024ab 	.word	0x080024ab
 8002470:	080024b7 	.word	0x080024b7
 8002474:	0800251f 	.word	0x0800251f
 8002478:	08002527 	.word	0x08002527
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 800247c:	4b33      	ldr	r3, [pc, #204]	; (800254c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f7ff ff08 	bl	800229a <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f7ff fef5 	bl	800227a <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8002490:	2100      	movs	r1, #0
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f7ff fee0 	bl	8002258 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002498:	7abb      	ldrb	r3, [r7, #10]
 800249a:	4619      	mov	r1, r3
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f7ff fedb 	bl	8002258 <u8x8_byte_SendByte>
      in_transfer = 1;
 80024a2:	4b2a      	ldr	r3, [pc, #168]	; (800254c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 80024a8:	e04a      	b.n	8002540 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 80024aa:	7abb      	ldrb	r3, [r7, #10]
 80024ac:	4619      	mov	r1, r3
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f7ff fed2 	bl	8002258 <u8x8_byte_SendByte>
      break;      
 80024b4:	e044      	b.n	8002540 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 80024b6:	4b25      	ldr	r3, [pc, #148]	; (800254c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d002      	beq.n	80024c4 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f7ff feeb 	bl	800229a <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 80024c8:	e00a      	b.n	80024e0 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	2118      	movs	r1, #24
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f7ff ff9c 	bl	800240c <u8x8_i2c_data_transfer>
	arg_int-=24;
 80024d4:	7abb      	ldrb	r3, [r7, #10]
 80024d6:	3b18      	subs	r3, #24
 80024d8:	72bb      	strb	r3, [r7, #10]
	p+=24;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	3318      	adds	r3, #24
 80024de:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 80024e0:	7abb      	ldrb	r3, [r7, #10]
 80024e2:	2b18      	cmp	r3, #24
 80024e4:	d8f1      	bhi.n	80024ca <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 80024e6:	7abb      	ldrb	r3, [r7, #10]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	4619      	mov	r1, r3
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f7ff ff8d 	bl	800240c <u8x8_i2c_data_transfer>
      in_transfer = 0;
 80024f2:	4b16      	ldr	r3, [pc, #88]	; (800254c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]
      break;
 80024f8:	e022      	b.n	8002540 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002500:	2bff      	cmp	r3, #255	; 0xff
 8002502:	d103      	bne.n	800250c <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2278      	movs	r2, #120	; 0x78
 8002508:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	691c      	ldr	r4, [r3, #16]
 8002510:	7aba      	ldrb	r2, [r7, #10]
 8002512:	7af9      	ldrb	r1, [r7, #11]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	47a0      	blx	r4
 800251a:	4603      	mov	r3, r0
 800251c:	e011      	b.n	8002542 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 800251e:	4b0b      	ldr	r3, [pc, #44]	; (800254c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002520:	2200      	movs	r2, #0
 8002522:	701a      	strb	r2, [r3, #0]
      break;
 8002524:	e00c      	b.n	8002540 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f7ff feb3 	bl	800229a <u8x8_byte_EndTransfer>
      in_transfer = 0;
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002536:	2200      	movs	r2, #0
 8002538:	701a      	strb	r2, [r3, #0]
      break;
 800253a:	e001      	b.n	8002540 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 800253c:	2300      	movs	r3, #0
 800253e:	e000      	b.n	8002542 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 8002540:	2301      	movs	r3, #1
}
 8002542:	4618      	mov	r0, r3
 8002544:	371c      	adds	r7, #28
 8002546:	46bd      	mov	sp, r7
 8002548:	bd90      	pop	{r4, r7, pc}
 800254a:	bf00      	nop
 800254c:	240007c0 	.word	0x240007c0

08002550 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	607b      	str	r3, [r7, #4]
 800255a:	460b      	mov	r3, r1
 800255c:	72fb      	strb	r3, [r7, #11]
 800255e:	4613      	mov	r3, r2
 8002560:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002562:	7afb      	ldrb	r3, [r7, #11]
 8002564:	3b0b      	subs	r3, #11
 8002566:	2b04      	cmp	r3, #4
 8002568:	f200 808a 	bhi.w	8002680 <u8x8_d_ssd1306_sh1106_generic+0x130>
 800256c:	a201      	add	r2, pc, #4	; (adr r2, 8002574 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 800256e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002572:	bf00      	nop
 8002574:	08002589 	.word	0x08002589
 8002578:	08002681 	.word	0x08002681
 800257c:	080025a3 	.word	0x080025a3
 8002580:	080025d5 	.word	0x080025d5
 8002584:	080025f5 	.word	0x080025f5
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002588:	7abb      	ldrb	r3, [r7, #10]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d104      	bne.n	8002598 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800258e:	4940      	ldr	r1, [pc, #256]	; (8002690 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f7ff fee9 	bl	8002368 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8002596:	e075      	b.n	8002684 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8002598:	493e      	ldr	r1, [pc, #248]	; (8002694 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f7ff fee4 	bl	8002368 <u8x8_cad_SendSequence>
      break;
 80025a0:	e070      	b.n	8002684 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 80025a2:	7abb      	ldrb	r3, [r7, #10]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10a      	bne.n	80025be <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 80025a8:	493b      	ldr	r1, [pc, #236]	; (8002698 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f7ff fedc 	bl	8002368 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	7c9a      	ldrb	r2, [r3, #18]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 80025bc:	e062      	b.n	8002684 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 80025be:	4937      	ldr	r1, [pc, #220]	; (800269c <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f7ff fed1 	bl	8002368 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	7cda      	ldrb	r2, [r3, #19]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 80025d2:	e057      	b.n	8002684 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f7ff fea7 	bl	8002328 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80025da:	2181      	movs	r1, #129	; 0x81
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f7ff fe6c 	bl	80022ba <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 80025e2:	7abb      	ldrb	r3, [r7, #10]
 80025e4:	4619      	mov	r1, r3
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f7ff fe79 	bl	80022de <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f7ff feab 	bl	8002348 <u8x8_cad_EndTransfer>
      break;
 80025f2:	e047      	b.n	8002684 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f7ff fe97 	bl	8002328 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	795b      	ldrb	r3, [r3, #5]
 80025fe:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8002600:	7dfb      	ldrb	r3, [r7, #23]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800260c:	7dfb      	ldrb	r3, [r7, #23]
 800260e:	4413      	add	r3, r2
 8002610:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8002612:	2140      	movs	r1, #64	; 0x40
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f7ff fe50 	bl	80022ba <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800261a:	7dfb      	ldrb	r3, [r7, #23]
 800261c:	091b      	lsrs	r3, r3, #4
 800261e:	b2db      	uxtb	r3, r3
 8002620:	f043 0310 	orr.w	r3, r3, #16
 8002624:	b2db      	uxtb	r3, r3
 8002626:	4619      	mov	r1, r3
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f7ff fe46 	bl	80022ba <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800262e:	7dfb      	ldrb	r3, [r7, #23]
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	b2db      	uxtb	r3, r3
 8002636:	4619      	mov	r1, r3
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f7ff fe50 	bl	80022de <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	799b      	ldrb	r3, [r3, #6]
 8002642:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002646:	b2db      	uxtb	r3, r3
 8002648:	4619      	mov	r1, r3
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f7ff fe47 	bl	80022de <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	791b      	ldrb	r3, [r3, #4]
 8002654:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 800265c:	7dbb      	ldrb	r3, [r7, #22]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	b2db      	uxtb	r3, r3
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4619      	mov	r1, r3
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f7ff fe4b 	bl	8002302 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 800266c:	7abb      	ldrb	r3, [r7, #10]
 800266e:	3b01      	subs	r3, #1
 8002670:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8002672:	7abb      	ldrb	r3, [r7, #10]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1eb      	bne.n	8002650 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f7ff fe65 	bl	8002348 <u8x8_cad_EndTransfer>
      break;
 800267e:	e001      	b.n	8002684 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8002680:	2300      	movs	r3, #0
 8002682:	e000      	b.n	8002686 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8002684:	2301      	movs	r3, #1
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	0800c61c 	.word	0x0800c61c
 8002694:	0800c624 	.word	0x0800c624
 8002698:	0800c62c 	.word	0x0800c62c
 800269c:	0800c634 	.word	0x0800c634

080026a0 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	607b      	str	r3, [r7, #4]
 80026aa:	460b      	mov	r3, r1
 80026ac:	72fb      	strb	r3, [r7, #11]
 80026ae:	4613      	mov	r3, r2
 80026b0:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 80026b2:	7aba      	ldrb	r2, [r7, #10]
 80026b4:	7af9      	ldrb	r1, [r7, #11]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f7ff ff49 	bl	8002550 <u8x8_d_ssd1306_sh1106_generic>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e014      	b.n	80026f2 <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 80026c8:	7afb      	ldrb	r3, [r7, #11]
 80026ca:	2b09      	cmp	r3, #9
 80026cc:	d009      	beq.n	80026e2 <u8x8_d_ssd1306_128x64_noname+0x42>
 80026ce:	2b0a      	cmp	r3, #10
 80026d0:	d10c      	bne.n	80026ec <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 f82a 	bl	800272c <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 80026d8:	4908      	ldr	r1, [pc, #32]	; (80026fc <u8x8_d_ssd1306_128x64_noname+0x5c>)
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f7ff fe44 	bl	8002368 <u8x8_cad_SendSequence>
      break;
 80026e0:	e006      	b.n	80026f0 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 80026e2:	4907      	ldr	r1, [pc, #28]	; (8002700 <u8x8_d_ssd1306_128x64_noname+0x60>)
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 f80d 	bl	8002704 <u8x8_d_helper_display_setup_memory>
      break;
 80026ea:	e001      	b.n	80026f0 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	e000      	b.n	80026f2 <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 80026f0:	2301      	movs	r3, #1
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	0800c5e4 	.word	0x0800c5e4
 8002700:	0800c63c 	.word	0x0800c63c

08002704 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	7c9a      	ldrb	r2, [r3, #18]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800272c:	b590      	push	{r4, r7, lr}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	695c      	ldr	r4, [r3, #20]
 8002738:	2300      	movs	r3, #0
 800273a:	2200      	movs	r2, #0
 800273c:	2128      	movs	r1, #40	; 0x28
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68dc      	ldr	r4, [r3, #12]
 8002746:	2300      	movs	r3, #0
 8002748:	2200      	movs	r2, #0
 800274a:	2114      	movs	r1, #20
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8002750:	2201      	movs	r2, #1
 8002752:	214b      	movs	r1, #75	; 0x4b
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f886 	bl	8002866 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	791b      	ldrb	r3, [r3, #4]
 8002760:	461a      	mov	r2, r3
 8002762:	2129      	movs	r1, #41	; 0x29
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f87e 	bl	8002866 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800276a:	2200      	movs	r2, #0
 800276c:	214b      	movs	r1, #75	; 0x4b
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f879 	bl	8002866 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	791b      	ldrb	r3, [r3, #4]
 800277a:	461a      	mov	r2, r3
 800277c:	2129      	movs	r1, #41	; 0x29
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f871 	bl	8002866 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8002784:	2201      	movs	r2, #1
 8002786:	214b      	movs	r1, #75	; 0x4b
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f86c 	bl	8002866 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	795b      	ldrb	r3, [r3, #5]
 8002794:	461a      	mov	r2, r3
 8002796:	2129      	movs	r1, #41	; 0x29
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 f864 	bl	8002866 <u8x8_gpio_call>
}    
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd90      	pop	{r4, r7, pc}

080027a6 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80027a6:	b590      	push	{r4, r7, lr}
 80027a8:	b085      	sub	sp, #20
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	4608      	mov	r0, r1
 80027b0:	4611      	mov	r1, r2
 80027b2:	461a      	mov	r2, r3
 80027b4:	4603      	mov	r3, r0
 80027b6:	70fb      	strb	r3, [r7, #3]
 80027b8:	460b      	mov	r3, r1
 80027ba:	70bb      	strb	r3, [r7, #2]
 80027bc:	4613      	mov	r3, r2
 80027be:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80027c4:	78bb      	ldrb	r3, [r7, #2]
 80027c6:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80027c8:	787b      	ldrb	r3, [r7, #1]
 80027ca:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689c      	ldr	r4, [r3, #8]
 80027d4:	f107 0308 	add.w	r3, r7, #8
 80027d8:	2201      	movs	r2, #1
 80027da:	210f      	movs	r1, #15
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	47a0      	blx	r4
 80027e0:	4603      	mov	r3, r0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd90      	pop	{r4, r7, pc}

080027ea <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80027ea:	b590      	push	{r4, r7, lr}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689c      	ldr	r4, [r3, #8]
 80027f6:	2300      	movs	r3, #0
 80027f8:	2200      	movs	r2, #0
 80027fa:	2109      	movs	r1, #9
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	47a0      	blx	r4
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bd90      	pop	{r4, r7, pc}

08002808 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8002808:	b590      	push	{r4, r7, lr}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689c      	ldr	r4, [r3, #8]
 8002814:	2300      	movs	r3, #0
 8002816:	2200      	movs	r2, #0
 8002818:	210a      	movs	r1, #10
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	47a0      	blx	r4
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bd90      	pop	{r4, r7, pc}

08002826 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8002826:	b590      	push	{r4, r7, lr}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
 800282e:	460b      	mov	r3, r1
 8002830:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689c      	ldr	r4, [r3, #8]
 8002836:	78fa      	ldrb	r2, [r7, #3]
 8002838:	2300      	movs	r3, #0
 800283a:	210b      	movs	r1, #11
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	47a0      	blx	r4
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	bd90      	pop	{r4, r7, pc}

08002848 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8002848:	b590      	push	{r4, r7, lr}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689c      	ldr	r4, [r3, #8]
 8002854:	2300      	movs	r3, #0
 8002856:	2200      	movs	r2, #0
 8002858:	2110      	movs	r1, #16
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	47a0      	blx	r4
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	bd90      	pop	{r4, r7, pc}

08002866 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8002866:	b590      	push	{r4, r7, lr}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	460b      	mov	r3, r1
 8002870:	70fb      	strb	r3, [r7, #3]
 8002872:	4613      	mov	r3, r2
 8002874:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695c      	ldr	r4, [r3, #20]
 800287a:	78ba      	ldrb	r2, [r7, #2]
 800287c:	78f9      	ldrb	r1, [r7, #3]
 800287e:	2300      	movs	r3, #0
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	47a0      	blx	r4
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bd90      	pop	{r4, r7, pc}

0800288c <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	607b      	str	r3, [r7, #4]
 8002896:	460b      	mov	r3, r1
 8002898:	72fb      	strb	r3, [r7, #11]
 800289a:	4613      	mov	r3, r2
 800289c:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a13      	ldr	r2, [pc, #76]	; (800290c <u8x8_SetupDefaults+0x60>)
 80028be:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a12      	ldr	r2, [pc, #72]	; (800290c <u8x8_SetupDefaults+0x60>)
 80028c4:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a10      	ldr	r2, [pc, #64]	; (800290c <u8x8_SetupDefaults+0x60>)
 80028ca:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a0f      	ldr	r2, [pc, #60]	; (800290c <u8x8_SetupDefaults+0x60>)
 80028d0:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->device_address = 0;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	22ff      	movs	r2, #255	; 0xff
 80028f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	22ff      	movs	r2, #255	; 0xff
 80028fc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	0800288d 	.word	0x0800288d

08002910 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f7ff ffc4 	bl	80028ac <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f7ff ff54 	bl	80027ea <u8x8_SetupMemory>
}
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800294c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002984 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002950:	f7fe f8e0 	bl	8000b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002954:	480c      	ldr	r0, [pc, #48]	; (8002988 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002956:	490d      	ldr	r1, [pc, #52]	; (800298c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002958:	4a0d      	ldr	r2, [pc, #52]	; (8002990 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800295a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800295c:	e002      	b.n	8002964 <LoopCopyDataInit>

0800295e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800295e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002962:	3304      	adds	r3, #4

08002964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002968:	d3f9      	bcc.n	800295e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800296a:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800296c:	4c0a      	ldr	r4, [pc, #40]	; (8002998 <LoopFillZerobss+0x22>)
  movs r3, #0
 800296e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002970:	e001      	b.n	8002976 <LoopFillZerobss>

08002972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002974:	3204      	adds	r2, #4

08002976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002978:	d3fb      	bcc.n	8002972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800297a:	f009 fc17 	bl	800c1ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800297e:	f7fd fcd3 	bl	8000328 <main>
  bx  lr
 8002982:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002984:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002988:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800298c:	2400013c 	.word	0x2400013c
  ldr r2, =_sidata
 8002990:	0800c65c 	.word	0x0800c65c
  ldr r2, =_sbss
 8002994:	2400013c 	.word	0x2400013c
  ldr r4, =_ebss
 8002998:	24002d88 	.word	0x24002d88

0800299c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800299c:	e7fe      	b.n	800299c <ADC3_IRQHandler>
	...

080029a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029a6:	2003      	movs	r0, #3
 80029a8:	f000 f98c 	bl	8002cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029ac:	f003 f8ca 	bl	8005b44 <HAL_RCC_GetSysClockFreq>
 80029b0:	4602      	mov	r2, r0
 80029b2:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <HAL_Init+0x68>)
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	f003 030f 	and.w	r3, r3, #15
 80029bc:	4913      	ldr	r1, [pc, #76]	; (8002a0c <HAL_Init+0x6c>)
 80029be:	5ccb      	ldrb	r3, [r1, r3]
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	fa22 f303 	lsr.w	r3, r2, r3
 80029c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029ca:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <HAL_Init+0x68>)
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	4a0e      	ldr	r2, [pc, #56]	; (8002a0c <HAL_Init+0x6c>)
 80029d4:	5cd3      	ldrb	r3, [r2, r3]
 80029d6:	f003 031f 	and.w	r3, r3, #31
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	fa22 f303 	lsr.w	r3, r2, r3
 80029e0:	4a0b      	ldr	r2, [pc, #44]	; (8002a10 <HAL_Init+0x70>)
 80029e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029e4:	4a0b      	ldr	r2, [pc, #44]	; (8002a14 <HAL_Init+0x74>)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029ea:	200f      	movs	r0, #15
 80029ec:	f000 f814 	bl	8002a18 <HAL_InitTick>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e002      	b.n	8002a00 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80029fa:	f7fd fef9 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	58024400 	.word	0x58024400
 8002a0c:	0800c28c 	.word	0x0800c28c
 8002a10:	24000004 	.word	0x24000004
 8002a14:	24000000 	.word	0x24000000

08002a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a20:	4b15      	ldr	r3, [pc, #84]	; (8002a78 <HAL_InitTick+0x60>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e021      	b.n	8002a70 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a2c:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <HAL_InitTick+0x64>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <HAL_InitTick+0x60>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	4619      	mov	r1, r3
 8002a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 f971 	bl	8002d2a <HAL_SYSTICK_Config>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e00e      	b.n	8002a70 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b0f      	cmp	r3, #15
 8002a56:	d80a      	bhi.n	8002a6e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a60:	f000 f93b 	bl	8002cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a64:	4a06      	ldr	r2, [pc, #24]	; (8002a80 <HAL_InitTick+0x68>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e000      	b.n	8002a70 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	2400001c 	.word	0x2400001c
 8002a7c:	24000000 	.word	0x24000000
 8002a80:	24000018 	.word	0x24000018

08002a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <HAL_IncTick+0x20>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <HAL_IncTick+0x24>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4413      	add	r3, r2
 8002a94:	4a04      	ldr	r2, [pc, #16]	; (8002aa8 <HAL_IncTick+0x24>)
 8002a96:	6013      	str	r3, [r2, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	2400001c 	.word	0x2400001c
 8002aa8:	240007c4 	.word	0x240007c4

08002aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return uwTick;
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <HAL_GetTick+0x14>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	240007c4 	.word	0x240007c4

08002ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002acc:	f7ff ffee 	bl	8002aac <HAL_GetTick>
 8002ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002adc:	d005      	beq.n	8002aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ade:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <HAL_Delay+0x44>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002aea:	bf00      	nop
 8002aec:	f7ff ffde 	bl	8002aac <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d8f7      	bhi.n	8002aec <HAL_Delay+0x28>
  {
  }
}
 8002afc:	bf00      	nop
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	2400001c 	.word	0x2400001c

08002b0c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002b10:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <HAL_GetREVID+0x14>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	0c1b      	lsrs	r3, r3, #16
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	5c001000 	.word	0x5c001000

08002b24 <__NVIC_SetPriorityGrouping>:
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <__NVIC_SetPriorityGrouping+0x40>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b40:	4013      	ands	r3, r2
 8002b42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b4c:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <__NVIC_SetPriorityGrouping+0x44>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b52:	4a04      	ldr	r2, [pc, #16]	; (8002b64 <__NVIC_SetPriorityGrouping+0x40>)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	60d3      	str	r3, [r2, #12]
}
 8002b58:	bf00      	nop
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000ed00 	.word	0xe000ed00
 8002b68:	05fa0000 	.word	0x05fa0000

08002b6c <__NVIC_GetPriorityGrouping>:
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b70:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <__NVIC_GetPriorityGrouping+0x18>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	0a1b      	lsrs	r3, r3, #8
 8002b76:	f003 0307 	and.w	r3, r3, #7
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <__NVIC_EnableIRQ>:
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	db0b      	blt.n	8002bb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	f003 021f 	and.w	r2, r3, #31
 8002ba0:	4907      	ldr	r1, [pc, #28]	; (8002bc0 <__NVIC_EnableIRQ+0x38>)
 8002ba2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	2001      	movs	r0, #1
 8002baa:	fa00 f202 	lsl.w	r2, r0, r2
 8002bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	e000e100 	.word	0xe000e100

08002bc4 <__NVIC_SetPriority>:
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	6039      	str	r1, [r7, #0]
 8002bce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	db0a      	blt.n	8002bee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	490c      	ldr	r1, [pc, #48]	; (8002c10 <__NVIC_SetPriority+0x4c>)
 8002bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002be2:	0112      	lsls	r2, r2, #4
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	440b      	add	r3, r1
 8002be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002bec:	e00a      	b.n	8002c04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	4908      	ldr	r1, [pc, #32]	; (8002c14 <__NVIC_SetPriority+0x50>)
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	3b04      	subs	r3, #4
 8002bfc:	0112      	lsls	r2, r2, #4
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	440b      	add	r3, r1
 8002c02:	761a      	strb	r2, [r3, #24]
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000e100 	.word	0xe000e100
 8002c14:	e000ed00 	.word	0xe000ed00

08002c18 <NVIC_EncodePriority>:
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b089      	sub	sp, #36	; 0x24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f1c3 0307 	rsb	r3, r3, #7
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	bf28      	it	cs
 8002c36:	2304      	movcs	r3, #4
 8002c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	2b06      	cmp	r3, #6
 8002c40:	d902      	bls.n	8002c48 <NVIC_EncodePriority+0x30>
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	3b03      	subs	r3, #3
 8002c46:	e000      	b.n	8002c4a <NVIC_EncodePriority+0x32>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43da      	mvns	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c60:	f04f 31ff 	mov.w	r1, #4294967295
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6a:	43d9      	mvns	r1, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c70:	4313      	orrs	r3, r2
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3724      	adds	r7, #36	; 0x24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c90:	d301      	bcc.n	8002c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c92:	2301      	movs	r3, #1
 8002c94:	e00f      	b.n	8002cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c96:	4a0a      	ldr	r2, [pc, #40]	; (8002cc0 <SysTick_Config+0x40>)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c9e:	210f      	movs	r1, #15
 8002ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca4:	f7ff ff8e 	bl	8002bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ca8:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <SysTick_Config+0x40>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cae:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <SysTick_Config+0x40>)
 8002cb0:	2207      	movs	r2, #7
 8002cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	e000e010 	.word	0xe000e010

08002cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff ff29 	bl	8002b24 <__NVIC_SetPriorityGrouping>
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b086      	sub	sp, #24
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
 8002ce6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ce8:	f7ff ff40 	bl	8002b6c <__NVIC_GetPriorityGrouping>
 8002cec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	6978      	ldr	r0, [r7, #20]
 8002cf4:	f7ff ff90 	bl	8002c18 <NVIC_EncodePriority>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cfe:	4611      	mov	r1, r2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff ff5f 	bl	8002bc4 <__NVIC_SetPriority>
}
 8002d06:	bf00      	nop
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	4603      	mov	r3, r0
 8002d16:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff ff33 	bl	8002b88 <__NVIC_EnableIRQ>
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff ffa4 	bl	8002c80 <SysTick_Config>
 8002d38:	4603      	mov	r3, r0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b089      	sub	sp, #36	; 0x24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002d52:	4b89      	ldr	r3, [pc, #548]	; (8002f78 <HAL_GPIO_Init+0x234>)
 8002d54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d56:	e194      	b.n	8003082 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	fa01 f303 	lsl.w	r3, r1, r3
 8002d64:	4013      	ands	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 8186 	beq.w	800307c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d005      	beq.n	8002d88 <HAL_GPIO_Init+0x44>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d130      	bne.n	8002dea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	2203      	movs	r2, #3
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	091b      	lsrs	r3, r3, #4
 8002dd4:	f003 0201 	and.w	r2, r3, #1
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d017      	beq.n	8002e26 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	2203      	movs	r2, #3
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d123      	bne.n	8002e7a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	08da      	lsrs	r2, r3, #3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3208      	adds	r2, #8
 8002e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	220f      	movs	r2, #15
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4013      	ands	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	691a      	ldr	r2, [r3, #16]
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	08da      	lsrs	r2, r3, #3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3208      	adds	r2, #8
 8002e74:	69b9      	ldr	r1, [r7, #24]
 8002e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	2203      	movs	r2, #3
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f003 0203 	and.w	r2, r3, #3
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 80e0 	beq.w	800307c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ebc:	4b2f      	ldr	r3, [pc, #188]	; (8002f7c <HAL_GPIO_Init+0x238>)
 8002ebe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ec2:	4a2e      	ldr	r2, [pc, #184]	; (8002f7c <HAL_GPIO_Init+0x238>)
 8002ec4:	f043 0302 	orr.w	r3, r3, #2
 8002ec8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002ecc:	4b2b      	ldr	r3, [pc, #172]	; (8002f7c <HAL_GPIO_Init+0x238>)
 8002ece:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eda:	4a29      	ldr	r2, [pc, #164]	; (8002f80 <HAL_GPIO_Init+0x23c>)
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	089b      	lsrs	r3, r3, #2
 8002ee0:	3302      	adds	r3, #2
 8002ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	220f      	movs	r2, #15
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4013      	ands	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a20      	ldr	r2, [pc, #128]	; (8002f84 <HAL_GPIO_Init+0x240>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d052      	beq.n	8002fac <HAL_GPIO_Init+0x268>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a1f      	ldr	r2, [pc, #124]	; (8002f88 <HAL_GPIO_Init+0x244>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d031      	beq.n	8002f72 <HAL_GPIO_Init+0x22e>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a1e      	ldr	r2, [pc, #120]	; (8002f8c <HAL_GPIO_Init+0x248>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d02b      	beq.n	8002f6e <HAL_GPIO_Init+0x22a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a1d      	ldr	r2, [pc, #116]	; (8002f90 <HAL_GPIO_Init+0x24c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d025      	beq.n	8002f6a <HAL_GPIO_Init+0x226>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a1c      	ldr	r2, [pc, #112]	; (8002f94 <HAL_GPIO_Init+0x250>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d01f      	beq.n	8002f66 <HAL_GPIO_Init+0x222>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a1b      	ldr	r2, [pc, #108]	; (8002f98 <HAL_GPIO_Init+0x254>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d019      	beq.n	8002f62 <HAL_GPIO_Init+0x21e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a1a      	ldr	r2, [pc, #104]	; (8002f9c <HAL_GPIO_Init+0x258>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d013      	beq.n	8002f5e <HAL_GPIO_Init+0x21a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a19      	ldr	r2, [pc, #100]	; (8002fa0 <HAL_GPIO_Init+0x25c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00d      	beq.n	8002f5a <HAL_GPIO_Init+0x216>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a18      	ldr	r2, [pc, #96]	; (8002fa4 <HAL_GPIO_Init+0x260>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d007      	beq.n	8002f56 <HAL_GPIO_Init+0x212>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a17      	ldr	r2, [pc, #92]	; (8002fa8 <HAL_GPIO_Init+0x264>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d101      	bne.n	8002f52 <HAL_GPIO_Init+0x20e>
 8002f4e:	2309      	movs	r3, #9
 8002f50:	e02d      	b.n	8002fae <HAL_GPIO_Init+0x26a>
 8002f52:	230a      	movs	r3, #10
 8002f54:	e02b      	b.n	8002fae <HAL_GPIO_Init+0x26a>
 8002f56:	2308      	movs	r3, #8
 8002f58:	e029      	b.n	8002fae <HAL_GPIO_Init+0x26a>
 8002f5a:	2307      	movs	r3, #7
 8002f5c:	e027      	b.n	8002fae <HAL_GPIO_Init+0x26a>
 8002f5e:	2306      	movs	r3, #6
 8002f60:	e025      	b.n	8002fae <HAL_GPIO_Init+0x26a>
 8002f62:	2305      	movs	r3, #5
 8002f64:	e023      	b.n	8002fae <HAL_GPIO_Init+0x26a>
 8002f66:	2304      	movs	r3, #4
 8002f68:	e021      	b.n	8002fae <HAL_GPIO_Init+0x26a>
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e01f      	b.n	8002fae <HAL_GPIO_Init+0x26a>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e01d      	b.n	8002fae <HAL_GPIO_Init+0x26a>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e01b      	b.n	8002fae <HAL_GPIO_Init+0x26a>
 8002f76:	bf00      	nop
 8002f78:	58000080 	.word	0x58000080
 8002f7c:	58024400 	.word	0x58024400
 8002f80:	58000400 	.word	0x58000400
 8002f84:	58020000 	.word	0x58020000
 8002f88:	58020400 	.word	0x58020400
 8002f8c:	58020800 	.word	0x58020800
 8002f90:	58020c00 	.word	0x58020c00
 8002f94:	58021000 	.word	0x58021000
 8002f98:	58021400 	.word	0x58021400
 8002f9c:	58021800 	.word	0x58021800
 8002fa0:	58021c00 	.word	0x58021c00
 8002fa4:	58022000 	.word	0x58022000
 8002fa8:	58022400 	.word	0x58022400
 8002fac:	2300      	movs	r3, #0
 8002fae:	69fa      	ldr	r2, [r7, #28]
 8002fb0:	f002 0203 	and.w	r2, r2, #3
 8002fb4:	0092      	lsls	r2, r2, #2
 8002fb6:	4093      	lsls	r3, r2
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fbe:	4938      	ldr	r1, [pc, #224]	; (80030a0 <HAL_GPIO_Init+0x35c>)
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	089b      	lsrs	r3, r3, #2
 8002fc4:	3302      	adds	r3, #2
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002ff2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003020:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	43db      	mvns	r3, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4013      	ands	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	3301      	adds	r3, #1
 8003080:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	f47f ae63 	bne.w	8002d58 <HAL_GPIO_Init+0x14>
  }
}
 8003092:	bf00      	nop
 8003094:	bf00      	nop
 8003096:	3724      	adds	r7, #36	; 0x24
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	58000400 	.word	0x58000400

080030a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	807b      	strh	r3, [r7, #2]
 80030b0:	4613      	mov	r3, r2
 80030b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030b4:	787b      	ldrb	r3, [r7, #1]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ba:	887a      	ldrh	r2, [r7, #2]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80030c0:	e003      	b.n	80030ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80030c2:	887b      	ldrh	r3, [r7, #2]
 80030c4:	041a      	lsls	r2, r3, #16
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	619a      	str	r2, [r3, #24]
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b085      	sub	sp, #20
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	460b      	mov	r3, r1
 80030e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030e8:	887a      	ldrh	r2, [r7, #2]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4013      	ands	r3, r2
 80030ee:	041a      	lsls	r2, r3, #16
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	43d9      	mvns	r1, r3
 80030f4:	887b      	ldrh	r3, [r7, #2]
 80030f6:	400b      	ands	r3, r1
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	619a      	str	r2, [r3, #24]
}
 80030fe:	bf00      	nop
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e07f      	b.n	800321e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d106      	bne.n	8003138 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7fd fb76 	bl	8000824 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2224      	movs	r2, #36	; 0x24
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0201 	bic.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800315c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800316c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d107      	bne.n	8003186 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	e006      	b.n	8003194 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003192:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	2b02      	cmp	r3, #2
 800319a:	d104      	bne.n	80031a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6859      	ldr	r1, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <HAL_I2C_Init+0x11c>)
 80031b2:	430b      	orrs	r3, r1
 80031b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68da      	ldr	r2, [r3, #12]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691a      	ldr	r2, [r3, #16]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69d9      	ldr	r1, [r3, #28]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a1a      	ldr	r2, [r3, #32]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	02008000 	.word	0x02008000

0800322c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af02      	add	r7, sp, #8
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	607a      	str	r2, [r7, #4]
 8003236:	461a      	mov	r2, r3
 8003238:	460b      	mov	r3, r1
 800323a:	817b      	strh	r3, [r7, #10]
 800323c:	4613      	mov	r3, r2
 800323e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b20      	cmp	r3, #32
 800324a:	f040 80da 	bne.w	8003402 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_I2C_Master_Transmit+0x30>
 8003258:	2302      	movs	r3, #2
 800325a:	e0d3      	b.n	8003404 <HAL_I2C_Master_Transmit+0x1d8>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003264:	f7ff fc22 	bl	8002aac <HAL_GetTick>
 8003268:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	2319      	movs	r3, #25
 8003270:	2201      	movs	r2, #1
 8003272:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 f8f0 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e0be      	b.n	8003404 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2221      	movs	r2, #33	; 0x21
 800328a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2210      	movs	r2, #16
 8003292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	893a      	ldrh	r2, [r7, #8]
 80032a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	2bff      	cmp	r3, #255	; 0xff
 80032b6:	d90e      	bls.n	80032d6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	22ff      	movs	r2, #255	; 0xff
 80032bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	8979      	ldrh	r1, [r7, #10]
 80032c6:	4b51      	ldr	r3, [pc, #324]	; (800340c <HAL_I2C_Master_Transmit+0x1e0>)
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 fa6c 	bl	80037ac <I2C_TransferConfig>
 80032d4:	e06c      	b.n	80033b0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	8979      	ldrh	r1, [r7, #10]
 80032e8:	4b48      	ldr	r3, [pc, #288]	; (800340c <HAL_I2C_Master_Transmit+0x1e0>)
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 fa5b 	bl	80037ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80032f6:	e05b      	b.n	80033b0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	6a39      	ldr	r1, [r7, #32]
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 f8ed 	bl	80034dc <I2C_WaitOnTXISFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e07b      	b.n	8003404 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	781a      	ldrb	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d034      	beq.n	80033b0 <HAL_I2C_Master_Transmit+0x184>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334a:	2b00      	cmp	r3, #0
 800334c:	d130      	bne.n	80033b0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	2200      	movs	r2, #0
 8003356:	2180      	movs	r1, #128	; 0x80
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 f87f 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e04d      	b.n	8003404 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336c:	b29b      	uxth	r3, r3
 800336e:	2bff      	cmp	r3, #255	; 0xff
 8003370:	d90e      	bls.n	8003390 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	22ff      	movs	r2, #255	; 0xff
 8003376:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337c:	b2da      	uxtb	r2, r3
 800337e:	8979      	ldrh	r1, [r7, #10]
 8003380:	2300      	movs	r3, #0
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 fa0f 	bl	80037ac <I2C_TransferConfig>
 800338e:	e00f      	b.n	80033b0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	8979      	ldrh	r1, [r7, #10]
 80033a2:	2300      	movs	r3, #0
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 f9fe 	bl	80037ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d19e      	bne.n	80032f8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	6a39      	ldr	r1, [r7, #32]
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 f8cc 	bl	800355c <I2C_WaitOnSTOPFlagUntilTimeout>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e01a      	b.n	8003404 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2220      	movs	r2, #32
 80033d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6859      	ldr	r1, [r3, #4]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <HAL_I2C_Master_Transmit+0x1e4>)
 80033e2:	400b      	ands	r3, r1
 80033e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	e000      	b.n	8003404 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003402:	2302      	movs	r3, #2
  }
}
 8003404:	4618      	mov	r0, r3
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	80002000 	.word	0x80002000
 8003410:	fe00e800 	.word	0xfe00e800

08003414 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b02      	cmp	r3, #2
 8003428:	d103      	bne.n	8003432 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2200      	movs	r2, #0
 8003430:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b01      	cmp	r3, #1
 800343e:	d007      	beq.n	8003450 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699a      	ldr	r2, [r3, #24]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0201 	orr.w	r2, r2, #1
 800344e:	619a      	str	r2, [r3, #24]
  }
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800346c:	e022      	b.n	80034b4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003474:	d01e      	beq.n	80034b4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003476:	f7ff fb19 	bl	8002aac <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d302      	bcc.n	800348c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d113      	bne.n	80034b4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003490:	f043 0220 	orr.w	r2, r3, #32
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e00f      	b.n	80034d4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699a      	ldr	r2, [r3, #24]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	4013      	ands	r3, r2
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	bf0c      	ite	eq
 80034c4:	2301      	moveq	r3, #1
 80034c6:	2300      	movne	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	461a      	mov	r2, r3
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d0cd      	beq.n	800346e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034e8:	e02c      	b.n	8003544 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	68b9      	ldr	r1, [r7, #8]
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f870 	bl	80035d4 <I2C_IsErrorOccurred>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e02a      	b.n	8003554 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003504:	d01e      	beq.n	8003544 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003506:	f7ff fad1 	bl	8002aac <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	429a      	cmp	r2, r3
 8003514:	d302      	bcc.n	800351c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d113      	bne.n	8003544 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003520:	f043 0220 	orr.w	r2, r3, #32
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e007      	b.n	8003554 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b02      	cmp	r3, #2
 8003550:	d1cb      	bne.n	80034ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003568:	e028      	b.n	80035bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	68b9      	ldr	r1, [r7, #8]
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 f830 	bl	80035d4 <I2C_IsErrorOccurred>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e026      	b.n	80035cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357e:	f7ff fa95 	bl	8002aac <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	429a      	cmp	r2, r3
 800358c:	d302      	bcc.n	8003594 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d113      	bne.n	80035bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003598:	f043 0220 	orr.w	r2, r3, #32
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e007      	b.n	80035cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	2b20      	cmp	r3, #32
 80035c8:	d1cf      	bne.n	800356a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08a      	sub	sp, #40	; 0x28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d075      	beq.n	80036ec <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2210      	movs	r2, #16
 8003606:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003608:	e056      	b.n	80036b8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003610:	d052      	beq.n	80036b8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003612:	f7ff fa4b 	bl	8002aac <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	429a      	cmp	r2, r3
 8003620:	d302      	bcc.n	8003628 <I2C_IsErrorOccurred+0x54>
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d147      	bne.n	80036b8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003632:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800363a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800364a:	d12e      	bne.n	80036aa <I2C_IsErrorOccurred+0xd6>
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003652:	d02a      	beq.n	80036aa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003654:	7cfb      	ldrb	r3, [r7, #19]
 8003656:	2b20      	cmp	r3, #32
 8003658:	d027      	beq.n	80036aa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003668:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800366a:	f7ff fa1f 	bl	8002aac <HAL_GetTick>
 800366e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003670:	e01b      	b.n	80036aa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003672:	f7ff fa1b 	bl	8002aac <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b19      	cmp	r3, #25
 800367e:	d914      	bls.n	80036aa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003684:	f043 0220 	orr.w	r2, r3, #32
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	f003 0320 	and.w	r3, r3, #32
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	d1dc      	bne.n	8003672 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	f003 0320 	and.w	r3, r3, #32
 80036c2:	2b20      	cmp	r3, #32
 80036c4:	d003      	beq.n	80036ce <I2C_IsErrorOccurred+0xfa>
 80036c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d09d      	beq.n	800360a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80036ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d103      	bne.n	80036de <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2220      	movs	r2, #32
 80036dc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	f043 0304 	orr.w	r3, r3, #4
 80036e4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00b      	beq.n	8003716 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	f043 0301 	orr.w	r3, r3, #1
 8003704:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800370e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00b      	beq.n	8003738 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	f043 0308 	orr.w	r3, r3, #8
 8003726:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003730:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00b      	beq.n	800375a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	f043 0302 	orr.w	r3, r3, #2
 8003748:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003752:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800375a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800375e:	2b00      	cmp	r3, #0
 8003760:	d01c      	beq.n	800379c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f7ff fe56 	bl	8003414 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6859      	ldr	r1, [r3, #4]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <I2C_IsErrorOccurred+0x1d4>)
 8003774:	400b      	ands	r3, r1
 8003776:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	431a      	orrs	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800379c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3728      	adds	r7, #40	; 0x28
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	fe00e800 	.word	0xfe00e800

080037ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	607b      	str	r3, [r7, #4]
 80037b6:	460b      	mov	r3, r1
 80037b8:	817b      	strh	r3, [r7, #10]
 80037ba:	4613      	mov	r3, r2
 80037bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037be:	897b      	ldrh	r3, [r7, #10]
 80037c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037c4:	7a7b      	ldrb	r3, [r7, #9]
 80037c6:	041b      	lsls	r3, r3, #16
 80037c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037cc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037da:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	0d5b      	lsrs	r3, r3, #21
 80037e6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80037ea:	4b08      	ldr	r3, [pc, #32]	; (800380c <I2C_TransferConfig+0x60>)
 80037ec:	430b      	orrs	r3, r1
 80037ee:	43db      	mvns	r3, r3
 80037f0:	ea02 0103 	and.w	r1, r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80037fe:	bf00      	nop
 8003800:	371c      	adds	r7, #28
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	03ff63ff 	.word	0x03ff63ff

08003810 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b20      	cmp	r3, #32
 8003824:	d138      	bne.n	8003898 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003830:	2302      	movs	r3, #2
 8003832:	e032      	b.n	800389a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2224      	movs	r2, #36	; 0x24
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0201 	bic.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003862:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6819      	ldr	r1, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0201 	orr.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	e000      	b.n	800389a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003898:	2302      	movs	r3, #2
  }
}
 800389a:	4618      	mov	r0, r3
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b085      	sub	sp, #20
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	d139      	bne.n	8003930 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e033      	b.n	8003932 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2224      	movs	r2, #36	; 0x24
 80038d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0201 	bic.w	r2, r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	021b      	lsls	r3, r3, #8
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0201 	orr.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	e000      	b.n	8003932 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003930:	2302      	movs	r3, #2
  }
}
 8003932:	4618      	mov	r0, r3
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800393e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003940:	b08f      	sub	sp, #60	; 0x3c
 8003942:	af0a      	add	r7, sp, #40	; 0x28
 8003944:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e116      	b.n	8003b7e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d106      	bne.n	8003970 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f008 f8e8 	bl	800bb40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2203      	movs	r2, #3
 8003974:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003980:	2b00      	cmp	r3, #0
 8003982:	d102      	bne.n	800398a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f005 f85b 	bl	8008a4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	603b      	str	r3, [r7, #0]
 800399a:	687e      	ldr	r6, [r7, #4]
 800399c:	466d      	mov	r5, sp
 800399e:	f106 0410 	add.w	r4, r6, #16
 80039a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80039b2:	1d33      	adds	r3, r6, #4
 80039b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039b6:	6838      	ldr	r0, [r7, #0]
 80039b8:	f004 ff26 	bl	8008808 <USB_CoreInit>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d005      	beq.n	80039ce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2202      	movs	r2, #2
 80039c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e0d7      	b.n	8003b7e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2100      	movs	r1, #0
 80039d4:	4618      	mov	r0, r3
 80039d6:	f005 f849 	bl	8008a6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039da:	2300      	movs	r3, #0
 80039dc:	73fb      	strb	r3, [r7, #15]
 80039de:	e04a      	b.n	8003a76 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039e0:	7bfa      	ldrb	r2, [r7, #15]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	4413      	add	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	333d      	adds	r3, #61	; 0x3d
 80039f0:	2201      	movs	r2, #1
 80039f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039f4:	7bfa      	ldrb	r2, [r7, #15]
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	4413      	add	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	333c      	adds	r3, #60	; 0x3c
 8003a04:	7bfa      	ldrb	r2, [r7, #15]
 8003a06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a08:	7bfa      	ldrb	r2, [r7, #15]
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
 8003a0c:	b298      	uxth	r0, r3
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	4613      	mov	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	3344      	adds	r3, #68	; 0x44
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a20:	7bfa      	ldrb	r2, [r7, #15]
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	4613      	mov	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	4413      	add	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	3340      	adds	r3, #64	; 0x40
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a34:	7bfa      	ldrb	r2, [r7, #15]
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	3348      	adds	r3, #72	; 0x48
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a48:	7bfa      	ldrb	r2, [r7, #15]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	4413      	add	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	334c      	adds	r3, #76	; 0x4c
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a5c:	7bfa      	ldrb	r2, [r7, #15]
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	4413      	add	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	3354      	adds	r3, #84	; 0x54
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a70:	7bfb      	ldrb	r3, [r7, #15]
 8003a72:	3301      	adds	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
 8003a76:	7bfa      	ldrb	r2, [r7, #15]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d3af      	bcc.n	80039e0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a80:	2300      	movs	r3, #0
 8003a82:	73fb      	strb	r3, [r7, #15]
 8003a84:	e044      	b.n	8003b10 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a86:	7bfa      	ldrb	r2, [r7, #15]
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	4413      	add	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	440b      	add	r3, r1
 8003a94:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003a98:	2200      	movs	r2, #0
 8003a9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a9c:	7bfa      	ldrb	r2, [r7, #15]
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003aae:	7bfa      	ldrb	r2, [r7, #15]
 8003ab0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ab2:	7bfa      	ldrb	r2, [r7, #15]
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ac8:	7bfa      	ldrb	r2, [r7, #15]
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	4613      	mov	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ade:	7bfa      	ldrb	r2, [r7, #15]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003af4:	7bfa      	ldrb	r2, [r7, #15]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
 8003b10:	7bfa      	ldrb	r2, [r7, #15]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d3b5      	bcc.n	8003a86 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	603b      	str	r3, [r7, #0]
 8003b20:	687e      	ldr	r6, [r7, #4]
 8003b22:	466d      	mov	r5, sp
 8003b24:	f106 0410 	add.w	r4, r6, #16
 8003b28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b34:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b38:	1d33      	adds	r3, r6, #4
 8003b3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b3c:	6838      	ldr	r0, [r7, #0]
 8003b3e:	f004 ffe1 	bl	8008b04 <USB_DevInit>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e014      	b.n	8003b7e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d102      	bne.n	8003b72 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f001 f98b 	bl	8004e88 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f006 f92f 	bl	8009dda <USB_DevDisconnect>

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b86 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_PCD_Start+0x1c>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e020      	b.n	8003be4 <HAL_PCD_Start+0x5e>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d109      	bne.n	8003bc6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d005      	beq.n	8003bc6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f004 ff2c 	bl	8008a28 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f006 f8df 	bl	8009d98 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003bec:	b590      	push	{r4, r7, lr}
 8003bee:	b08d      	sub	sp, #52	; 0x34
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f006 f99d 	bl	8009f42 <USB_GetMode>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f040 84b7 	bne.w	800457e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f006 f901 	bl	8009e1c <USB_ReadInterrupts>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 84ad 	beq.w	800457c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	0a1b      	lsrs	r3, r3, #8
 8003c2c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f006 f8ee 	bl	8009e1c <USB_ReadInterrupts>
 8003c40:	4603      	mov	r3, r0
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d107      	bne.n	8003c5a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695a      	ldr	r2, [r3, #20]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f002 0202 	and.w	r2, r2, #2
 8003c58:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f006 f8dc 	bl	8009e1c <USB_ReadInterrupts>
 8003c64:	4603      	mov	r3, r0
 8003c66:	f003 0310 	and.w	r3, r3, #16
 8003c6a:	2b10      	cmp	r3, #16
 8003c6c:	d161      	bne.n	8003d32 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699a      	ldr	r2, [r3, #24]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0210 	bic.w	r2, r2, #16
 8003c7c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	f003 020f 	and.w	r2, r3, #15
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	4413      	add	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	4413      	add	r3, r2
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	0c5b      	lsrs	r3, r3, #17
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d124      	bne.n	8003cf4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d035      	beq.n	8003d22 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	091b      	lsrs	r3, r3, #4
 8003cbe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003cc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	6a38      	ldr	r0, [r7, #32]
 8003cca:	f005 ff13 	bl	8009af4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	691a      	ldr	r2, [r3, #16]
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	091b      	lsrs	r3, r3, #4
 8003cd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cda:	441a      	add	r2, r3
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	6a1a      	ldr	r2, [r3, #32]
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	091b      	lsrs	r3, r3, #4
 8003ce8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cec:	441a      	add	r2, r3
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	621a      	str	r2, [r3, #32]
 8003cf2:	e016      	b.n	8003d22 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	0c5b      	lsrs	r3, r3, #17
 8003cf8:	f003 030f 	and.w	r3, r3, #15
 8003cfc:	2b06      	cmp	r3, #6
 8003cfe:	d110      	bne.n	8003d22 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d06:	2208      	movs	r2, #8
 8003d08:	4619      	mov	r1, r3
 8003d0a:	6a38      	ldr	r0, [r7, #32]
 8003d0c:	f005 fef2 	bl	8009af4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	6a1a      	ldr	r2, [r3, #32]
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	091b      	lsrs	r3, r3, #4
 8003d18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d1c:	441a      	add	r2, r3
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	699a      	ldr	r2, [r3, #24]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 0210 	orr.w	r2, r2, #16
 8003d30:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f006 f870 	bl	8009e1c <USB_ReadInterrupts>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d46:	f040 80a7 	bne.w	8003e98 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f006 f875 	bl	8009e42 <USB_ReadDevAllOutEpInterrupt>
 8003d58:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003d5a:	e099      	b.n	8003e90 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 808e 	beq.w	8003e84 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	4611      	mov	r1, r2
 8003d72:	4618      	mov	r0, r3
 8003d74:	f006 f899 	bl	8009eaa <USB_ReadDevOutEPInterrupt>
 8003d78:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00c      	beq.n	8003d9e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d90:	461a      	mov	r2, r3
 8003d92:	2301      	movs	r3, #1
 8003d94:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003d96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 feef 	bl	8004b7c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00c      	beq.n	8003dc2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db4:	461a      	mov	r2, r3
 8003db6:	2308      	movs	r3, #8
 8003db8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003dba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 ffc5 	bl	8004d4c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd8:	461a      	mov	r2, r3
 8003dda:	2310      	movs	r3, #16
 8003ddc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d030      	beq.n	8003e4a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df0:	2b80      	cmp	r3, #128	; 0x80
 8003df2:	d109      	bne.n	8003e08 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	69fa      	ldr	r2, [r7, #28]
 8003dfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e06:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	4413      	add	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	4413      	add	r3, r2
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	78db      	ldrb	r3, [r3, #3]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d108      	bne.n	8003e38 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	4619      	mov	r1, r3
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f007 ffa8 	bl	800bd88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e44:	461a      	mov	r2, r3
 8003e46:	2302      	movs	r3, #2
 8003e48:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f003 0320 	and.w	r3, r3, #32
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d008      	beq.n	8003e66 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e60:	461a      	mov	r2, r3
 8003e62:	2320      	movs	r3, #32
 8003e64:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d009      	beq.n	8003e84 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e82:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	3301      	adds	r3, #1
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8c:	085b      	lsrs	r3, r3, #1
 8003e8e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f47f af62 	bne.w	8003d5c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f005 ffbd 	bl	8009e1c <USB_ReadInterrupts>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ea8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003eac:	f040 80db 	bne.w	8004066 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f005 ffde 	bl	8009e76 <USB_ReadDevAllInEpInterrupt>
 8003eba:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003ec0:	e0cd      	b.n	800405e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 80c2 	beq.w	8004052 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	4611      	mov	r1, r2
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f006 f804 	bl	8009ee6 <USB_ReadDevInEPInterrupt>
 8003ede:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d057      	beq.n	8003f9a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003efe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	43db      	mvns	r3, r3
 8003f04:	69f9      	ldr	r1, [r7, #28]
 8003f06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d132      	bne.n	8003f8e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003f28:	6879      	ldr	r1, [r7, #4]
 8003f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	334c      	adds	r3, #76	; 0x4c
 8003f38:	6819      	ldr	r1, [r3, #0]
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f3e:	4613      	mov	r3, r2
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	4413      	add	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4403      	add	r3, r0
 8003f48:	3348      	adds	r3, #72	; 0x48
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4419      	add	r1, r3
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f52:	4613      	mov	r3, r2
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4403      	add	r3, r0
 8003f5c:	334c      	adds	r3, #76	; 0x4c
 8003f5e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d113      	bne.n	8003f8e <HAL_PCD_IRQHandler+0x3a2>
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	4413      	add	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	440b      	add	r3, r1
 8003f74:	3354      	adds	r3, #84	; 0x54
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d108      	bne.n	8003f8e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6818      	ldr	r0, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f86:	461a      	mov	r2, r3
 8003f88:	2101      	movs	r1, #1
 8003f8a:	f006 f80d 	bl	8009fa8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	4619      	mov	r1, r3
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f007 fe72 	bl	800bc7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f003 0308 	and.w	r3, r3, #8
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	2308      	movs	r3, #8
 8003fb4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f003 0310 	and.w	r3, r3, #16
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d008      	beq.n	8003fd2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fcc:	461a      	mov	r2, r3
 8003fce:	2310      	movs	r3, #16
 8003fd0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d008      	beq.n	8003fee <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe8:	461a      	mov	r2, r3
 8003fea:	2340      	movs	r3, #64	; 0x40
 8003fec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d023      	beq.n	8004040 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003ff8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ffa:	6a38      	ldr	r0, [r7, #32]
 8003ffc:	f004 fee0 	bl	8008dc0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004002:	4613      	mov	r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	3338      	adds	r3, #56	; 0x38
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	4413      	add	r3, r2
 8004010:	3304      	adds	r3, #4
 8004012:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	78db      	ldrb	r3, [r3, #3]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d108      	bne.n	800402e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2200      	movs	r2, #0
 8004020:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	b2db      	uxtb	r3, r3
 8004026:	4619      	mov	r1, r3
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f007 febf 	bl	800bdac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	4413      	add	r3, r2
 8004036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403a:	461a      	mov	r2, r3
 800403c:	2302      	movs	r3, #2
 800403e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800404a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 fd08 	bl	8004a62 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	3301      	adds	r3, #1
 8004056:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405a:	085b      	lsrs	r3, r3, #1
 800405c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800405e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004060:	2b00      	cmp	r3, #0
 8004062:	f47f af2e 	bne.w	8003ec2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f005 fed6 	bl	8009e1c <USB_ReadInterrupts>
 8004070:	4603      	mov	r3, r0
 8004072:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004076:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800407a:	d122      	bne.n	80040c2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	69fa      	ldr	r2, [r7, #28]
 8004086:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800408a:	f023 0301 	bic.w	r3, r3, #1
 800408e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004096:	2b01      	cmp	r3, #1
 8004098:	d108      	bne.n	80040ac <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040a2:	2100      	movs	r1, #0
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 ff13 	bl	8004ed0 <HAL_PCDEx_LPM_Callback>
 80040aa:	e002      	b.n	80040b2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f007 fe5d 	bl	800bd6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695a      	ldr	r2, [r3, #20]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80040c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f005 fea8 	bl	8009e1c <USB_ReadInterrupts>
 80040cc:	4603      	mov	r3, r0
 80040ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d6:	d112      	bne.n	80040fe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d102      	bne.n	80040ee <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f007 fe19 	bl	800bd20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	695a      	ldr	r2, [r3, #20]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80040fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f005 fe8a 	bl	8009e1c <USB_ReadInterrupts>
 8004108:	4603      	mov	r3, r0
 800410a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800410e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004112:	d121      	bne.n	8004158 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695a      	ldr	r2, [r3, #20]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004122:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800412a:	2b00      	cmp	r3, #0
 800412c:	d111      	bne.n	8004152 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413c:	089b      	lsrs	r3, r3, #2
 800413e:	f003 020f 	and.w	r2, r3, #15
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004148:	2101      	movs	r1, #1
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fec0 	bl	8004ed0 <HAL_PCDEx_LPM_Callback>
 8004150:	e002      	b.n	8004158 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f007 fde4 	bl	800bd20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4618      	mov	r0, r3
 800415e:	f005 fe5d 	bl	8009e1c <USB_ReadInterrupts>
 8004162:	4603      	mov	r3, r0
 8004164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416c:	f040 80b7 	bne.w	80042de <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	69fa      	ldr	r2, [r7, #28]
 800417a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800417e:	f023 0301 	bic.w	r3, r3, #1
 8004182:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2110      	movs	r1, #16
 800418a:	4618      	mov	r0, r3
 800418c:	f004 fe18 	bl	8008dc0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004190:	2300      	movs	r3, #0
 8004192:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004194:	e046      	b.n	8004224 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	4413      	add	r3, r2
 800419e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a2:	461a      	mov	r2, r3
 80041a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041a8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80041aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ba:	0151      	lsls	r1, r2, #5
 80041bc:	69fa      	ldr	r2, [r7, #28]
 80041be:	440a      	add	r2, r1
 80041c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80041ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d6:	461a      	mov	r2, r3
 80041d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041dc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ee:	0151      	lsls	r1, r2, #5
 80041f0:	69fa      	ldr	r2, [r7, #28]
 80041f2:	440a      	add	r2, r1
 80041f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80041fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800420e:	0151      	lsls	r1, r2, #5
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	440a      	add	r2, r1
 8004214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004218:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800421c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004220:	3301      	adds	r3, #1
 8004222:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800422a:	429a      	cmp	r2, r3
 800422c:	d3b3      	bcc.n	8004196 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800423c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004240:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004246:	2b00      	cmp	r3, #0
 8004248:	d016      	beq.n	8004278 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004254:	69fa      	ldr	r2, [r7, #28]
 8004256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800425a:	f043 030b 	orr.w	r3, r3, #11
 800425e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004270:	f043 030b 	orr.w	r3, r3, #11
 8004274:	6453      	str	r3, [r2, #68]	; 0x44
 8004276:	e015      	b.n	80042a4 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800427e:	695a      	ldr	r2, [r3, #20]
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004286:	4619      	mov	r1, r3
 8004288:	f242 032b 	movw	r3, #8235	; 0x202b
 800428c:	4313      	orrs	r3, r2
 800428e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	69fa      	ldr	r2, [r7, #28]
 800429a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800429e:	f043 030b 	orr.w	r3, r3, #11
 80042a2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	69fa      	ldr	r2, [r7, #28]
 80042ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80042b6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6818      	ldr	r0, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042c8:	461a      	mov	r2, r3
 80042ca:	f005 fe6d 	bl	8009fa8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695a      	ldr	r2, [r3, #20]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80042dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f005 fd9a 	bl	8009e1c <USB_ReadInterrupts>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f2:	d124      	bne.n	800433e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f005 fe31 	bl	8009f60 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4618      	mov	r0, r3
 8004304:	f004 fdd9 	bl	8008eba <USB_GetDevSpeed>
 8004308:	4603      	mov	r3, r0
 800430a:	461a      	mov	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681c      	ldr	r4, [r3, #0]
 8004314:	f001 fd90 	bl	8005e38 <HAL_RCC_GetHCLKFreq>
 8004318:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800431e:	b2db      	uxtb	r3, r3
 8004320:	461a      	mov	r2, r3
 8004322:	4620      	mov	r0, r4
 8004324:	f004 fade 	bl	80088e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f007 fcd0 	bl	800bcce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695a      	ldr	r2, [r3, #20]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800433c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f005 fd6a 	bl	8009e1c <USB_ReadInterrupts>
 8004348:	4603      	mov	r3, r0
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b08      	cmp	r3, #8
 8004350:	d10a      	bne.n	8004368 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f007 fcad 	bl	800bcb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695a      	ldr	r2, [r3, #20]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f002 0208 	and.w	r2, r2, #8
 8004366:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4618      	mov	r0, r3
 800436e:	f005 fd55 	bl	8009e1c <USB_ReadInterrupts>
 8004372:	4603      	mov	r3, r0
 8004374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004378:	2b80      	cmp	r3, #128	; 0x80
 800437a:	d122      	bne.n	80043c2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004388:	2301      	movs	r3, #1
 800438a:	627b      	str	r3, [r7, #36]	; 0x24
 800438c:	e014      	b.n	80043b8 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004392:	4613      	mov	r3, r2
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	440b      	add	r3, r1
 800439c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d105      	bne.n	80043b2 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	4619      	mov	r1, r3
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 fb27 	bl	8004a00 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	3301      	adds	r3, #1
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043be:	429a      	cmp	r2, r3
 80043c0:	d3e5      	bcc.n	800438e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f005 fd28 	bl	8009e1c <USB_ReadInterrupts>
 80043cc:	4603      	mov	r3, r0
 80043ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043d6:	d13b      	bne.n	8004450 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043d8:	2301      	movs	r3, #1
 80043da:	627b      	str	r3, [r7, #36]	; 0x24
 80043dc:	e02b      	b.n	8004436 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f2:	4613      	mov	r3, r2
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	4413      	add	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	440b      	add	r3, r1
 80043fc:	3340      	adds	r3, #64	; 0x40
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d115      	bne.n	8004430 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004404:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004406:	2b00      	cmp	r3, #0
 8004408:	da12      	bge.n	8004430 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800440e:	4613      	mov	r3, r2
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	4413      	add	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	440b      	add	r3, r1
 8004418:	333f      	adds	r3, #63	; 0x3f
 800441a:	2201      	movs	r2, #1
 800441c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	b2db      	uxtb	r3, r3
 8004422:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004426:	b2db      	uxtb	r3, r3
 8004428:	4619      	mov	r1, r3
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fae8 	bl	8004a00 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	3301      	adds	r3, #1
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800443c:	429a      	cmp	r2, r3
 800443e:	d3ce      	bcc.n	80043de <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695a      	ldr	r2, [r3, #20]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800444e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4618      	mov	r0, r3
 8004456:	f005 fce1 	bl	8009e1c <USB_ReadInterrupts>
 800445a:	4603      	mov	r3, r0
 800445c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004460:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004464:	d155      	bne.n	8004512 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004466:	2301      	movs	r3, #1
 8004468:	627b      	str	r3, [r7, #36]	; 0x24
 800446a:	e045      	b.n	80044f8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004480:	4613      	mov	r3, r2
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	4413      	add	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d12e      	bne.n	80044f2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004494:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004496:	2b00      	cmp	r3, #0
 8004498:	da2b      	bge.n	80044f2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80044a6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d121      	bne.n	80044f2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b2:	4613      	mov	r3, r2
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	4413      	add	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	440b      	add	r3, r1
 80044bc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80044c0:	2201      	movs	r2, #1
 80044c2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10a      	bne.n	80044f2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	69fa      	ldr	r2, [r7, #28]
 80044e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044ee:	6053      	str	r3, [r2, #4]
            break;
 80044f0:	e007      	b.n	8004502 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	3301      	adds	r3, #1
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fe:	429a      	cmp	r2, r3
 8004500:	d3b4      	bcc.n	800446c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	695a      	ldr	r2, [r3, #20]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004510:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f005 fc80 	bl	8009e1c <USB_ReadInterrupts>
 800451c:	4603      	mov	r3, r0
 800451e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004526:	d10a      	bne.n	800453e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f007 fc51 	bl	800bdd0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695a      	ldr	r2, [r3, #20]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800453c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f005 fc6a 	bl	8009e1c <USB_ReadInterrupts>
 8004548:	4603      	mov	r3, r0
 800454a:	f003 0304 	and.w	r3, r3, #4
 800454e:	2b04      	cmp	r3, #4
 8004550:	d115      	bne.n	800457e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f007 fc41 	bl	800bdec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6859      	ldr	r1, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	430a      	orrs	r2, r1
 8004578:	605a      	str	r2, [r3, #4]
 800457a:	e000      	b.n	800457e <HAL_PCD_IRQHandler+0x992>
      return;
 800457c:	bf00      	nop
    }
  }
}
 800457e:	3734      	adds	r7, #52	; 0x34
 8004580:	46bd      	mov	sp, r7
 8004582:	bd90      	pop	{r4, r7, pc}

08004584 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	460b      	mov	r3, r1
 800458e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004596:	2b01      	cmp	r3, #1
 8004598:	d101      	bne.n	800459e <HAL_PCD_SetAddress+0x1a>
 800459a:	2302      	movs	r3, #2
 800459c:	e013      	b.n	80045c6 <HAL_PCD_SetAddress+0x42>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	78fa      	ldrb	r2, [r7, #3]
 80045aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	78fa      	ldrb	r2, [r7, #3]
 80045b4:	4611      	mov	r1, r2
 80045b6:	4618      	mov	r0, r3
 80045b8:	f005 fbc8 	bl	8009d4c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b084      	sub	sp, #16
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	4608      	mov	r0, r1
 80045d8:	4611      	mov	r1, r2
 80045da:	461a      	mov	r2, r3
 80045dc:	4603      	mov	r3, r0
 80045de:	70fb      	strb	r3, [r7, #3]
 80045e0:	460b      	mov	r3, r1
 80045e2:	803b      	strh	r3, [r7, #0]
 80045e4:	4613      	mov	r3, r2
 80045e6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	da0f      	bge.n	8004614 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045f4:	78fb      	ldrb	r3, [r7, #3]
 80045f6:	f003 020f 	and.w	r2, r3, #15
 80045fa:	4613      	mov	r3, r2
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	4413      	add	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	3338      	adds	r3, #56	; 0x38
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	4413      	add	r3, r2
 8004608:	3304      	adds	r3, #4
 800460a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2201      	movs	r2, #1
 8004610:	705a      	strb	r2, [r3, #1]
 8004612:	e00f      	b.n	8004634 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004614:	78fb      	ldrb	r3, [r7, #3]
 8004616:	f003 020f 	and.w	r2, r3, #15
 800461a:	4613      	mov	r3, r2
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	4413      	add	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	4413      	add	r3, r2
 800462a:	3304      	adds	r3, #4
 800462c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004634:	78fb      	ldrb	r3, [r7, #3]
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	b2da      	uxtb	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004640:	883a      	ldrh	r2, [r7, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	78ba      	ldrb	r2, [r7, #2]
 800464a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	785b      	ldrb	r3, [r3, #1]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d004      	beq.n	800465e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800465e:	78bb      	ldrb	r3, [r7, #2]
 8004660:	2b02      	cmp	r3, #2
 8004662:	d102      	bne.n	800466a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004670:	2b01      	cmp	r3, #1
 8004672:	d101      	bne.n	8004678 <HAL_PCD_EP_Open+0xaa>
 8004674:	2302      	movs	r3, #2
 8004676:	e00e      	b.n	8004696 <HAL_PCD_EP_Open+0xc8>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68f9      	ldr	r1, [r7, #12]
 8004686:	4618      	mov	r0, r3
 8004688:	f004 fc3c 	bl	8008f04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004694:	7afb      	ldrb	r3, [r7, #11]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	460b      	mov	r3, r1
 80046a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	da0f      	bge.n	80046d2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046b2:	78fb      	ldrb	r3, [r7, #3]
 80046b4:	f003 020f 	and.w	r2, r3, #15
 80046b8:	4613      	mov	r3, r2
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	4413      	add	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	3338      	adds	r3, #56	; 0x38
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	4413      	add	r3, r2
 80046c6:	3304      	adds	r3, #4
 80046c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	705a      	strb	r2, [r3, #1]
 80046d0:	e00f      	b.n	80046f2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046d2:	78fb      	ldrb	r3, [r7, #3]
 80046d4:	f003 020f 	and.w	r2, r3, #15
 80046d8:	4613      	mov	r3, r2
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	4413      	add	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	4413      	add	r3, r2
 80046e8:	3304      	adds	r3, #4
 80046ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80046f2:	78fb      	ldrb	r3, [r7, #3]
 80046f4:	f003 030f 	and.w	r3, r3, #15
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_PCD_EP_Close+0x6e>
 8004708:	2302      	movs	r3, #2
 800470a:	e00e      	b.n	800472a <HAL_PCD_EP_Close+0x8c>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68f9      	ldr	r1, [r7, #12]
 800471a:	4618      	mov	r0, r3
 800471c:	f004 fc7a 	bl	8009014 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b086      	sub	sp, #24
 8004736:	af00      	add	r7, sp, #0
 8004738:	60f8      	str	r0, [r7, #12]
 800473a:	607a      	str	r2, [r7, #4]
 800473c:	603b      	str	r3, [r7, #0]
 800473e:	460b      	mov	r3, r1
 8004740:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004742:	7afb      	ldrb	r3, [r7, #11]
 8004744:	f003 020f 	and.w	r2, r3, #15
 8004748:	4613      	mov	r3, r2
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	4413      	add	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	4413      	add	r3, r2
 8004758:	3304      	adds	r3, #4
 800475a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2200      	movs	r2, #0
 800476c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2200      	movs	r2, #0
 8004772:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004774:	7afb      	ldrb	r3, [r7, #11]
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	b2da      	uxtb	r2, r3
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d102      	bne.n	800478e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800478e:	7afb      	ldrb	r3, [r7, #11]
 8004790:	f003 030f 	and.w	r3, r3, #15
 8004794:	2b00      	cmp	r3, #0
 8004796:	d109      	bne.n	80047ac <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6818      	ldr	r0, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	461a      	mov	r2, r3
 80047a4:	6979      	ldr	r1, [r7, #20]
 80047a6:	f004 ff61 	bl	800966c <USB_EP0StartXfer>
 80047aa:	e008      	b.n	80047be <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6818      	ldr	r0, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	461a      	mov	r2, r3
 80047b8:	6979      	ldr	r1, [r7, #20]
 80047ba:	f004 fd07 	bl	80091cc <USB_EPStartXfer>
  }

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	460b      	mov	r3, r1
 80047d2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	f003 020f 	and.w	r2, r3, #15
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	4613      	mov	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	4413      	add	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	440b      	add	r3, r1
 80047e6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80047ea:	681b      	ldr	r3, [r3, #0]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	607a      	str	r2, [r7, #4]
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	460b      	mov	r3, r1
 8004806:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004808:	7afb      	ldrb	r3, [r7, #11]
 800480a:	f003 020f 	and.w	r2, r3, #15
 800480e:	4613      	mov	r3, r2
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	4413      	add	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	3338      	adds	r3, #56	; 0x38
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	4413      	add	r3, r2
 800481c:	3304      	adds	r3, #4
 800481e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	2200      	movs	r2, #0
 8004830:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2201      	movs	r2, #1
 8004836:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004838:	7afb      	ldrb	r3, [r7, #11]
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	b2da      	uxtb	r2, r3
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d102      	bne.n	8004852 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004852:	7afb      	ldrb	r3, [r7, #11]
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	2b00      	cmp	r3, #0
 800485a:	d109      	bne.n	8004870 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	461a      	mov	r2, r3
 8004868:	6979      	ldr	r1, [r7, #20]
 800486a:	f004 feff 	bl	800966c <USB_EP0StartXfer>
 800486e:	e008      	b.n	8004882 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6818      	ldr	r0, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	b2db      	uxtb	r3, r3
 800487a:	461a      	mov	r2, r3
 800487c:	6979      	ldr	r1, [r7, #20]
 800487e:	f004 fca5 	bl	80091cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	460b      	mov	r3, r1
 8004896:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004898:	78fb      	ldrb	r3, [r7, #3]
 800489a:	f003 020f 	and.w	r2, r3, #15
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d901      	bls.n	80048aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e050      	b.n	800494c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	da0f      	bge.n	80048d2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048b2:	78fb      	ldrb	r3, [r7, #3]
 80048b4:	f003 020f 	and.w	r2, r3, #15
 80048b8:	4613      	mov	r3, r2
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	3338      	adds	r3, #56	; 0x38
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	4413      	add	r3, r2
 80048c6:	3304      	adds	r3, #4
 80048c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2201      	movs	r2, #1
 80048ce:	705a      	strb	r2, [r3, #1]
 80048d0:	e00d      	b.n	80048ee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048d2:	78fa      	ldrb	r2, [r7, #3]
 80048d4:	4613      	mov	r3, r2
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	4413      	add	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	4413      	add	r3, r2
 80048e4:	3304      	adds	r3, #4
 80048e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048f4:	78fb      	ldrb	r3, [r7, #3]
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004906:	2b01      	cmp	r3, #1
 8004908:	d101      	bne.n	800490e <HAL_PCD_EP_SetStall+0x82>
 800490a:	2302      	movs	r3, #2
 800490c:	e01e      	b.n	800494c <HAL_PCD_EP_SetStall+0xc0>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68f9      	ldr	r1, [r7, #12]
 800491c:	4618      	mov	r0, r3
 800491e:	f005 f941 	bl	8009ba4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004922:	78fb      	ldrb	r3, [r7, #3]
 8004924:	f003 030f 	and.w	r3, r3, #15
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10a      	bne.n	8004942 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6818      	ldr	r0, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	b2d9      	uxtb	r1, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800493c:	461a      	mov	r2, r3
 800493e:	f005 fb33 	bl	8009fa8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	460b      	mov	r3, r1
 800495e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	f003 020f 	and.w	r2, r3, #15
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	429a      	cmp	r2, r3
 800496c:	d901      	bls.n	8004972 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e042      	b.n	80049f8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004972:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004976:	2b00      	cmp	r3, #0
 8004978:	da0f      	bge.n	800499a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800497a:	78fb      	ldrb	r3, [r7, #3]
 800497c:	f003 020f 	and.w	r2, r3, #15
 8004980:	4613      	mov	r3, r2
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	4413      	add	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	3338      	adds	r3, #56	; 0x38
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	4413      	add	r3, r2
 800498e:	3304      	adds	r3, #4
 8004990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2201      	movs	r2, #1
 8004996:	705a      	strb	r2, [r3, #1]
 8004998:	e00f      	b.n	80049ba <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800499a:	78fb      	ldrb	r3, [r7, #3]
 800499c:	f003 020f 	and.w	r2, r3, #15
 80049a0:	4613      	mov	r3, r2
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	4413      	add	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	4413      	add	r3, r2
 80049b0:	3304      	adds	r3, #4
 80049b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <HAL_PCD_EP_ClrStall+0x86>
 80049d6:	2302      	movs	r3, #2
 80049d8:	e00e      	b.n	80049f8 <HAL_PCD_EP_ClrStall+0xa4>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68f9      	ldr	r1, [r7, #12]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f005 f949 	bl	8009c80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004a0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	da0c      	bge.n	8004a2e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a14:	78fb      	ldrb	r3, [r7, #3]
 8004a16:	f003 020f 	and.w	r2, r3, #15
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	4413      	add	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	3338      	adds	r3, #56	; 0x38
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	4413      	add	r3, r2
 8004a28:	3304      	adds	r3, #4
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	e00c      	b.n	8004a48 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a2e:	78fb      	ldrb	r3, [r7, #3]
 8004a30:	f003 020f 	and.w	r2, r3, #15
 8004a34:	4613      	mov	r3, r2
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	4413      	add	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	4413      	add	r3, r2
 8004a44:	3304      	adds	r3, #4
 8004a46:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68f9      	ldr	r1, [r7, #12]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f004 ff68 	bl	8009924 <USB_EPStopXfer>
 8004a54:	4603      	mov	r3, r0
 8004a56:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a58:	7afb      	ldrb	r3, [r7, #11]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b08a      	sub	sp, #40	; 0x28
 8004a66:	af02      	add	r7, sp, #8
 8004a68:	6078      	str	r0, [r7, #4]
 8004a6a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	3338      	adds	r3, #56	; 0x38
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	4413      	add	r3, r2
 8004a86:	3304      	adds	r3, #4
 8004a88:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a1a      	ldr	r2, [r3, #32]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d901      	bls.n	8004a9a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e06c      	b.n	8004b74 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	69fa      	ldr	r2, [r7, #28]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d902      	bls.n	8004ab6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	3303      	adds	r3, #3
 8004aba:	089b      	lsrs	r3, r3, #2
 8004abc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004abe:	e02b      	b.n	8004b18 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	699a      	ldr	r2, [r3, #24]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	69fa      	ldr	r2, [r7, #28]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d902      	bls.n	8004adc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	3303      	adds	r3, #3
 8004ae0:	089b      	lsrs	r3, r3, #2
 8004ae2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6919      	ldr	r1, [r3, #16]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	4603      	mov	r3, r0
 8004afa:	6978      	ldr	r0, [r7, #20]
 8004afc:	f004 ffbc 	bl	8009a78 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	691a      	ldr	r2, [r3, #16]
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	441a      	add	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a1a      	ldr	r2, [r3, #32]
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	441a      	add	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d809      	bhi.n	8004b42 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a1a      	ldr	r2, [r3, #32]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d203      	bcs.n	8004b42 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1be      	bne.n	8004ac0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	699a      	ldr	r2, [r3, #24]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d811      	bhi.n	8004b72 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	f003 030f 	and.w	r3, r3, #15
 8004b54:	2201      	movs	r2, #1
 8004b56:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	43db      	mvns	r3, r3
 8004b68:	6939      	ldr	r1, [r7, #16]
 8004b6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b6e:	4013      	ands	r3, r2
 8004b70:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3720      	adds	r7, #32
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b088      	sub	sp, #32
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	333c      	adds	r3, #60	; 0x3c
 8004b94:	3304      	adds	r3, #4
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d17b      	bne.n	8004caa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f003 0308 	and.w	r3, r3, #8
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d015      	beq.n	8004be8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	4a61      	ldr	r2, [pc, #388]	; (8004d44 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	f240 80b9 	bls.w	8004d38 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 80b3 	beq.w	8004d38 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	015a      	lsls	r2, r3, #5
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bde:	461a      	mov	r2, r3
 8004be0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004be4:	6093      	str	r3, [r2, #8]
 8004be6:	e0a7      	b.n	8004d38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d009      	beq.n	8004c06 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfe:	461a      	mov	r2, r3
 8004c00:	2320      	movs	r3, #32
 8004c02:	6093      	str	r3, [r2, #8]
 8004c04:	e098      	b.n	8004d38 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f040 8093 	bne.w	8004d38 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	4a4b      	ldr	r2, [pc, #300]	; (8004d44 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d90f      	bls.n	8004c3a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00a      	beq.n	8004c3a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c30:	461a      	mov	r2, r3
 8004c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c36:	6093      	str	r3, [r2, #8]
 8004c38:	e07e      	b.n	8004d38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	4413      	add	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	69da      	ldr	r2, [r3, #28]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	0159      	lsls	r1, r3, #5
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	440b      	add	r3, r1
 8004c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c66:	1ad2      	subs	r2, r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d114      	bne.n	8004c9c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d109      	bne.n	8004c8e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6818      	ldr	r0, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c84:	461a      	mov	r2, r3
 8004c86:	2101      	movs	r1, #1
 8004c88:	f005 f98e 	bl	8009fa8 <USB_EP0_OutStart>
 8004c8c:	e006      	b.n	8004c9c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	691a      	ldr	r2, [r3, #16]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	441a      	add	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f006 ffd0 	bl	800bc48 <HAL_PCD_DataOutStageCallback>
 8004ca8:	e046      	b.n	8004d38 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	4a26      	ldr	r2, [pc, #152]	; (8004d48 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d124      	bne.n	8004cfc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00a      	beq.n	8004cd2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	015a      	lsls	r2, r3, #5
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc8:	461a      	mov	r2, r3
 8004cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cce:	6093      	str	r3, [r2, #8]
 8004cd0:	e032      	b.n	8004d38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f003 0320 	and.w	r3, r3, #32
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d008      	beq.n	8004cee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce8:	461a      	mov	r2, r3
 8004cea:	2320      	movs	r3, #32
 8004cec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f006 ffa7 	bl	800bc48 <HAL_PCD_DataOutStageCallback>
 8004cfa:	e01d      	b.n	8004d38 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d114      	bne.n	8004d2c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	4613      	mov	r3, r2
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	4413      	add	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	440b      	add	r3, r1
 8004d10:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d108      	bne.n	8004d2c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6818      	ldr	r0, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d24:	461a      	mov	r2, r3
 8004d26:	2100      	movs	r1, #0
 8004d28:	f005 f93e 	bl	8009fa8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	4619      	mov	r1, r3
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f006 ff88 	bl	800bc48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3720      	adds	r7, #32
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	4f54300a 	.word	0x4f54300a
 8004d48:	4f54310a 	.word	0x4f54310a

08004d4c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	333c      	adds	r3, #60	; 0x3c
 8004d64:	3304      	adds	r3, #4
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4a15      	ldr	r2, [pc, #84]	; (8004dd4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d90e      	bls.n	8004da0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d009      	beq.n	8004da0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d98:	461a      	mov	r2, r3
 8004d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d9e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f006 ff3f 	bl	800bc24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	4a0a      	ldr	r2, [pc, #40]	; (8004dd4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d90c      	bls.n	8004dc8 <PCD_EP_OutSetupPacket_int+0x7c>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d108      	bne.n	8004dc8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6818      	ldr	r0, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	f005 f8f0 	bl	8009fa8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3718      	adds	r7, #24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	4f54300a 	.word	0x4f54300a

08004dd8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	460b      	mov	r3, r1
 8004de2:	70fb      	strb	r3, [r7, #3]
 8004de4:	4613      	mov	r3, r2
 8004de6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004df0:	78fb      	ldrb	r3, [r7, #3]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d107      	bne.n	8004e06 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004df6:	883b      	ldrh	r3, [r7, #0]
 8004df8:	0419      	lsls	r1, r3, #16
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	629a      	str	r2, [r3, #40]	; 0x28
 8004e04:	e028      	b.n	8004e58 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0c:	0c1b      	lsrs	r3, r3, #16
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	4413      	add	r3, r2
 8004e12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e14:	2300      	movs	r3, #0
 8004e16:	73fb      	strb	r3, [r7, #15]
 8004e18:	e00d      	b.n	8004e36 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	7bfb      	ldrb	r3, [r7, #15]
 8004e20:	3340      	adds	r3, #64	; 0x40
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	0c1b      	lsrs	r3, r3, #16
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
 8004e32:	3301      	adds	r3, #1
 8004e34:	73fb      	strb	r3, [r7, #15]
 8004e36:	7bfa      	ldrb	r2, [r7, #15]
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d3ec      	bcc.n	8004e1a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004e40:	883b      	ldrh	r3, [r7, #0]
 8004e42:	0418      	lsls	r0, r3, #16
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6819      	ldr	r1, [r3, #0]
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	4302      	orrs	r2, r0
 8004e50:	3340      	adds	r3, #64	; 0x40
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	440b      	add	r3, r1
 8004e56:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	460b      	mov	r3, r1
 8004e70:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	887a      	ldrh	r2, [r7, #2]
 8004e78:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004eb6:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <HAL_PCDEx_ActivateLPM+0x44>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	10000003 	.word	0x10000003

08004ed0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004ef0:	4b19      	ldr	r3, [pc, #100]	; (8004f58 <HAL_PWREx_ConfigSupply+0x70>)
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d00a      	beq.n	8004f12 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004efc:	4b16      	ldr	r3, [pc, #88]	; (8004f58 <HAL_PWREx_ConfigSupply+0x70>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d001      	beq.n	8004f0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e01f      	b.n	8004f4e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	e01d      	b.n	8004f4e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004f12:	4b11      	ldr	r3, [pc, #68]	; (8004f58 <HAL_PWREx_ConfigSupply+0x70>)
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f023 0207 	bic.w	r2, r3, #7
 8004f1a:	490f      	ldr	r1, [pc, #60]	; (8004f58 <HAL_PWREx_ConfigSupply+0x70>)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004f22:	f7fd fdc3 	bl	8002aac <HAL_GetTick>
 8004f26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f28:	e009      	b.n	8004f3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004f2a:	f7fd fdbf 	bl	8002aac <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f38:	d901      	bls.n	8004f3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e007      	b.n	8004f4e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f3e:	4b06      	ldr	r3, [pc, #24]	; (8004f58 <HAL_PWREx_ConfigSupply+0x70>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f4a:	d1ee      	bne.n	8004f2a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	58024800 	.word	0x58024800

08004f5c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004f60:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	4a04      	ldr	r2, [pc, #16]	; (8004f78 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004f66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f6a:	60d3      	str	r3, [r2, #12]
}
 8004f6c:	bf00      	nop
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	58024800 	.word	0x58024800

08004f7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b08c      	sub	sp, #48	; 0x30
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d102      	bne.n	8004f90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	f000 bc1d 	b.w	80057ca <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 8087 	beq.w	80050ac <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f9e:	4b99      	ldr	r3, [pc, #612]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004fa8:	4b96      	ldr	r3, [pc, #600]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 8004faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fac:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb0:	2b10      	cmp	r3, #16
 8004fb2:	d007      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x48>
 8004fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb6:	2b18      	cmp	r3, #24
 8004fb8:	d110      	bne.n	8004fdc <HAL_RCC_OscConfig+0x60>
 8004fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbc:	f003 0303 	and.w	r3, r3, #3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d10b      	bne.n	8004fdc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fc4:	4b8f      	ldr	r3, [pc, #572]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d06c      	beq.n	80050aa <HAL_RCC_OscConfig+0x12e>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d168      	bne.n	80050aa <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e3f6      	b.n	80057ca <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe4:	d106      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x78>
 8004fe6:	4b87      	ldr	r3, [pc, #540]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a86      	ldr	r2, [pc, #536]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 8004fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	e02e      	b.n	8005052 <HAL_RCC_OscConfig+0xd6>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10c      	bne.n	8005016 <HAL_RCC_OscConfig+0x9a>
 8004ffc:	4b81      	ldr	r3, [pc, #516]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a80      	ldr	r2, [pc, #512]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 8005002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	4b7e      	ldr	r3, [pc, #504]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a7d      	ldr	r2, [pc, #500]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 800500e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	e01d      	b.n	8005052 <HAL_RCC_OscConfig+0xd6>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800501e:	d10c      	bne.n	800503a <HAL_RCC_OscConfig+0xbe>
 8005020:	4b78      	ldr	r3, [pc, #480]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a77      	ldr	r2, [pc, #476]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 8005026:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	4b75      	ldr	r3, [pc, #468]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a74      	ldr	r2, [pc, #464]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 8005032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	e00b      	b.n	8005052 <HAL_RCC_OscConfig+0xd6>
 800503a:	4b72      	ldr	r3, [pc, #456]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a71      	ldr	r2, [pc, #452]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 8005040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	4b6f      	ldr	r3, [pc, #444]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a6e      	ldr	r2, [pc, #440]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 800504c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005050:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d013      	beq.n	8005082 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505a:	f7fd fd27 	bl	8002aac <HAL_GetTick>
 800505e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005060:	e008      	b.n	8005074 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005062:	f7fd fd23 	bl	8002aac <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b64      	cmp	r3, #100	; 0x64
 800506e:	d901      	bls.n	8005074 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e3aa      	b.n	80057ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005074:	4b63      	ldr	r3, [pc, #396]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d0f0      	beq.n	8005062 <HAL_RCC_OscConfig+0xe6>
 8005080:	e014      	b.n	80050ac <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005082:	f7fd fd13 	bl	8002aac <HAL_GetTick>
 8005086:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005088:	e008      	b.n	800509c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800508a:	f7fd fd0f 	bl	8002aac <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b64      	cmp	r3, #100	; 0x64
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e396      	b.n	80057ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800509c:	4b59      	ldr	r3, [pc, #356]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1f0      	bne.n	800508a <HAL_RCC_OscConfig+0x10e>
 80050a8:	e000      	b.n	80050ac <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050aa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 80cb 	beq.w	8005250 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050ba:	4b52      	ldr	r3, [pc, #328]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050c2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80050c4:	4b4f      	ldr	r3, [pc, #316]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 80050c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d007      	beq.n	80050e0 <HAL_RCC_OscConfig+0x164>
 80050d0:	6a3b      	ldr	r3, [r7, #32]
 80050d2:	2b18      	cmp	r3, #24
 80050d4:	d156      	bne.n	8005184 <HAL_RCC_OscConfig+0x208>
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	f003 0303 	and.w	r3, r3, #3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d151      	bne.n	8005184 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050e0:	4b48      	ldr	r3, [pc, #288]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d005      	beq.n	80050f8 <HAL_RCC_OscConfig+0x17c>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e368      	b.n	80057ca <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80050f8:	4b42      	ldr	r3, [pc, #264]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f023 0219 	bic.w	r2, r3, #25
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	493f      	ldr	r1, [pc, #252]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 8005106:	4313      	orrs	r3, r2
 8005108:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800510a:	f7fd fccf 	bl	8002aac <HAL_GetTick>
 800510e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005110:	e008      	b.n	8005124 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005112:	f7fd fccb 	bl	8002aac <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e352      	b.n	80057ca <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005124:	4b37      	ldr	r3, [pc, #220]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0f0      	beq.n	8005112 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005130:	f7fd fcec 	bl	8002b0c <HAL_GetREVID>
 8005134:	4603      	mov	r3, r0
 8005136:	f241 0203 	movw	r2, #4099	; 0x1003
 800513a:	4293      	cmp	r3, r2
 800513c:	d817      	bhi.n	800516e <HAL_RCC_OscConfig+0x1f2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	2b40      	cmp	r3, #64	; 0x40
 8005144:	d108      	bne.n	8005158 <HAL_RCC_OscConfig+0x1dc>
 8005146:	4b2f      	ldr	r3, [pc, #188]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800514e:	4a2d      	ldr	r2, [pc, #180]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 8005150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005154:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005156:	e07b      	b.n	8005250 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005158:	4b2a      	ldr	r3, [pc, #168]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	031b      	lsls	r3, r3, #12
 8005166:	4927      	ldr	r1, [pc, #156]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 8005168:	4313      	orrs	r3, r2
 800516a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800516c:	e070      	b.n	8005250 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800516e:	4b25      	ldr	r3, [pc, #148]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	061b      	lsls	r3, r3, #24
 800517c:	4921      	ldr	r1, [pc, #132]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 800517e:	4313      	orrs	r3, r2
 8005180:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005182:	e065      	b.n	8005250 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d048      	beq.n	800521e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800518c:	4b1d      	ldr	r3, [pc, #116]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f023 0219 	bic.w	r2, r3, #25
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	491a      	ldr	r1, [pc, #104]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 800519a:	4313      	orrs	r3, r2
 800519c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519e:	f7fd fc85 	bl	8002aac <HAL_GetTick>
 80051a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051a4:	e008      	b.n	80051b8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051a6:	f7fd fc81 	bl	8002aac <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e308      	b.n	80057ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051b8:	4b12      	ldr	r3, [pc, #72]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0f0      	beq.n	80051a6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c4:	f7fd fca2 	bl	8002b0c <HAL_GetREVID>
 80051c8:	4603      	mov	r3, r0
 80051ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d81a      	bhi.n	8005208 <HAL_RCC_OscConfig+0x28c>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	2b40      	cmp	r3, #64	; 0x40
 80051d8:	d108      	bne.n	80051ec <HAL_RCC_OscConfig+0x270>
 80051da:	4b0a      	ldr	r3, [pc, #40]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80051e2:	4a08      	ldr	r2, [pc, #32]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 80051e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051e8:	6053      	str	r3, [r2, #4]
 80051ea:	e031      	b.n	8005250 <HAL_RCC_OscConfig+0x2d4>
 80051ec:	4b05      	ldr	r3, [pc, #20]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	031b      	lsls	r3, r3, #12
 80051fa:	4902      	ldr	r1, [pc, #8]	; (8005204 <HAL_RCC_OscConfig+0x288>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	604b      	str	r3, [r1, #4]
 8005200:	e026      	b.n	8005250 <HAL_RCC_OscConfig+0x2d4>
 8005202:	bf00      	nop
 8005204:	58024400 	.word	0x58024400
 8005208:	4b9a      	ldr	r3, [pc, #616]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	061b      	lsls	r3, r3, #24
 8005216:	4997      	ldr	r1, [pc, #604]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005218:	4313      	orrs	r3, r2
 800521a:	604b      	str	r3, [r1, #4]
 800521c:	e018      	b.n	8005250 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800521e:	4b95      	ldr	r3, [pc, #596]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a94      	ldr	r2, [pc, #592]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005224:	f023 0301 	bic.w	r3, r3, #1
 8005228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522a:	f7fd fc3f 	bl	8002aac <HAL_GetTick>
 800522e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005230:	e008      	b.n	8005244 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005232:	f7fd fc3b 	bl	8002aac <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d901      	bls.n	8005244 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e2c2      	b.n	80057ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005244:	4b8b      	ldr	r3, [pc, #556]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1f0      	bne.n	8005232 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0310 	and.w	r3, r3, #16
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 80a9 	beq.w	80053b0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800525e:	4b85      	ldr	r3, [pc, #532]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005266:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005268:	4b82      	ldr	r3, [pc, #520]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 800526a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	2b08      	cmp	r3, #8
 8005272:	d007      	beq.n	8005284 <HAL_RCC_OscConfig+0x308>
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	2b18      	cmp	r3, #24
 8005278:	d13a      	bne.n	80052f0 <HAL_RCC_OscConfig+0x374>
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f003 0303 	and.w	r3, r3, #3
 8005280:	2b01      	cmp	r3, #1
 8005282:	d135      	bne.n	80052f0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005284:	4b7b      	ldr	r3, [pc, #492]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528c:	2b00      	cmp	r3, #0
 800528e:	d005      	beq.n	800529c <HAL_RCC_OscConfig+0x320>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	2b80      	cmp	r3, #128	; 0x80
 8005296:	d001      	beq.n	800529c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e296      	b.n	80057ca <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800529c:	f7fd fc36 	bl	8002b0c <HAL_GetREVID>
 80052a0:	4603      	mov	r3, r0
 80052a2:	f241 0203 	movw	r2, #4099	; 0x1003
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d817      	bhi.n	80052da <HAL_RCC_OscConfig+0x35e>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	2b20      	cmp	r3, #32
 80052b0:	d108      	bne.n	80052c4 <HAL_RCC_OscConfig+0x348>
 80052b2:	4b70      	ldr	r3, [pc, #448]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80052ba:	4a6e      	ldr	r2, [pc, #440]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80052bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052c0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052c2:	e075      	b.n	80053b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052c4:	4b6b      	ldr	r3, [pc, #428]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	069b      	lsls	r3, r3, #26
 80052d2:	4968      	ldr	r1, [pc, #416]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052d8:	e06a      	b.n	80053b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052da:	4b66      	ldr	r3, [pc, #408]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	061b      	lsls	r3, r3, #24
 80052e8:	4962      	ldr	r1, [pc, #392]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052ee:	e05f      	b.n	80053b0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d042      	beq.n	800537e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80052f8:	4b5e      	ldr	r3, [pc, #376]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a5d      	ldr	r2, [pc, #372]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80052fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005304:	f7fd fbd2 	bl	8002aac <HAL_GetTick>
 8005308:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800530a:	e008      	b.n	800531e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800530c:	f7fd fbce 	bl	8002aac <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d901      	bls.n	800531e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e255      	b.n	80057ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800531e:	4b55      	ldr	r3, [pc, #340]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005326:	2b00      	cmp	r3, #0
 8005328:	d0f0      	beq.n	800530c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800532a:	f7fd fbef 	bl	8002b0c <HAL_GetREVID>
 800532e:	4603      	mov	r3, r0
 8005330:	f241 0203 	movw	r2, #4099	; 0x1003
 8005334:	4293      	cmp	r3, r2
 8005336:	d817      	bhi.n	8005368 <HAL_RCC_OscConfig+0x3ec>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	2b20      	cmp	r3, #32
 800533e:	d108      	bne.n	8005352 <HAL_RCC_OscConfig+0x3d6>
 8005340:	4b4c      	ldr	r3, [pc, #304]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005348:	4a4a      	ldr	r2, [pc, #296]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 800534a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800534e:	6053      	str	r3, [r2, #4]
 8005350:	e02e      	b.n	80053b0 <HAL_RCC_OscConfig+0x434>
 8005352:	4b48      	ldr	r3, [pc, #288]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	069b      	lsls	r3, r3, #26
 8005360:	4944      	ldr	r1, [pc, #272]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005362:	4313      	orrs	r3, r2
 8005364:	604b      	str	r3, [r1, #4]
 8005366:	e023      	b.n	80053b0 <HAL_RCC_OscConfig+0x434>
 8005368:	4b42      	ldr	r3, [pc, #264]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	061b      	lsls	r3, r3, #24
 8005376:	493f      	ldr	r1, [pc, #252]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005378:	4313      	orrs	r3, r2
 800537a:	60cb      	str	r3, [r1, #12]
 800537c:	e018      	b.n	80053b0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800537e:	4b3d      	ldr	r3, [pc, #244]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a3c      	ldr	r2, [pc, #240]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005384:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538a:	f7fd fb8f 	bl	8002aac <HAL_GetTick>
 800538e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005390:	e008      	b.n	80053a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005392:	f7fd fb8b 	bl	8002aac <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d901      	bls.n	80053a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e212      	b.n	80057ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80053a4:	4b33      	ldr	r3, [pc, #204]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1f0      	bne.n	8005392 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0308 	and.w	r3, r3, #8
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d036      	beq.n	800542a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d019      	beq.n	80053f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053c4:	4b2b      	ldr	r3, [pc, #172]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80053c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053c8:	4a2a      	ldr	r2, [pc, #168]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80053ca:	f043 0301 	orr.w	r3, r3, #1
 80053ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d0:	f7fd fb6c 	bl	8002aac <HAL_GetTick>
 80053d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053d8:	f7fd fb68 	bl	8002aac <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e1ef      	b.n	80057ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80053ea:	4b22      	ldr	r3, [pc, #136]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80053ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0f0      	beq.n	80053d8 <HAL_RCC_OscConfig+0x45c>
 80053f6:	e018      	b.n	800542a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053f8:	4b1e      	ldr	r3, [pc, #120]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80053fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053fc:	4a1d      	ldr	r2, [pc, #116]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 80053fe:	f023 0301 	bic.w	r3, r3, #1
 8005402:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005404:	f7fd fb52 	bl	8002aac <HAL_GetTick>
 8005408:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800540c:	f7fd fb4e 	bl	8002aac <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e1d5      	b.n	80057ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800541e:	4b15      	ldr	r3, [pc, #84]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1f0      	bne.n	800540c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	d039      	beq.n	80054aa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d01c      	beq.n	8005478 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800543e:	4b0d      	ldr	r3, [pc, #52]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a0c      	ldr	r2, [pc, #48]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005444:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005448:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800544a:	f7fd fb2f 	bl	8002aac <HAL_GetTick>
 800544e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005450:	e008      	b.n	8005464 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005452:	f7fd fb2b 	bl	8002aac <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d901      	bls.n	8005464 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e1b2      	b.n	80057ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005464:	4b03      	ldr	r3, [pc, #12]	; (8005474 <HAL_RCC_OscConfig+0x4f8>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0f0      	beq.n	8005452 <HAL_RCC_OscConfig+0x4d6>
 8005470:	e01b      	b.n	80054aa <HAL_RCC_OscConfig+0x52e>
 8005472:	bf00      	nop
 8005474:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005478:	4b9b      	ldr	r3, [pc, #620]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a9a      	ldr	r2, [pc, #616]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 800547e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005482:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005484:	f7fd fb12 	bl	8002aac <HAL_GetTick>
 8005488:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800548c:	f7fd fb0e 	bl	8002aac <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e195      	b.n	80057ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800549e:	4b92      	ldr	r3, [pc, #584]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1f0      	bne.n	800548c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0304 	and.w	r3, r3, #4
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 8081 	beq.w	80055ba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80054b8:	4b8c      	ldr	r3, [pc, #560]	; (80056ec <HAL_RCC_OscConfig+0x770>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a8b      	ldr	r2, [pc, #556]	; (80056ec <HAL_RCC_OscConfig+0x770>)
 80054be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054c4:	f7fd faf2 	bl	8002aac <HAL_GetTick>
 80054c8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80054cc:	f7fd faee 	bl	8002aac <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b64      	cmp	r3, #100	; 0x64
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e175      	b.n	80057ca <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054de:	4b83      	ldr	r3, [pc, #524]	; (80056ec <HAL_RCC_OscConfig+0x770>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0f0      	beq.n	80054cc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d106      	bne.n	8005500 <HAL_RCC_OscConfig+0x584>
 80054f2:	4b7d      	ldr	r3, [pc, #500]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80054f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f6:	4a7c      	ldr	r2, [pc, #496]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80054f8:	f043 0301 	orr.w	r3, r3, #1
 80054fc:	6713      	str	r3, [r2, #112]	; 0x70
 80054fe:	e02d      	b.n	800555c <HAL_RCC_OscConfig+0x5e0>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10c      	bne.n	8005522 <HAL_RCC_OscConfig+0x5a6>
 8005508:	4b77      	ldr	r3, [pc, #476]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 800550a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550c:	4a76      	ldr	r2, [pc, #472]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 800550e:	f023 0301 	bic.w	r3, r3, #1
 8005512:	6713      	str	r3, [r2, #112]	; 0x70
 8005514:	4b74      	ldr	r3, [pc, #464]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005518:	4a73      	ldr	r2, [pc, #460]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 800551a:	f023 0304 	bic.w	r3, r3, #4
 800551e:	6713      	str	r3, [r2, #112]	; 0x70
 8005520:	e01c      	b.n	800555c <HAL_RCC_OscConfig+0x5e0>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	2b05      	cmp	r3, #5
 8005528:	d10c      	bne.n	8005544 <HAL_RCC_OscConfig+0x5c8>
 800552a:	4b6f      	ldr	r3, [pc, #444]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 800552c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800552e:	4a6e      	ldr	r2, [pc, #440]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005530:	f043 0304 	orr.w	r3, r3, #4
 8005534:	6713      	str	r3, [r2, #112]	; 0x70
 8005536:	4b6c      	ldr	r3, [pc, #432]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553a:	4a6b      	ldr	r2, [pc, #428]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 800553c:	f043 0301 	orr.w	r3, r3, #1
 8005540:	6713      	str	r3, [r2, #112]	; 0x70
 8005542:	e00b      	b.n	800555c <HAL_RCC_OscConfig+0x5e0>
 8005544:	4b68      	ldr	r3, [pc, #416]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005548:	4a67      	ldr	r2, [pc, #412]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 800554a:	f023 0301 	bic.w	r3, r3, #1
 800554e:	6713      	str	r3, [r2, #112]	; 0x70
 8005550:	4b65      	ldr	r3, [pc, #404]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005554:	4a64      	ldr	r2, [pc, #400]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005556:	f023 0304 	bic.w	r3, r3, #4
 800555a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d015      	beq.n	8005590 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005564:	f7fd faa2 	bl	8002aac <HAL_GetTick>
 8005568:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800556a:	e00a      	b.n	8005582 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800556c:	f7fd fa9e 	bl	8002aac <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	f241 3288 	movw	r2, #5000	; 0x1388
 800557a:	4293      	cmp	r3, r2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e123      	b.n	80057ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005582:	4b59      	ldr	r3, [pc, #356]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0ee      	beq.n	800556c <HAL_RCC_OscConfig+0x5f0>
 800558e:	e014      	b.n	80055ba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005590:	f7fd fa8c 	bl	8002aac <HAL_GetTick>
 8005594:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005596:	e00a      	b.n	80055ae <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005598:	f7fd fa88 	bl	8002aac <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e10d      	b.n	80057ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80055ae:	4b4e      	ldr	r3, [pc, #312]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80055b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1ee      	bne.n	8005598 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 8102 	beq.w	80057c8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80055c4:	4b48      	ldr	r3, [pc, #288]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055cc:	2b18      	cmp	r3, #24
 80055ce:	f000 80bd 	beq.w	800574c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	f040 809e 	bne.w	8005718 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055dc:	4b42      	ldr	r3, [pc, #264]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a41      	ldr	r2, [pc, #260]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80055e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e8:	f7fd fa60 	bl	8002aac <HAL_GetTick>
 80055ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055f0:	f7fd fa5c 	bl	8002aac <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e0e3      	b.n	80057ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005602:	4b39      	ldr	r3, [pc, #228]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1f0      	bne.n	80055f0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800560e:	4b36      	ldr	r3, [pc, #216]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005610:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005612:	4b37      	ldr	r3, [pc, #220]	; (80056f0 <HAL_RCC_OscConfig+0x774>)
 8005614:	4013      	ands	r3, r2
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800561e:	0112      	lsls	r2, r2, #4
 8005620:	430a      	orrs	r2, r1
 8005622:	4931      	ldr	r1, [pc, #196]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005624:	4313      	orrs	r3, r2
 8005626:	628b      	str	r3, [r1, #40]	; 0x28
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562c:	3b01      	subs	r3, #1
 800562e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005636:	3b01      	subs	r3, #1
 8005638:	025b      	lsls	r3, r3, #9
 800563a:	b29b      	uxth	r3, r3
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005642:	3b01      	subs	r3, #1
 8005644:	041b      	lsls	r3, r3, #16
 8005646:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005650:	3b01      	subs	r3, #1
 8005652:	061b      	lsls	r3, r3, #24
 8005654:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005658:	4923      	ldr	r1, [pc, #140]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 800565a:	4313      	orrs	r3, r2
 800565c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800565e:	4b22      	ldr	r3, [pc, #136]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005662:	4a21      	ldr	r2, [pc, #132]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005664:	f023 0301 	bic.w	r3, r3, #1
 8005668:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800566a:	4b1f      	ldr	r3, [pc, #124]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 800566c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800566e:	4b21      	ldr	r3, [pc, #132]	; (80056f4 <HAL_RCC_OscConfig+0x778>)
 8005670:	4013      	ands	r3, r2
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005676:	00d2      	lsls	r2, r2, #3
 8005678:	491b      	ldr	r1, [pc, #108]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 800567a:	4313      	orrs	r3, r2
 800567c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800567e:	4b1a      	ldr	r3, [pc, #104]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005682:	f023 020c 	bic.w	r2, r3, #12
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	4917      	ldr	r1, [pc, #92]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 800568c:	4313      	orrs	r3, r2
 800568e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005690:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 8005692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005694:	f023 0202 	bic.w	r2, r3, #2
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569c:	4912      	ldr	r1, [pc, #72]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80056a2:	4b11      	ldr	r3, [pc, #68]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	4a10      	ldr	r2, [pc, #64]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80056a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056ae:	4b0e      	ldr	r3, [pc, #56]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80056b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b2:	4a0d      	ldr	r2, [pc, #52]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80056b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80056ba:	4b0b      	ldr	r3, [pc, #44]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80056bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056be:	4a0a      	ldr	r2, [pc, #40]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80056c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80056c6:	4b08      	ldr	r3, [pc, #32]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80056c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ca:	4a07      	ldr	r2, [pc, #28]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80056cc:	f043 0301 	orr.w	r3, r3, #1
 80056d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056d2:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a04      	ldr	r2, [pc, #16]	; (80056e8 <HAL_RCC_OscConfig+0x76c>)
 80056d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056de:	f7fd f9e5 	bl	8002aac <HAL_GetTick>
 80056e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056e4:	e011      	b.n	800570a <HAL_RCC_OscConfig+0x78e>
 80056e6:	bf00      	nop
 80056e8:	58024400 	.word	0x58024400
 80056ec:	58024800 	.word	0x58024800
 80056f0:	fffffc0c 	.word	0xfffffc0c
 80056f4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056f8:	f7fd f9d8 	bl	8002aac <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e05f      	b.n	80057ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800570a:	4b32      	ldr	r3, [pc, #200]	; (80057d4 <HAL_RCC_OscConfig+0x858>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d0f0      	beq.n	80056f8 <HAL_RCC_OscConfig+0x77c>
 8005716:	e057      	b.n	80057c8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005718:	4b2e      	ldr	r3, [pc, #184]	; (80057d4 <HAL_RCC_OscConfig+0x858>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a2d      	ldr	r2, [pc, #180]	; (80057d4 <HAL_RCC_OscConfig+0x858>)
 800571e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005724:	f7fd f9c2 	bl	8002aac <HAL_GetTick>
 8005728:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800572c:	f7fd f9be 	bl	8002aac <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e045      	b.n	80057ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800573e:	4b25      	ldr	r3, [pc, #148]	; (80057d4 <HAL_RCC_OscConfig+0x858>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1f0      	bne.n	800572c <HAL_RCC_OscConfig+0x7b0>
 800574a:	e03d      	b.n	80057c8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800574c:	4b21      	ldr	r3, [pc, #132]	; (80057d4 <HAL_RCC_OscConfig+0x858>)
 800574e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005750:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005752:	4b20      	ldr	r3, [pc, #128]	; (80057d4 <HAL_RCC_OscConfig+0x858>)
 8005754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005756:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	2b01      	cmp	r3, #1
 800575e:	d031      	beq.n	80057c4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	f003 0203 	and.w	r2, r3, #3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800576a:	429a      	cmp	r2, r3
 800576c:	d12a      	bne.n	80057c4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	091b      	lsrs	r3, r3, #4
 8005772:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800577a:	429a      	cmp	r2, r3
 800577c:	d122      	bne.n	80057c4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005788:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800578a:	429a      	cmp	r2, r3
 800578c:	d11a      	bne.n	80057c4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	0a5b      	lsrs	r3, r3, #9
 8005792:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800579c:	429a      	cmp	r2, r3
 800579e:	d111      	bne.n	80057c4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	0c1b      	lsrs	r3, r3, #16
 80057a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ac:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d108      	bne.n	80057c4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	0e1b      	lsrs	r3, r3, #24
 80057b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057be:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d001      	beq.n	80057c8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e000      	b.n	80057ca <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3730      	adds	r7, #48	; 0x30
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	58024400 	.word	0x58024400

080057d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e19c      	b.n	8005b26 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057ec:	4b8a      	ldr	r3, [pc, #552]	; (8005a18 <HAL_RCC_ClockConfig+0x240>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 030f 	and.w	r3, r3, #15
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d910      	bls.n	800581c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057fa:	4b87      	ldr	r3, [pc, #540]	; (8005a18 <HAL_RCC_ClockConfig+0x240>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f023 020f 	bic.w	r2, r3, #15
 8005802:	4985      	ldr	r1, [pc, #532]	; (8005a18 <HAL_RCC_ClockConfig+0x240>)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	4313      	orrs	r3, r2
 8005808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800580a:	4b83      	ldr	r3, [pc, #524]	; (8005a18 <HAL_RCC_ClockConfig+0x240>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 030f 	and.w	r3, r3, #15
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	429a      	cmp	r2, r3
 8005816:	d001      	beq.n	800581c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e184      	b.n	8005b26 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	d010      	beq.n	800584a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	691a      	ldr	r2, [r3, #16]
 800582c:	4b7b      	ldr	r3, [pc, #492]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005834:	429a      	cmp	r2, r3
 8005836:	d908      	bls.n	800584a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005838:	4b78      	ldr	r3, [pc, #480]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	4975      	ldr	r1, [pc, #468]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 8005846:	4313      	orrs	r3, r2
 8005848:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0308 	and.w	r3, r3, #8
 8005852:	2b00      	cmp	r3, #0
 8005854:	d010      	beq.n	8005878 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	695a      	ldr	r2, [r3, #20]
 800585a:	4b70      	ldr	r3, [pc, #448]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005862:	429a      	cmp	r2, r3
 8005864:	d908      	bls.n	8005878 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005866:	4b6d      	ldr	r3, [pc, #436]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	496a      	ldr	r1, [pc, #424]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 8005874:	4313      	orrs	r3, r2
 8005876:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0310 	and.w	r3, r3, #16
 8005880:	2b00      	cmp	r3, #0
 8005882:	d010      	beq.n	80058a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	699a      	ldr	r2, [r3, #24]
 8005888:	4b64      	ldr	r3, [pc, #400]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005890:	429a      	cmp	r2, r3
 8005892:	d908      	bls.n	80058a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005894:	4b61      	ldr	r3, [pc, #388]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	495e      	ldr	r1, [pc, #376]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d010      	beq.n	80058d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	69da      	ldr	r2, [r3, #28]
 80058b6:	4b59      	ldr	r3, [pc, #356]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058be:	429a      	cmp	r2, r3
 80058c0:	d908      	bls.n	80058d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80058c2:	4b56      	ldr	r3, [pc, #344]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	4953      	ldr	r1, [pc, #332]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d010      	beq.n	8005902 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68da      	ldr	r2, [r3, #12]
 80058e4:	4b4d      	ldr	r3, [pc, #308]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	f003 030f 	and.w	r3, r3, #15
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d908      	bls.n	8005902 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058f0:	4b4a      	ldr	r3, [pc, #296]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	f023 020f 	bic.w	r2, r3, #15
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	4947      	ldr	r1, [pc, #284]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d055      	beq.n	80059ba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800590e:	4b43      	ldr	r3, [pc, #268]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	4940      	ldr	r1, [pc, #256]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 800591c:	4313      	orrs	r3, r2
 800591e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	2b02      	cmp	r3, #2
 8005926:	d107      	bne.n	8005938 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005928:	4b3c      	ldr	r3, [pc, #240]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d121      	bne.n	8005978 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e0f6      	b.n	8005b26 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	2b03      	cmp	r3, #3
 800593e:	d107      	bne.n	8005950 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005940:	4b36      	ldr	r3, [pc, #216]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d115      	bne.n	8005978 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e0ea      	b.n	8005b26 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d107      	bne.n	8005968 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005958:	4b30      	ldr	r3, [pc, #192]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005960:	2b00      	cmp	r3, #0
 8005962:	d109      	bne.n	8005978 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e0de      	b.n	8005b26 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005968:	4b2c      	ldr	r3, [pc, #176]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e0d6      	b.n	8005b26 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005978:	4b28      	ldr	r3, [pc, #160]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	f023 0207 	bic.w	r2, r3, #7
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	4925      	ldr	r1, [pc, #148]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 8005986:	4313      	orrs	r3, r2
 8005988:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800598a:	f7fd f88f 	bl	8002aac <HAL_GetTick>
 800598e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005990:	e00a      	b.n	80059a8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005992:	f7fd f88b 	bl	8002aac <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d901      	bls.n	80059a8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e0be      	b.n	8005b26 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059a8:	4b1c      	ldr	r3, [pc, #112]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d1eb      	bne.n	8005992 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d010      	beq.n	80059e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	4b14      	ldr	r3, [pc, #80]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	f003 030f 	and.w	r3, r3, #15
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d208      	bcs.n	80059e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059d6:	4b11      	ldr	r3, [pc, #68]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	f023 020f 	bic.w	r2, r3, #15
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	490e      	ldr	r1, [pc, #56]	; (8005a1c <HAL_RCC_ClockConfig+0x244>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059e8:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <HAL_RCC_ClockConfig+0x240>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 030f 	and.w	r3, r3, #15
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d214      	bcs.n	8005a20 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059f6:	4b08      	ldr	r3, [pc, #32]	; (8005a18 <HAL_RCC_ClockConfig+0x240>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f023 020f 	bic.w	r2, r3, #15
 80059fe:	4906      	ldr	r1, [pc, #24]	; (8005a18 <HAL_RCC_ClockConfig+0x240>)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a06:	4b04      	ldr	r3, [pc, #16]	; (8005a18 <HAL_RCC_ClockConfig+0x240>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 030f 	and.w	r3, r3, #15
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d005      	beq.n	8005a20 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e086      	b.n	8005b26 <HAL_RCC_ClockConfig+0x34e>
 8005a18:	52002000 	.word	0x52002000
 8005a1c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d010      	beq.n	8005a4e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	4b3f      	ldr	r3, [pc, #252]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d208      	bcs.n	8005a4e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a3c:	4b3c      	ldr	r3, [pc, #240]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	4939      	ldr	r1, [pc, #228]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0308 	and.w	r3, r3, #8
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d010      	beq.n	8005a7c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	695a      	ldr	r2, [r3, #20]
 8005a5e:	4b34      	ldr	r3, [pc, #208]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d208      	bcs.n	8005a7c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a6a:	4b31      	ldr	r3, [pc, #196]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	492e      	ldr	r1, [pc, #184]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0310 	and.w	r3, r3, #16
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d010      	beq.n	8005aaa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	699a      	ldr	r2, [r3, #24]
 8005a8c:	4b28      	ldr	r3, [pc, #160]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005a8e:	69db      	ldr	r3, [r3, #28]
 8005a90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d208      	bcs.n	8005aaa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a98:	4b25      	ldr	r3, [pc, #148]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005a9a:	69db      	ldr	r3, [r3, #28]
 8005a9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	4922      	ldr	r1, [pc, #136]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0320 	and.w	r3, r3, #32
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d010      	beq.n	8005ad8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	69da      	ldr	r2, [r3, #28]
 8005aba:	4b1d      	ldr	r3, [pc, #116]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d208      	bcs.n	8005ad8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005ac6:	4b1a      	ldr	r3, [pc, #104]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	4917      	ldr	r1, [pc, #92]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005ad8:	f000 f834 	bl	8005b44 <HAL_RCC_GetSysClockFreq>
 8005adc:	4602      	mov	r2, r0
 8005ade:	4b14      	ldr	r3, [pc, #80]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	0a1b      	lsrs	r3, r3, #8
 8005ae4:	f003 030f 	and.w	r3, r3, #15
 8005ae8:	4912      	ldr	r1, [pc, #72]	; (8005b34 <HAL_RCC_ClockConfig+0x35c>)
 8005aea:	5ccb      	ldrb	r3, [r1, r3]
 8005aec:	f003 031f 	and.w	r3, r3, #31
 8005af0:	fa22 f303 	lsr.w	r3, r2, r3
 8005af4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005af6:	4b0e      	ldr	r3, [pc, #56]	; (8005b30 <HAL_RCC_ClockConfig+0x358>)
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	f003 030f 	and.w	r3, r3, #15
 8005afe:	4a0d      	ldr	r2, [pc, #52]	; (8005b34 <HAL_RCC_ClockConfig+0x35c>)
 8005b00:	5cd3      	ldrb	r3, [r2, r3]
 8005b02:	f003 031f 	and.w	r3, r3, #31
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0c:	4a0a      	ldr	r2, [pc, #40]	; (8005b38 <HAL_RCC_ClockConfig+0x360>)
 8005b0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b10:	4a0a      	ldr	r2, [pc, #40]	; (8005b3c <HAL_RCC_ClockConfig+0x364>)
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005b16:	4b0a      	ldr	r3, [pc, #40]	; (8005b40 <HAL_RCC_ClockConfig+0x368>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fc ff7c 	bl	8002a18 <HAL_InitTick>
 8005b20:	4603      	mov	r3, r0
 8005b22:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3718      	adds	r7, #24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	58024400 	.word	0x58024400
 8005b34:	0800c28c 	.word	0x0800c28c
 8005b38:	24000004 	.word	0x24000004
 8005b3c:	24000000 	.word	0x24000000
 8005b40:	24000018 	.word	0x24000018

08005b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b089      	sub	sp, #36	; 0x24
 8005b48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b4a:	4bb3      	ldr	r3, [pc, #716]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b52:	2b18      	cmp	r3, #24
 8005b54:	f200 8155 	bhi.w	8005e02 <HAL_RCC_GetSysClockFreq+0x2be>
 8005b58:	a201      	add	r2, pc, #4	; (adr r2, 8005b60 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5e:	bf00      	nop
 8005b60:	08005bc5 	.word	0x08005bc5
 8005b64:	08005e03 	.word	0x08005e03
 8005b68:	08005e03 	.word	0x08005e03
 8005b6c:	08005e03 	.word	0x08005e03
 8005b70:	08005e03 	.word	0x08005e03
 8005b74:	08005e03 	.word	0x08005e03
 8005b78:	08005e03 	.word	0x08005e03
 8005b7c:	08005e03 	.word	0x08005e03
 8005b80:	08005beb 	.word	0x08005beb
 8005b84:	08005e03 	.word	0x08005e03
 8005b88:	08005e03 	.word	0x08005e03
 8005b8c:	08005e03 	.word	0x08005e03
 8005b90:	08005e03 	.word	0x08005e03
 8005b94:	08005e03 	.word	0x08005e03
 8005b98:	08005e03 	.word	0x08005e03
 8005b9c:	08005e03 	.word	0x08005e03
 8005ba0:	08005bf1 	.word	0x08005bf1
 8005ba4:	08005e03 	.word	0x08005e03
 8005ba8:	08005e03 	.word	0x08005e03
 8005bac:	08005e03 	.word	0x08005e03
 8005bb0:	08005e03 	.word	0x08005e03
 8005bb4:	08005e03 	.word	0x08005e03
 8005bb8:	08005e03 	.word	0x08005e03
 8005bbc:	08005e03 	.word	0x08005e03
 8005bc0:	08005bf7 	.word	0x08005bf7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bc4:	4b94      	ldr	r3, [pc, #592]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0320 	and.w	r3, r3, #32
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d009      	beq.n	8005be4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005bd0:	4b91      	ldr	r3, [pc, #580]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	08db      	lsrs	r3, r3, #3
 8005bd6:	f003 0303 	and.w	r3, r3, #3
 8005bda:	4a90      	ldr	r2, [pc, #576]	; (8005e1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8005be0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005be2:	e111      	b.n	8005e08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005be4:	4b8d      	ldr	r3, [pc, #564]	; (8005e1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005be6:	61bb      	str	r3, [r7, #24]
    break;
 8005be8:	e10e      	b.n	8005e08 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005bea:	4b8d      	ldr	r3, [pc, #564]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005bec:	61bb      	str	r3, [r7, #24]
    break;
 8005bee:	e10b      	b.n	8005e08 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005bf0:	4b8c      	ldr	r3, [pc, #560]	; (8005e24 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005bf2:	61bb      	str	r3, [r7, #24]
    break;
 8005bf4:	e108      	b.n	8005e08 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bf6:	4b88      	ldr	r3, [pc, #544]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfa:	f003 0303 	and.w	r3, r3, #3
 8005bfe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005c00:	4b85      	ldr	r3, [pc, #532]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c04:	091b      	lsrs	r3, r3, #4
 8005c06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c0a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005c0c:	4b82      	ldr	r3, [pc, #520]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005c16:	4b80      	ldr	r3, [pc, #512]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c1a:	08db      	lsrs	r3, r3, #3
 8005c1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	fb02 f303 	mul.w	r3, r2, r3
 8005c26:	ee07 3a90 	vmov	s15, r3
 8005c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 80e1 	beq.w	8005dfc <HAL_RCC_GetSysClockFreq+0x2b8>
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	f000 8083 	beq.w	8005d48 <HAL_RCC_GetSysClockFreq+0x204>
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	f200 80a1 	bhi.w	8005d8c <HAL_RCC_GetSysClockFreq+0x248>
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <HAL_RCC_GetSysClockFreq+0x114>
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d056      	beq.n	8005d04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005c56:	e099      	b.n	8005d8c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c58:	4b6f      	ldr	r3, [pc, #444]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0320 	and.w	r3, r3, #32
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d02d      	beq.n	8005cc0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c64:	4b6c      	ldr	r3, [pc, #432]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	08db      	lsrs	r3, r3, #3
 8005c6a:	f003 0303 	and.w	r3, r3, #3
 8005c6e:	4a6b      	ldr	r2, [pc, #428]	; (8005e1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c70:	fa22 f303 	lsr.w	r3, r2, r3
 8005c74:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	ee07 3a90 	vmov	s15, r3
 8005c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c8e:	4b62      	ldr	r3, [pc, #392]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c96:	ee07 3a90 	vmov	s15, r3
 8005c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ca2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005e28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005cbe:	e087      	b.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cca:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005e2c <HAL_RCC_GetSysClockFreq+0x2e8>
 8005cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cd2:	4b51      	ldr	r3, [pc, #324]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cda:	ee07 3a90 	vmov	s15, r3
 8005cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ce2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ce6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005e28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d02:	e065      	b.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	ee07 3a90 	vmov	s15, r3
 8005d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005e30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d16:	4b40      	ldr	r3, [pc, #256]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d1e:	ee07 3a90 	vmov	s15, r3
 8005d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d26:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d2a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005e28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d46:	e043      	b.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d52:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005e34 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d5a:	4b2f      	ldr	r3, [pc, #188]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d6e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005e28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d8a:	e021      	b.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	ee07 3a90 	vmov	s15, r3
 8005d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d96:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005e30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d9e:	4b1e      	ldr	r3, [pc, #120]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dae:	ed97 6a02 	vldr	s12, [r7, #8]
 8005db2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005e28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dce:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005dd0:	4b11      	ldr	r3, [pc, #68]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd4:	0a5b      	lsrs	r3, r3, #9
 8005dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dda:	3301      	adds	r3, #1
 8005ddc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	ee07 3a90 	vmov	s15, r3
 8005de4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005de8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005df4:	ee17 3a90 	vmov	r3, s15
 8005df8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005dfa:	e005      	b.n	8005e08 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	61bb      	str	r3, [r7, #24]
    break;
 8005e00:	e002      	b.n	8005e08 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005e02:	4b07      	ldr	r3, [pc, #28]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e04:	61bb      	str	r3, [r7, #24]
    break;
 8005e06:	bf00      	nop
  }

  return sysclockfreq;
 8005e08:	69bb      	ldr	r3, [r7, #24]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3724      	adds	r7, #36	; 0x24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	58024400 	.word	0x58024400
 8005e1c:	03d09000 	.word	0x03d09000
 8005e20:	003d0900 	.word	0x003d0900
 8005e24:	017d7840 	.word	0x017d7840
 8005e28:	46000000 	.word	0x46000000
 8005e2c:	4c742400 	.word	0x4c742400
 8005e30:	4a742400 	.word	0x4a742400
 8005e34:	4bbebc20 	.word	0x4bbebc20

08005e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005e3e:	f7ff fe81 	bl	8005b44 <HAL_RCC_GetSysClockFreq>
 8005e42:	4602      	mov	r2, r0
 8005e44:	4b10      	ldr	r3, [pc, #64]	; (8005e88 <HAL_RCC_GetHCLKFreq+0x50>)
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	0a1b      	lsrs	r3, r3, #8
 8005e4a:	f003 030f 	and.w	r3, r3, #15
 8005e4e:	490f      	ldr	r1, [pc, #60]	; (8005e8c <HAL_RCC_GetHCLKFreq+0x54>)
 8005e50:	5ccb      	ldrb	r3, [r1, r3]
 8005e52:	f003 031f 	and.w	r3, r3, #31
 8005e56:	fa22 f303 	lsr.w	r3, r2, r3
 8005e5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e5c:	4b0a      	ldr	r3, [pc, #40]	; (8005e88 <HAL_RCC_GetHCLKFreq+0x50>)
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	f003 030f 	and.w	r3, r3, #15
 8005e64:	4a09      	ldr	r2, [pc, #36]	; (8005e8c <HAL_RCC_GetHCLKFreq+0x54>)
 8005e66:	5cd3      	ldrb	r3, [r2, r3]
 8005e68:	f003 031f 	and.w	r3, r3, #31
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e72:	4a07      	ldr	r2, [pc, #28]	; (8005e90 <HAL_RCC_GetHCLKFreq+0x58>)
 8005e74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e76:	4a07      	ldr	r2, [pc, #28]	; (8005e94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005e7c:	4b04      	ldr	r3, [pc, #16]	; (8005e90 <HAL_RCC_GetHCLKFreq+0x58>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	58024400 	.word	0x58024400
 8005e8c:	0800c28c 	.word	0x0800c28c
 8005e90:	24000004 	.word	0x24000004
 8005e94:	24000000 	.word	0x24000000

08005e98 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d03f      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ebc:	d02a      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005ebe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ec2:	d824      	bhi.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ec4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ec8:	d018      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005eca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ece:	d81e      	bhi.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005ed4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ed8:	d007      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005eda:	e018      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005edc:	4ba3      	ldr	r3, [pc, #652]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee0:	4aa2      	ldr	r2, [pc, #648]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ee6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005ee8:	e015      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	3304      	adds	r3, #4
 8005eee:	2102      	movs	r1, #2
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 ff17 	bl	8006d24 <RCCEx_PLL2_Config>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005efa:	e00c      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3324      	adds	r3, #36	; 0x24
 8005f00:	2102      	movs	r1, #2
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 ffc0 	bl	8006e88 <RCCEx_PLL3_Config>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005f0c:	e003      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	75fb      	strb	r3, [r7, #23]
      break;
 8005f12:	e000      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005f14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f16:	7dfb      	ldrb	r3, [r7, #23]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d109      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005f1c:	4b93      	ldr	r3, [pc, #588]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f28:	4990      	ldr	r1, [pc, #576]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	650b      	str	r3, [r1, #80]	; 0x50
 8005f2e:	e001      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f30:	7dfb      	ldrb	r3, [r7, #23]
 8005f32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d03d      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f44:	2b04      	cmp	r3, #4
 8005f46:	d826      	bhi.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005f48:	a201      	add	r2, pc, #4	; (adr r2, 8005f50 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4e:	bf00      	nop
 8005f50:	08005f65 	.word	0x08005f65
 8005f54:	08005f73 	.word	0x08005f73
 8005f58:	08005f85 	.word	0x08005f85
 8005f5c:	08005f9d 	.word	0x08005f9d
 8005f60:	08005f9d 	.word	0x08005f9d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f64:	4b81      	ldr	r3, [pc, #516]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f68:	4a80      	ldr	r2, [pc, #512]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005f70:	e015      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	3304      	adds	r3, #4
 8005f76:	2100      	movs	r1, #0
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 fed3 	bl	8006d24 <RCCEx_PLL2_Config>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005f82:	e00c      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	3324      	adds	r3, #36	; 0x24
 8005f88:	2100      	movs	r1, #0
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 ff7c 	bl	8006e88 <RCCEx_PLL3_Config>
 8005f90:	4603      	mov	r3, r0
 8005f92:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005f94:	e003      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	75fb      	strb	r3, [r7, #23]
      break;
 8005f9a:	e000      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005f9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f9e:	7dfb      	ldrb	r3, [r7, #23]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d109      	bne.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005fa4:	4b71      	ldr	r3, [pc, #452]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa8:	f023 0207 	bic.w	r2, r3, #7
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb0:	496e      	ldr	r1, [pc, #440]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	650b      	str	r3, [r1, #80]	; 0x50
 8005fb6:	e001      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb8:	7dfb      	ldrb	r3, [r7, #23]
 8005fba:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d042      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fd0:	d02b      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fd6:	d825      	bhi.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005fd8:	2bc0      	cmp	r3, #192	; 0xc0
 8005fda:	d028      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005fdc:	2bc0      	cmp	r3, #192	; 0xc0
 8005fde:	d821      	bhi.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005fe0:	2b80      	cmp	r3, #128	; 0x80
 8005fe2:	d016      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005fe4:	2b80      	cmp	r3, #128	; 0x80
 8005fe6:	d81d      	bhi.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005fec:	2b40      	cmp	r3, #64	; 0x40
 8005fee:	d007      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005ff0:	e018      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ff2:	4b5e      	ldr	r3, [pc, #376]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff6:	4a5d      	ldr	r2, [pc, #372]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ffc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005ffe:	e017      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3304      	adds	r3, #4
 8006004:	2100      	movs	r1, #0
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fe8c 	bl	8006d24 <RCCEx_PLL2_Config>
 800600c:	4603      	mov	r3, r0
 800600e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006010:	e00e      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	3324      	adds	r3, #36	; 0x24
 8006016:	2100      	movs	r1, #0
 8006018:	4618      	mov	r0, r3
 800601a:	f000 ff35 	bl	8006e88 <RCCEx_PLL3_Config>
 800601e:	4603      	mov	r3, r0
 8006020:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006022:	e005      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	75fb      	strb	r3, [r7, #23]
      break;
 8006028:	e002      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800602a:	bf00      	nop
 800602c:	e000      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800602e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006030:	7dfb      	ldrb	r3, [r7, #23]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d109      	bne.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006036:	4b4d      	ldr	r3, [pc, #308]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800603a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006042:	494a      	ldr	r1, [pc, #296]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006044:	4313      	orrs	r3, r2
 8006046:	650b      	str	r3, [r1, #80]	; 0x50
 8006048:	e001      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800604a:	7dfb      	ldrb	r3, [r7, #23]
 800604c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006056:	2b00      	cmp	r3, #0
 8006058:	d049      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006060:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006064:	d030      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006066:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800606a:	d82a      	bhi.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800606c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006070:	d02c      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006072:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006076:	d824      	bhi.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006078:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800607c:	d018      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800607e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006082:	d81e      	bhi.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006088:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800608c:	d007      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800608e:	e018      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006090:	4b36      	ldr	r3, [pc, #216]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006094:	4a35      	ldr	r2, [pc, #212]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800609a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800609c:	e017      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	3304      	adds	r3, #4
 80060a2:	2100      	movs	r1, #0
 80060a4:	4618      	mov	r0, r3
 80060a6:	f000 fe3d 	bl	8006d24 <RCCEx_PLL2_Config>
 80060aa:	4603      	mov	r3, r0
 80060ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80060ae:	e00e      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3324      	adds	r3, #36	; 0x24
 80060b4:	2100      	movs	r1, #0
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 fee6 	bl	8006e88 <RCCEx_PLL3_Config>
 80060bc:	4603      	mov	r3, r0
 80060be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80060c0:	e005      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	75fb      	strb	r3, [r7, #23]
      break;
 80060c6:	e002      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80060c8:	bf00      	nop
 80060ca:	e000      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80060cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060ce:	7dfb      	ldrb	r3, [r7, #23]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10a      	bne.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80060d4:	4b25      	ldr	r3, [pc, #148]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80060d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80060e2:	4922      	ldr	r1, [pc, #136]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	658b      	str	r3, [r1, #88]	; 0x58
 80060e8:	e001      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ea:	7dfb      	ldrb	r3, [r7, #23]
 80060ec:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d04b      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006100:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006104:	d030      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006106:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800610a:	d82a      	bhi.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800610c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006110:	d02e      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006112:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006116:	d824      	bhi.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006118:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800611c:	d018      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800611e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006122:	d81e      	bhi.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800612c:	d007      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800612e:	e018      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006130:	4b0e      	ldr	r3, [pc, #56]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006134:	4a0d      	ldr	r2, [pc, #52]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800613a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800613c:	e019      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	3304      	adds	r3, #4
 8006142:	2100      	movs	r1, #0
 8006144:	4618      	mov	r0, r3
 8006146:	f000 fded 	bl	8006d24 <RCCEx_PLL2_Config>
 800614a:	4603      	mov	r3, r0
 800614c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800614e:	e010      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	3324      	adds	r3, #36	; 0x24
 8006154:	2100      	movs	r1, #0
 8006156:	4618      	mov	r0, r3
 8006158:	f000 fe96 	bl	8006e88 <RCCEx_PLL3_Config>
 800615c:	4603      	mov	r3, r0
 800615e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006160:	e007      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	75fb      	strb	r3, [r7, #23]
      break;
 8006166:	e004      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8006168:	bf00      	nop
 800616a:	e002      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800616c:	58024400 	.word	0x58024400
      break;
 8006170:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006172:	7dfb      	ldrb	r3, [r7, #23]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10a      	bne.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006178:	4b99      	ldr	r3, [pc, #612]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800617a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800617c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006186:	4996      	ldr	r1, [pc, #600]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006188:	4313      	orrs	r3, r2
 800618a:	658b      	str	r3, [r1, #88]	; 0x58
 800618c:	e001      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800618e:	7dfb      	ldrb	r3, [r7, #23]
 8006190:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d032      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061a2:	2b30      	cmp	r3, #48	; 0x30
 80061a4:	d01c      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80061a6:	2b30      	cmp	r3, #48	; 0x30
 80061a8:	d817      	bhi.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x342>
 80061aa:	2b20      	cmp	r3, #32
 80061ac:	d00c      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80061ae:	2b20      	cmp	r3, #32
 80061b0:	d813      	bhi.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x342>
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d016      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80061b6:	2b10      	cmp	r3, #16
 80061b8:	d10f      	bne.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061ba:	4b89      	ldr	r3, [pc, #548]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80061bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061be:	4a88      	ldr	r2, [pc, #544]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80061c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80061c6:	e00e      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3304      	adds	r3, #4
 80061cc:	2102      	movs	r1, #2
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 fda8 	bl	8006d24 <RCCEx_PLL2_Config>
 80061d4:	4603      	mov	r3, r0
 80061d6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80061d8:	e005      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	75fb      	strb	r3, [r7, #23]
      break;
 80061de:	e002      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80061e0:	bf00      	nop
 80061e2:	e000      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80061e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061e6:	7dfb      	ldrb	r3, [r7, #23]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d109      	bne.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80061ec:	4b7c      	ldr	r3, [pc, #496]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80061ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061f8:	4979      	ldr	r1, [pc, #484]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80061fe:	e001      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006200:	7dfb      	ldrb	r3, [r7, #23]
 8006202:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d047      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006214:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006218:	d030      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800621a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800621e:	d82a      	bhi.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006220:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006224:	d02c      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006226:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800622a:	d824      	bhi.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800622c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006230:	d018      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006236:	d81e      	bhi.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006238:	2b00      	cmp	r3, #0
 800623a:	d003      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800623c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006240:	d007      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8006242:	e018      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006244:	4b66      	ldr	r3, [pc, #408]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006248:	4a65      	ldr	r2, [pc, #404]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800624a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800624e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006250:	e017      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	3304      	adds	r3, #4
 8006256:	2100      	movs	r1, #0
 8006258:	4618      	mov	r0, r3
 800625a:	f000 fd63 	bl	8006d24 <RCCEx_PLL2_Config>
 800625e:	4603      	mov	r3, r0
 8006260:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006262:	e00e      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	3324      	adds	r3, #36	; 0x24
 8006268:	2100      	movs	r1, #0
 800626a:	4618      	mov	r0, r3
 800626c:	f000 fe0c 	bl	8006e88 <RCCEx_PLL3_Config>
 8006270:	4603      	mov	r3, r0
 8006272:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006274:	e005      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	75fb      	strb	r3, [r7, #23]
      break;
 800627a:	e002      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800627c:	bf00      	nop
 800627e:	e000      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006280:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006282:	7dfb      	ldrb	r3, [r7, #23]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d109      	bne.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006288:	4b55      	ldr	r3, [pc, #340]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800628a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800628c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006294:	4952      	ldr	r1, [pc, #328]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006296:	4313      	orrs	r3, r2
 8006298:	650b      	str	r3, [r1, #80]	; 0x50
 800629a:	e001      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800629c:	7dfb      	ldrb	r3, [r7, #23]
 800629e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d049      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062b4:	d02e      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80062b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062ba:	d828      	bhi.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80062bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062c0:	d02a      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80062c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062c6:	d822      	bhi.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80062c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80062cc:	d026      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x484>
 80062ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80062d2:	d81c      	bhi.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80062d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062d8:	d010      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x464>
 80062da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062de:	d816      	bhi.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d01d      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80062e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062e8:	d111      	bne.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3304      	adds	r3, #4
 80062ee:	2101      	movs	r1, #1
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 fd17 	bl	8006d24 <RCCEx_PLL2_Config>
 80062f6:	4603      	mov	r3, r0
 80062f8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80062fa:	e012      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3324      	adds	r3, #36	; 0x24
 8006300:	2101      	movs	r1, #1
 8006302:	4618      	mov	r0, r3
 8006304:	f000 fdc0 	bl	8006e88 <RCCEx_PLL3_Config>
 8006308:	4603      	mov	r3, r0
 800630a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800630c:	e009      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	75fb      	strb	r3, [r7, #23]
      break;
 8006312:	e006      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006314:	bf00      	nop
 8006316:	e004      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006318:	bf00      	nop
 800631a:	e002      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800631c:	bf00      	nop
 800631e:	e000      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006320:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006322:	7dfb      	ldrb	r3, [r7, #23]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d109      	bne.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006328:	4b2d      	ldr	r3, [pc, #180]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800632a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800632c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006334:	492a      	ldr	r1, [pc, #168]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006336:	4313      	orrs	r3, r2
 8006338:	650b      	str	r3, [r1, #80]	; 0x50
 800633a:	e001      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633c:	7dfb      	ldrb	r3, [r7, #23]
 800633e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d04d      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006352:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006356:	d02e      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006358:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800635c:	d828      	bhi.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800635e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006362:	d02a      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006368:	d822      	bhi.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800636a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800636e:	d026      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006370:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006374:	d81c      	bhi.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006376:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800637a:	d010      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800637c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006380:	d816      	bhi.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006382:	2b00      	cmp	r3, #0
 8006384:	d01d      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006386:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800638a:	d111      	bne.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	3304      	adds	r3, #4
 8006390:	2101      	movs	r1, #1
 8006392:	4618      	mov	r0, r3
 8006394:	f000 fcc6 	bl	8006d24 <RCCEx_PLL2_Config>
 8006398:	4603      	mov	r3, r0
 800639a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800639c:	e012      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	3324      	adds	r3, #36	; 0x24
 80063a2:	2101      	movs	r1, #1
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 fd6f 	bl	8006e88 <RCCEx_PLL3_Config>
 80063aa:	4603      	mov	r3, r0
 80063ac:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80063ae:	e009      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	75fb      	strb	r3, [r7, #23]
      break;
 80063b4:	e006      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80063b6:	bf00      	nop
 80063b8:	e004      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80063ba:	bf00      	nop
 80063bc:	e002      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80063be:	bf00      	nop
 80063c0:	e000      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80063c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063c4:	7dfb      	ldrb	r3, [r7, #23]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10c      	bne.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80063ca:	4b05      	ldr	r3, [pc, #20]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80063cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80063d8:	4901      	ldr	r1, [pc, #4]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	658b      	str	r3, [r1, #88]	; 0x58
 80063de:	e003      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80063e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e4:	7dfb      	ldrb	r3, [r7, #23]
 80063e6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d02f      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063fc:	d00e      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x584>
 80063fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006402:	d814      	bhi.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006404:	2b00      	cmp	r3, #0
 8006406:	d015      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006408:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800640c:	d10f      	bne.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800640e:	4baf      	ldr	r3, [pc, #700]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006412:	4aae      	ldr	r2, [pc, #696]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006418:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800641a:	e00c      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	3304      	adds	r3, #4
 8006420:	2101      	movs	r1, #1
 8006422:	4618      	mov	r0, r3
 8006424:	f000 fc7e 	bl	8006d24 <RCCEx_PLL2_Config>
 8006428:	4603      	mov	r3, r0
 800642a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800642c:	e003      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	75fb      	strb	r3, [r7, #23]
      break;
 8006432:	e000      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8006434:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006436:	7dfb      	ldrb	r3, [r7, #23]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d109      	bne.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800643c:	4ba3      	ldr	r3, [pc, #652]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800643e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006440:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006448:	49a0      	ldr	r1, [pc, #640]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800644a:	4313      	orrs	r3, r2
 800644c:	650b      	str	r3, [r1, #80]	; 0x50
 800644e:	e001      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006450:	7dfb      	ldrb	r3, [r7, #23]
 8006452:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d032      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006464:	2b03      	cmp	r3, #3
 8006466:	d81b      	bhi.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006468:	a201      	add	r2, pc, #4	; (adr r2, 8006470 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800646a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646e:	bf00      	nop
 8006470:	080064a7 	.word	0x080064a7
 8006474:	08006481 	.word	0x08006481
 8006478:	0800648f 	.word	0x0800648f
 800647c:	080064a7 	.word	0x080064a7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006480:	4b92      	ldr	r3, [pc, #584]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006484:	4a91      	ldr	r2, [pc, #580]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800648a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800648c:	e00c      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	3304      	adds	r3, #4
 8006492:	2102      	movs	r1, #2
 8006494:	4618      	mov	r0, r3
 8006496:	f000 fc45 	bl	8006d24 <RCCEx_PLL2_Config>
 800649a:	4603      	mov	r3, r0
 800649c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800649e:	e003      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	75fb      	strb	r3, [r7, #23]
      break;
 80064a4:	e000      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80064a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064a8:	7dfb      	ldrb	r3, [r7, #23]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d109      	bne.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80064ae:	4b87      	ldr	r3, [pc, #540]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80064b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064b2:	f023 0203 	bic.w	r2, r3, #3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ba:	4984      	ldr	r1, [pc, #528]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	64cb      	str	r3, [r1, #76]	; 0x4c
 80064c0:	e001      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c2:	7dfb      	ldrb	r3, [r7, #23]
 80064c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f000 8086 	beq.w	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064d4:	4b7e      	ldr	r3, [pc, #504]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a7d      	ldr	r2, [pc, #500]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80064da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064e0:	f7fc fae4 	bl	8002aac <HAL_GetTick>
 80064e4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064e6:	e009      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064e8:	f7fc fae0 	bl	8002aac <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	2b64      	cmp	r3, #100	; 0x64
 80064f4:	d902      	bls.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	75fb      	strb	r3, [r7, #23]
        break;
 80064fa:	e005      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064fc:	4b74      	ldr	r3, [pc, #464]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006504:	2b00      	cmp	r3, #0
 8006506:	d0ef      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006508:	7dfb      	ldrb	r3, [r7, #23]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d166      	bne.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800650e:	4b6f      	ldr	r3, [pc, #444]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006510:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006518:	4053      	eors	r3, r2
 800651a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800651e:	2b00      	cmp	r3, #0
 8006520:	d013      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006522:	4b6a      	ldr	r3, [pc, #424]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800652a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800652c:	4b67      	ldr	r3, [pc, #412]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800652e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006530:	4a66      	ldr	r2, [pc, #408]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006536:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006538:	4b64      	ldr	r3, [pc, #400]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800653a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800653c:	4a63      	ldr	r2, [pc, #396]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800653e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006542:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006544:	4a61      	ldr	r2, [pc, #388]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006554:	d115      	bne.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006556:	f7fc faa9 	bl	8002aac <HAL_GetTick>
 800655a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800655c:	e00b      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800655e:	f7fc faa5 	bl	8002aac <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	f241 3288 	movw	r2, #5000	; 0x1388
 800656c:	4293      	cmp	r3, r2
 800656e:	d902      	bls.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	75fb      	strb	r3, [r7, #23]
            break;
 8006574:	e005      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006576:	4b55      	ldr	r3, [pc, #340]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d0ed      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006582:	7dfb      	ldrb	r3, [r7, #23]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d126      	bne.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800658e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006592:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006596:	d10d      	bne.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006598:	4b4c      	ldr	r3, [pc, #304]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80065a6:	0919      	lsrs	r1, r3, #4
 80065a8:	4b4a      	ldr	r3, [pc, #296]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80065aa:	400b      	ands	r3, r1
 80065ac:	4947      	ldr	r1, [pc, #284]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	610b      	str	r3, [r1, #16]
 80065b2:	e005      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80065b4:	4b45      	ldr	r3, [pc, #276]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	4a44      	ldr	r2, [pc, #272]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065ba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80065be:	6113      	str	r3, [r2, #16]
 80065c0:	4b42      	ldr	r3, [pc, #264]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80065ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065ce:	493f      	ldr	r1, [pc, #252]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	670b      	str	r3, [r1, #112]	; 0x70
 80065d4:	e004      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065d6:	7dfb      	ldrb	r3, [r7, #23]
 80065d8:	75bb      	strb	r3, [r7, #22]
 80065da:	e001      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065dc:	7dfb      	ldrb	r3, [r7, #23]
 80065de:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 8085 	beq.w	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065f2:	2b28      	cmp	r3, #40	; 0x28
 80065f4:	d866      	bhi.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80065f6:	a201      	add	r2, pc, #4	; (adr r2, 80065fc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80065f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fc:	080066d9 	.word	0x080066d9
 8006600:	080066c5 	.word	0x080066c5
 8006604:	080066c5 	.word	0x080066c5
 8006608:	080066c5 	.word	0x080066c5
 800660c:	080066c5 	.word	0x080066c5
 8006610:	080066c5 	.word	0x080066c5
 8006614:	080066c5 	.word	0x080066c5
 8006618:	080066c5 	.word	0x080066c5
 800661c:	080066a1 	.word	0x080066a1
 8006620:	080066c5 	.word	0x080066c5
 8006624:	080066c5 	.word	0x080066c5
 8006628:	080066c5 	.word	0x080066c5
 800662c:	080066c5 	.word	0x080066c5
 8006630:	080066c5 	.word	0x080066c5
 8006634:	080066c5 	.word	0x080066c5
 8006638:	080066c5 	.word	0x080066c5
 800663c:	080066b3 	.word	0x080066b3
 8006640:	080066c5 	.word	0x080066c5
 8006644:	080066c5 	.word	0x080066c5
 8006648:	080066c5 	.word	0x080066c5
 800664c:	080066c5 	.word	0x080066c5
 8006650:	080066c5 	.word	0x080066c5
 8006654:	080066c5 	.word	0x080066c5
 8006658:	080066c5 	.word	0x080066c5
 800665c:	080066d9 	.word	0x080066d9
 8006660:	080066c5 	.word	0x080066c5
 8006664:	080066c5 	.word	0x080066c5
 8006668:	080066c5 	.word	0x080066c5
 800666c:	080066c5 	.word	0x080066c5
 8006670:	080066c5 	.word	0x080066c5
 8006674:	080066c5 	.word	0x080066c5
 8006678:	080066c5 	.word	0x080066c5
 800667c:	080066d9 	.word	0x080066d9
 8006680:	080066c5 	.word	0x080066c5
 8006684:	080066c5 	.word	0x080066c5
 8006688:	080066c5 	.word	0x080066c5
 800668c:	080066c5 	.word	0x080066c5
 8006690:	080066c5 	.word	0x080066c5
 8006694:	080066c5 	.word	0x080066c5
 8006698:	080066c5 	.word	0x080066c5
 800669c:	080066d9 	.word	0x080066d9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	3304      	adds	r3, #4
 80066a4:	2101      	movs	r1, #1
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 fb3c 	bl	8006d24 <RCCEx_PLL2_Config>
 80066ac:	4603      	mov	r3, r0
 80066ae:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80066b0:	e013      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	3324      	adds	r3, #36	; 0x24
 80066b6:	2101      	movs	r1, #1
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 fbe5 	bl	8006e88 <RCCEx_PLL3_Config>
 80066be:	4603      	mov	r3, r0
 80066c0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80066c2:	e00a      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	75fb      	strb	r3, [r7, #23]
      break;
 80066c8:	e007      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x842>
 80066ca:	bf00      	nop
 80066cc:	58024400 	.word	0x58024400
 80066d0:	58024800 	.word	0x58024800
 80066d4:	00ffffcf 	.word	0x00ffffcf
      break;
 80066d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066da:	7dfb      	ldrb	r3, [r7, #23]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d109      	bne.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80066e0:	4b96      	ldr	r3, [pc, #600]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80066e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066ec:	4993      	ldr	r1, [pc, #588]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	654b      	str	r3, [r1, #84]	; 0x54
 80066f2:	e001      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f4:	7dfb      	ldrb	r3, [r7, #23]
 80066f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d038      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006708:	2b05      	cmp	r3, #5
 800670a:	d821      	bhi.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800670c:	a201      	add	r2, pc, #4	; (adr r2, 8006714 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800670e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006712:	bf00      	nop
 8006714:	08006757 	.word	0x08006757
 8006718:	0800672d 	.word	0x0800672d
 800671c:	0800673f 	.word	0x0800673f
 8006720:	08006757 	.word	0x08006757
 8006724:	08006757 	.word	0x08006757
 8006728:	08006757 	.word	0x08006757
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	3304      	adds	r3, #4
 8006730:	2101      	movs	r1, #1
 8006732:	4618      	mov	r0, r3
 8006734:	f000 faf6 	bl	8006d24 <RCCEx_PLL2_Config>
 8006738:	4603      	mov	r3, r0
 800673a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800673c:	e00c      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	3324      	adds	r3, #36	; 0x24
 8006742:	2101      	movs	r1, #1
 8006744:	4618      	mov	r0, r3
 8006746:	f000 fb9f 	bl	8006e88 <RCCEx_PLL3_Config>
 800674a:	4603      	mov	r3, r0
 800674c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800674e:	e003      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	75fb      	strb	r3, [r7, #23]
      break;
 8006754:	e000      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8006756:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006758:	7dfb      	ldrb	r3, [r7, #23]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d109      	bne.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800675e:	4b77      	ldr	r3, [pc, #476]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006762:	f023 0207 	bic.w	r2, r3, #7
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800676a:	4974      	ldr	r1, [pc, #464]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800676c:	4313      	orrs	r3, r2
 800676e:	654b      	str	r3, [r1, #84]	; 0x54
 8006770:	e001      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006772:	7dfb      	ldrb	r3, [r7, #23]
 8006774:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0304 	and.w	r3, r3, #4
 800677e:	2b00      	cmp	r3, #0
 8006780:	d03a      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006788:	2b05      	cmp	r3, #5
 800678a:	d821      	bhi.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800678c:	a201      	add	r2, pc, #4	; (adr r2, 8006794 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800678e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006792:	bf00      	nop
 8006794:	080067d7 	.word	0x080067d7
 8006798:	080067ad 	.word	0x080067ad
 800679c:	080067bf 	.word	0x080067bf
 80067a0:	080067d7 	.word	0x080067d7
 80067a4:	080067d7 	.word	0x080067d7
 80067a8:	080067d7 	.word	0x080067d7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	3304      	adds	r3, #4
 80067b0:	2101      	movs	r1, #1
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 fab6 	bl	8006d24 <RCCEx_PLL2_Config>
 80067b8:	4603      	mov	r3, r0
 80067ba:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80067bc:	e00c      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	3324      	adds	r3, #36	; 0x24
 80067c2:	2101      	movs	r1, #1
 80067c4:	4618      	mov	r0, r3
 80067c6:	f000 fb5f 	bl	8006e88 <RCCEx_PLL3_Config>
 80067ca:	4603      	mov	r3, r0
 80067cc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80067ce:	e003      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	75fb      	strb	r3, [r7, #23]
      break;
 80067d4:	e000      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80067d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067d8:	7dfb      	ldrb	r3, [r7, #23]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10a      	bne.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067de:	4b57      	ldr	r3, [pc, #348]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80067e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e2:	f023 0207 	bic.w	r2, r3, #7
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ec:	4953      	ldr	r1, [pc, #332]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	658b      	str	r3, [r1, #88]	; 0x58
 80067f2:	e001      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f4:	7dfb      	ldrb	r3, [r7, #23]
 80067f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0320 	and.w	r3, r3, #32
 8006800:	2b00      	cmp	r3, #0
 8006802:	d04b      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800680a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800680e:	d02e      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006810:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006814:	d828      	bhi.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800681a:	d02a      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800681c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006820:	d822      	bhi.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006822:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006826:	d026      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006828:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800682c:	d81c      	bhi.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800682e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006832:	d010      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8006834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006838:	d816      	bhi.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800683a:	2b00      	cmp	r3, #0
 800683c:	d01d      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800683e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006842:	d111      	bne.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	3304      	adds	r3, #4
 8006848:	2100      	movs	r1, #0
 800684a:	4618      	mov	r0, r3
 800684c:	f000 fa6a 	bl	8006d24 <RCCEx_PLL2_Config>
 8006850:	4603      	mov	r3, r0
 8006852:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006854:	e012      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	3324      	adds	r3, #36	; 0x24
 800685a:	2102      	movs	r1, #2
 800685c:	4618      	mov	r0, r3
 800685e:	f000 fb13 	bl	8006e88 <RCCEx_PLL3_Config>
 8006862:	4603      	mov	r3, r0
 8006864:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006866:	e009      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	75fb      	strb	r3, [r7, #23]
      break;
 800686c:	e006      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800686e:	bf00      	nop
 8006870:	e004      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006872:	bf00      	nop
 8006874:	e002      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006876:	bf00      	nop
 8006878:	e000      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800687a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800687c:	7dfb      	ldrb	r3, [r7, #23]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10a      	bne.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006882:	4b2e      	ldr	r3, [pc, #184]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006886:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006890:	492a      	ldr	r1, [pc, #168]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006892:	4313      	orrs	r3, r2
 8006894:	654b      	str	r3, [r1, #84]	; 0x54
 8006896:	e001      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006898:	7dfb      	ldrb	r3, [r7, #23]
 800689a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d04d      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80068b2:	d02e      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80068b4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80068b8:	d828      	bhi.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80068ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068be:	d02a      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80068c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c4:	d822      	bhi.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80068c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068ca:	d026      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80068cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068d0:	d81c      	bhi.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80068d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068d6:	d010      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80068d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068dc:	d816      	bhi.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d01d      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80068e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e6:	d111      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	3304      	adds	r3, #4
 80068ec:	2100      	movs	r1, #0
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 fa18 	bl	8006d24 <RCCEx_PLL2_Config>
 80068f4:	4603      	mov	r3, r0
 80068f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80068f8:	e012      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	3324      	adds	r3, #36	; 0x24
 80068fe:	2102      	movs	r1, #2
 8006900:	4618      	mov	r0, r3
 8006902:	f000 fac1 	bl	8006e88 <RCCEx_PLL3_Config>
 8006906:	4603      	mov	r3, r0
 8006908:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800690a:	e009      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	75fb      	strb	r3, [r7, #23]
      break;
 8006910:	e006      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006912:	bf00      	nop
 8006914:	e004      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006916:	bf00      	nop
 8006918:	e002      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800691a:	bf00      	nop
 800691c:	e000      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800691e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006920:	7dfb      	ldrb	r3, [r7, #23]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10c      	bne.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006926:	4b05      	ldr	r3, [pc, #20]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800692a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006934:	4901      	ldr	r1, [pc, #4]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006936:	4313      	orrs	r3, r2
 8006938:	658b      	str	r3, [r1, #88]	; 0x58
 800693a:	e003      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800693c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006940:	7dfb      	ldrb	r3, [r7, #23]
 8006942:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694c:	2b00      	cmp	r3, #0
 800694e:	d04b      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006956:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800695a:	d02e      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800695c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006960:	d828      	bhi.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006966:	d02a      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800696c:	d822      	bhi.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800696e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006972:	d026      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006974:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006978:	d81c      	bhi.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800697a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800697e:	d010      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006980:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006984:	d816      	bhi.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006986:	2b00      	cmp	r3, #0
 8006988:	d01d      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800698a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800698e:	d111      	bne.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	3304      	adds	r3, #4
 8006994:	2100      	movs	r1, #0
 8006996:	4618      	mov	r0, r3
 8006998:	f000 f9c4 	bl	8006d24 <RCCEx_PLL2_Config>
 800699c:	4603      	mov	r3, r0
 800699e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80069a0:	e012      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	3324      	adds	r3, #36	; 0x24
 80069a6:	2102      	movs	r1, #2
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 fa6d 	bl	8006e88 <RCCEx_PLL3_Config>
 80069ae:	4603      	mov	r3, r0
 80069b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80069b2:	e009      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	75fb      	strb	r3, [r7, #23]
      break;
 80069b8:	e006      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80069ba:	bf00      	nop
 80069bc:	e004      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80069be:	bf00      	nop
 80069c0:	e002      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80069c2:	bf00      	nop
 80069c4:	e000      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80069c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069c8:	7dfb      	ldrb	r3, [r7, #23]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10a      	bne.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80069ce:	4b9d      	ldr	r3, [pc, #628]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80069d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069dc:	4999      	ldr	r1, [pc, #612]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	658b      	str	r3, [r1, #88]	; 0x58
 80069e2:	e001      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e4:	7dfb      	ldrb	r3, [r7, #23]
 80069e6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0308 	and.w	r3, r3, #8
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d01a      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069fe:	d10a      	bne.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	3324      	adds	r3, #36	; 0x24
 8006a04:	2102      	movs	r1, #2
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 fa3e 	bl	8006e88 <RCCEx_PLL3_Config>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006a16:	4b8b      	ldr	r3, [pc, #556]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a1a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a24:	4987      	ldr	r1, [pc, #540]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0310 	and.w	r3, r3, #16
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d01a      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a40:	d10a      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	3324      	adds	r3, #36	; 0x24
 8006a46:	2102      	movs	r1, #2
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 fa1d 	bl	8006e88 <RCCEx_PLL3_Config>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006a58:	4b7a      	ldr	r3, [pc, #488]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a66:	4977      	ldr	r1, [pc, #476]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d034      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a82:	d01d      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006a84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a88:	d817      	bhi.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a92:	d009      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006a94:	e011      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	3304      	adds	r3, #4
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f000 f941 	bl	8006d24 <RCCEx_PLL2_Config>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006aa6:	e00c      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3324      	adds	r3, #36	; 0x24
 8006aac:	2102      	movs	r1, #2
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 f9ea 	bl	8006e88 <RCCEx_PLL3_Config>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006ab8:	e003      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	75fb      	strb	r3, [r7, #23]
      break;
 8006abe:	e000      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006ac0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ac2:	7dfb      	ldrb	r3, [r7, #23]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10a      	bne.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ac8:	4b5e      	ldr	r3, [pc, #376]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006acc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ad6:	495b      	ldr	r1, [pc, #364]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	658b      	str	r3, [r1, #88]	; 0x58
 8006adc:	e001      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ade:	7dfb      	ldrb	r3, [r7, #23]
 8006ae0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d033      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006af4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006af8:	d01c      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8006afa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006afe:	d816      	bhi.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006b00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b04:	d003      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006b06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b0a:	d007      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006b0c:	e00f      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b0e:	4b4d      	ldr	r3, [pc, #308]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b12:	4a4c      	ldr	r2, [pc, #304]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006b1a:	e00c      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	3324      	adds	r3, #36	; 0x24
 8006b20:	2101      	movs	r1, #1
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 f9b0 	bl	8006e88 <RCCEx_PLL3_Config>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006b2c:	e003      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	75fb      	strb	r3, [r7, #23]
      break;
 8006b32:	e000      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8006b34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b36:	7dfb      	ldrb	r3, [r7, #23]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10a      	bne.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b3c:	4b41      	ldr	r3, [pc, #260]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b4a:	493e      	ldr	r1, [pc, #248]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	654b      	str	r3, [r1, #84]	; 0x54
 8006b50:	e001      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b52:	7dfb      	ldrb	r3, [r7, #23]
 8006b54:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d029      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b6e:	d007      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006b70:	e00f      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b72:	4b34      	ldr	r3, [pc, #208]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b76:	4a33      	ldr	r2, [pc, #204]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006b7e:	e00b      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	3304      	adds	r3, #4
 8006b84:	2102      	movs	r1, #2
 8006b86:	4618      	mov	r0, r3
 8006b88:	f000 f8cc 	bl	8006d24 <RCCEx_PLL2_Config>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006b90:	e002      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	75fb      	strb	r3, [r7, #23]
      break;
 8006b96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b98:	7dfb      	ldrb	r3, [r7, #23]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d109      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006b9e:	4b29      	ldr	r3, [pc, #164]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ba2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006baa:	4926      	ldr	r1, [pc, #152]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006bac:	4313      	orrs	r3, r2
 8006bae:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006bb0:	e001      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb2:	7dfb      	ldrb	r3, [r7, #23]
 8006bb4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00a      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	3324      	adds	r3, #36	; 0x24
 8006bc6:	2102      	movs	r1, #2
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f000 f95d 	bl	8006e88 <RCCEx_PLL3_Config>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d001      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d033      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006be8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bec:	d017      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006bee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bf2:	d811      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bf8:	d013      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006bfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bfe:	d80b      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d010      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8006c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c08:	d106      	bne.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c0a:	4b0e      	ldr	r3, [pc, #56]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0e:	4a0d      	ldr	r2, [pc, #52]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006c16:	e007      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c1c:	e004      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006c1e:	bf00      	nop
 8006c20:	e002      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006c22:	bf00      	nop
 8006c24:	e000      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006c26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c28:	7dfb      	ldrb	r3, [r7, #23]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10c      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c2e:	4b05      	ldr	r3, [pc, #20]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c3a:	4902      	ldr	r1, [pc, #8]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	654b      	str	r3, [r1, #84]	; 0x54
 8006c40:	e004      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8006c42:	bf00      	nop
 8006c44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
 8006c4a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d008      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006c58:	4b31      	ldr	r3, [pc, #196]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c64:	492e      	ldr	r1, [pc, #184]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d009      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006c76:	4b2a      	ldr	r3, [pc, #168]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006c84:	4926      	ldr	r1, [pc, #152]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d008      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c96:	4b22      	ldr	r3, [pc, #136]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c9a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ca2:	491f      	ldr	r1, [pc, #124]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00d      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006cb4:	4b1a      	ldr	r3, [pc, #104]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	4a19      	ldr	r2, [pc, #100]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006cba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cbe:	6113      	str	r3, [r2, #16]
 8006cc0:	4b17      	ldr	r3, [pc, #92]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006cc2:	691a      	ldr	r2, [r3, #16]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006cca:	4915      	ldr	r1, [pc, #84]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	da08      	bge.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006cd8:	4b11      	ldr	r3, [pc, #68]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cdc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce4:	490e      	ldr	r1, [pc, #56]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d009      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006cf6:	4b0a      	ldr	r3, [pc, #40]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cfa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d04:	4906      	ldr	r1, [pc, #24]	; (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006d0a:	7dbb      	ldrb	r3, [r7, #22]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006d10:	2300      	movs	r3, #0
 8006d12:	e000      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3718      	adds	r7, #24
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	58024400 	.word	0x58024400

08006d24 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d32:	4b53      	ldr	r3, [pc, #332]	; (8006e80 <RCCEx_PLL2_Config+0x15c>)
 8006d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d36:	f003 0303 	and.w	r3, r3, #3
 8006d3a:	2b03      	cmp	r3, #3
 8006d3c:	d101      	bne.n	8006d42 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e099      	b.n	8006e76 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006d42:	4b4f      	ldr	r3, [pc, #316]	; (8006e80 <RCCEx_PLL2_Config+0x15c>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a4e      	ldr	r2, [pc, #312]	; (8006e80 <RCCEx_PLL2_Config+0x15c>)
 8006d48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d4e:	f7fb fead 	bl	8002aac <HAL_GetTick>
 8006d52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d54:	e008      	b.n	8006d68 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006d56:	f7fb fea9 	bl	8002aac <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d901      	bls.n	8006d68 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e086      	b.n	8006e76 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d68:	4b45      	ldr	r3, [pc, #276]	; (8006e80 <RCCEx_PLL2_Config+0x15c>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1f0      	bne.n	8006d56 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006d74:	4b42      	ldr	r3, [pc, #264]	; (8006e80 <RCCEx_PLL2_Config+0x15c>)
 8006d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	031b      	lsls	r3, r3, #12
 8006d82:	493f      	ldr	r1, [pc, #252]	; (8006e80 <RCCEx_PLL2_Config+0x15c>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	628b      	str	r3, [r1, #40]	; 0x28
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	3b01      	subs	r3, #1
 8006d98:	025b      	lsls	r3, r3, #9
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	431a      	orrs	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	3b01      	subs	r3, #1
 8006da4:	041b      	lsls	r3, r3, #16
 8006da6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006daa:	431a      	orrs	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	3b01      	subs	r3, #1
 8006db2:	061b      	lsls	r3, r3, #24
 8006db4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006db8:	4931      	ldr	r1, [pc, #196]	; (8006e80 <RCCEx_PLL2_Config+0x15c>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006dbe:	4b30      	ldr	r3, [pc, #192]	; (8006e80 <RCCEx_PLL2_Config+0x15c>)
 8006dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	492d      	ldr	r1, [pc, #180]	; (8006e80 <RCCEx_PLL2_Config+0x15c>)
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006dd0:	4b2b      	ldr	r3, [pc, #172]	; (8006e80 <RCCEx_PLL2_Config+0x15c>)
 8006dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd4:	f023 0220 	bic.w	r2, r3, #32
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	4928      	ldr	r1, [pc, #160]	; (8006e80 <RCCEx_PLL2_Config+0x15c>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006de2:	4b27      	ldr	r3, [pc, #156]	; (8006e80 <RCCEx_PLL2_Config+0x15c>)
 8006de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de6:	4a26      	ldr	r2, [pc, #152]	; (8006e80 <RCCEx_PLL2_Config+0x15c>)
 8006de8:	f023 0310 	bic.w	r3, r3, #16
 8006dec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006dee:	4b24      	ldr	r3, [pc, #144]	; (8006e80 <RCCEx_PLL2_Config+0x15c>)
 8006df0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006df2:	4b24      	ldr	r3, [pc, #144]	; (8006e84 <RCCEx_PLL2_Config+0x160>)
 8006df4:	4013      	ands	r3, r2
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	69d2      	ldr	r2, [r2, #28]
 8006dfa:	00d2      	lsls	r2, r2, #3
 8006dfc:	4920      	ldr	r1, [pc, #128]	; (8006e80 <RCCEx_PLL2_Config+0x15c>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006e02:	4b1f      	ldr	r3, [pc, #124]	; (8006e80 <RCCEx_PLL2_Config+0x15c>)
 8006e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e06:	4a1e      	ldr	r2, [pc, #120]	; (8006e80 <RCCEx_PLL2_Config+0x15c>)
 8006e08:	f043 0310 	orr.w	r3, r3, #16
 8006e0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d106      	bne.n	8006e22 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006e14:	4b1a      	ldr	r3, [pc, #104]	; (8006e80 <RCCEx_PLL2_Config+0x15c>)
 8006e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e18:	4a19      	ldr	r2, [pc, #100]	; (8006e80 <RCCEx_PLL2_Config+0x15c>)
 8006e1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e20:	e00f      	b.n	8006e42 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d106      	bne.n	8006e36 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006e28:	4b15      	ldr	r3, [pc, #84]	; (8006e80 <RCCEx_PLL2_Config+0x15c>)
 8006e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2c:	4a14      	ldr	r2, [pc, #80]	; (8006e80 <RCCEx_PLL2_Config+0x15c>)
 8006e2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e34:	e005      	b.n	8006e42 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006e36:	4b12      	ldr	r3, [pc, #72]	; (8006e80 <RCCEx_PLL2_Config+0x15c>)
 8006e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3a:	4a11      	ldr	r2, [pc, #68]	; (8006e80 <RCCEx_PLL2_Config+0x15c>)
 8006e3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006e42:	4b0f      	ldr	r3, [pc, #60]	; (8006e80 <RCCEx_PLL2_Config+0x15c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a0e      	ldr	r2, [pc, #56]	; (8006e80 <RCCEx_PLL2_Config+0x15c>)
 8006e48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e4e:	f7fb fe2d 	bl	8002aac <HAL_GetTick>
 8006e52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e54:	e008      	b.n	8006e68 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006e56:	f7fb fe29 	bl	8002aac <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d901      	bls.n	8006e68 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e006      	b.n	8006e76 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e68:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <RCCEx_PLL2_Config+0x15c>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d0f0      	beq.n	8006e56 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	58024400 	.word	0x58024400
 8006e84:	ffff0007 	.word	0xffff0007

08006e88 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e92:	2300      	movs	r3, #0
 8006e94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e96:	4b53      	ldr	r3, [pc, #332]	; (8006fe4 <RCCEx_PLL3_Config+0x15c>)
 8006e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9a:	f003 0303 	and.w	r3, r3, #3
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d101      	bne.n	8006ea6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e099      	b.n	8006fda <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006ea6:	4b4f      	ldr	r3, [pc, #316]	; (8006fe4 <RCCEx_PLL3_Config+0x15c>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a4e      	ldr	r2, [pc, #312]	; (8006fe4 <RCCEx_PLL3_Config+0x15c>)
 8006eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006eb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eb2:	f7fb fdfb 	bl	8002aac <HAL_GetTick>
 8006eb6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006eb8:	e008      	b.n	8006ecc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006eba:	f7fb fdf7 	bl	8002aac <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d901      	bls.n	8006ecc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e086      	b.n	8006fda <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ecc:	4b45      	ldr	r3, [pc, #276]	; (8006fe4 <RCCEx_PLL3_Config+0x15c>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1f0      	bne.n	8006eba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006ed8:	4b42      	ldr	r3, [pc, #264]	; (8006fe4 <RCCEx_PLL3_Config+0x15c>)
 8006eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006edc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	051b      	lsls	r3, r3, #20
 8006ee6:	493f      	ldr	r1, [pc, #252]	; (8006fe4 <RCCEx_PLL3_Config+0x15c>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	628b      	str	r3, [r1, #40]	; 0x28
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	3b01      	subs	r3, #1
 8006efc:	025b      	lsls	r3, r3, #9
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	431a      	orrs	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	3b01      	subs	r3, #1
 8006f08:	041b      	lsls	r3, r3, #16
 8006f0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	3b01      	subs	r3, #1
 8006f16:	061b      	lsls	r3, r3, #24
 8006f18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f1c:	4931      	ldr	r1, [pc, #196]	; (8006fe4 <RCCEx_PLL3_Config+0x15c>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006f22:	4b30      	ldr	r3, [pc, #192]	; (8006fe4 <RCCEx_PLL3_Config+0x15c>)
 8006f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	492d      	ldr	r1, [pc, #180]	; (8006fe4 <RCCEx_PLL3_Config+0x15c>)
 8006f30:	4313      	orrs	r3, r2
 8006f32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006f34:	4b2b      	ldr	r3, [pc, #172]	; (8006fe4 <RCCEx_PLL3_Config+0x15c>)
 8006f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	4928      	ldr	r1, [pc, #160]	; (8006fe4 <RCCEx_PLL3_Config+0x15c>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006f46:	4b27      	ldr	r3, [pc, #156]	; (8006fe4 <RCCEx_PLL3_Config+0x15c>)
 8006f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4a:	4a26      	ldr	r2, [pc, #152]	; (8006fe4 <RCCEx_PLL3_Config+0x15c>)
 8006f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006f52:	4b24      	ldr	r3, [pc, #144]	; (8006fe4 <RCCEx_PLL3_Config+0x15c>)
 8006f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f56:	4b24      	ldr	r3, [pc, #144]	; (8006fe8 <RCCEx_PLL3_Config+0x160>)
 8006f58:	4013      	ands	r3, r2
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	69d2      	ldr	r2, [r2, #28]
 8006f5e:	00d2      	lsls	r2, r2, #3
 8006f60:	4920      	ldr	r1, [pc, #128]	; (8006fe4 <RCCEx_PLL3_Config+0x15c>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006f66:	4b1f      	ldr	r3, [pc, #124]	; (8006fe4 <RCCEx_PLL3_Config+0x15c>)
 8006f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6a:	4a1e      	ldr	r2, [pc, #120]	; (8006fe4 <RCCEx_PLL3_Config+0x15c>)
 8006f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d106      	bne.n	8006f86 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006f78:	4b1a      	ldr	r3, [pc, #104]	; (8006fe4 <RCCEx_PLL3_Config+0x15c>)
 8006f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7c:	4a19      	ldr	r2, [pc, #100]	; (8006fe4 <RCCEx_PLL3_Config+0x15c>)
 8006f7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f84:	e00f      	b.n	8006fa6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d106      	bne.n	8006f9a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006f8c:	4b15      	ldr	r3, [pc, #84]	; (8006fe4 <RCCEx_PLL3_Config+0x15c>)
 8006f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f90:	4a14      	ldr	r2, [pc, #80]	; (8006fe4 <RCCEx_PLL3_Config+0x15c>)
 8006f92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f98:	e005      	b.n	8006fa6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006f9a:	4b12      	ldr	r3, [pc, #72]	; (8006fe4 <RCCEx_PLL3_Config+0x15c>)
 8006f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9e:	4a11      	ldr	r2, [pc, #68]	; (8006fe4 <RCCEx_PLL3_Config+0x15c>)
 8006fa0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fa4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006fa6:	4b0f      	ldr	r3, [pc, #60]	; (8006fe4 <RCCEx_PLL3_Config+0x15c>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a0e      	ldr	r2, [pc, #56]	; (8006fe4 <RCCEx_PLL3_Config+0x15c>)
 8006fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fb2:	f7fb fd7b 	bl	8002aac <HAL_GetTick>
 8006fb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006fb8:	e008      	b.n	8006fcc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006fba:	f7fb fd77 	bl	8002aac <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d901      	bls.n	8006fcc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e006      	b.n	8006fda <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006fcc:	4b05      	ldr	r3, [pc, #20]	; (8006fe4 <RCCEx_PLL3_Config+0x15c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d0f0      	beq.n	8006fba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	58024400 	.word	0x58024400
 8006fe8:	ffff0007 	.word	0xffff0007

08006fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e049      	b.n	8007092 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b00      	cmp	r3, #0
 8007008:	d106      	bne.n	8007018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7f9 fcdc 	bl	80009d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	3304      	adds	r3, #4
 8007028:	4619      	mov	r1, r3
 800702a:	4610      	mov	r0, r2
 800702c:	f000 ff0c 	bl	8007e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
	...

0800709c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d001      	beq.n	80070b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e04c      	b.n	800714e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2202      	movs	r2, #2
 80070b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a26      	ldr	r2, [pc, #152]	; (800715c <HAL_TIM_Base_Start+0xc0>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d022      	beq.n	800710c <HAL_TIM_Base_Start+0x70>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ce:	d01d      	beq.n	800710c <HAL_TIM_Base_Start+0x70>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a22      	ldr	r2, [pc, #136]	; (8007160 <HAL_TIM_Base_Start+0xc4>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d018      	beq.n	800710c <HAL_TIM_Base_Start+0x70>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a21      	ldr	r2, [pc, #132]	; (8007164 <HAL_TIM_Base_Start+0xc8>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d013      	beq.n	800710c <HAL_TIM_Base_Start+0x70>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a1f      	ldr	r2, [pc, #124]	; (8007168 <HAL_TIM_Base_Start+0xcc>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d00e      	beq.n	800710c <HAL_TIM_Base_Start+0x70>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a1e      	ldr	r2, [pc, #120]	; (800716c <HAL_TIM_Base_Start+0xd0>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d009      	beq.n	800710c <HAL_TIM_Base_Start+0x70>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a1c      	ldr	r2, [pc, #112]	; (8007170 <HAL_TIM_Base_Start+0xd4>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d004      	beq.n	800710c <HAL_TIM_Base_Start+0x70>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a1b      	ldr	r2, [pc, #108]	; (8007174 <HAL_TIM_Base_Start+0xd8>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d115      	bne.n	8007138 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689a      	ldr	r2, [r3, #8]
 8007112:	4b19      	ldr	r3, [pc, #100]	; (8007178 <HAL_TIM_Base_Start+0xdc>)
 8007114:	4013      	ands	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2b06      	cmp	r3, #6
 800711c:	d015      	beq.n	800714a <HAL_TIM_Base_Start+0xae>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007124:	d011      	beq.n	800714a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f042 0201 	orr.w	r2, r2, #1
 8007134:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007136:	e008      	b.n	800714a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f042 0201 	orr.w	r2, r2, #1
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	e000      	b.n	800714c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800714a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	40010000 	.word	0x40010000
 8007160:	40000400 	.word	0x40000400
 8007164:	40000800 	.word	0x40000800
 8007168:	40000c00 	.word	0x40000c00
 800716c:	40010400 	.word	0x40010400
 8007170:	40001800 	.word	0x40001800
 8007174:	40014000 	.word	0x40014000
 8007178:	00010007 	.word	0x00010007

0800717c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b01      	cmp	r3, #1
 800718e:	d001      	beq.n	8007194 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e054      	b.n	800723e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2202      	movs	r2, #2
 8007198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68da      	ldr	r2, [r3, #12]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f042 0201 	orr.w	r2, r2, #1
 80071aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a26      	ldr	r2, [pc, #152]	; (800724c <HAL_TIM_Base_Start_IT+0xd0>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d022      	beq.n	80071fc <HAL_TIM_Base_Start_IT+0x80>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071be:	d01d      	beq.n	80071fc <HAL_TIM_Base_Start_IT+0x80>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a22      	ldr	r2, [pc, #136]	; (8007250 <HAL_TIM_Base_Start_IT+0xd4>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d018      	beq.n	80071fc <HAL_TIM_Base_Start_IT+0x80>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a21      	ldr	r2, [pc, #132]	; (8007254 <HAL_TIM_Base_Start_IT+0xd8>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d013      	beq.n	80071fc <HAL_TIM_Base_Start_IT+0x80>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a1f      	ldr	r2, [pc, #124]	; (8007258 <HAL_TIM_Base_Start_IT+0xdc>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d00e      	beq.n	80071fc <HAL_TIM_Base_Start_IT+0x80>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a1e      	ldr	r2, [pc, #120]	; (800725c <HAL_TIM_Base_Start_IT+0xe0>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d009      	beq.n	80071fc <HAL_TIM_Base_Start_IT+0x80>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a1c      	ldr	r2, [pc, #112]	; (8007260 <HAL_TIM_Base_Start_IT+0xe4>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d004      	beq.n	80071fc <HAL_TIM_Base_Start_IT+0x80>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a1b      	ldr	r2, [pc, #108]	; (8007264 <HAL_TIM_Base_Start_IT+0xe8>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d115      	bne.n	8007228 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689a      	ldr	r2, [r3, #8]
 8007202:	4b19      	ldr	r3, [pc, #100]	; (8007268 <HAL_TIM_Base_Start_IT+0xec>)
 8007204:	4013      	ands	r3, r2
 8007206:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2b06      	cmp	r3, #6
 800720c:	d015      	beq.n	800723a <HAL_TIM_Base_Start_IT+0xbe>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007214:	d011      	beq.n	800723a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f042 0201 	orr.w	r2, r2, #1
 8007224:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007226:	e008      	b.n	800723a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f042 0201 	orr.w	r2, r2, #1
 8007236:	601a      	str	r2, [r3, #0]
 8007238:	e000      	b.n	800723c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800723a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3714      	adds	r7, #20
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	40010000 	.word	0x40010000
 8007250:	40000400 	.word	0x40000400
 8007254:	40000800 	.word	0x40000800
 8007258:	40000c00 	.word	0x40000c00
 800725c:	40010400 	.word	0x40010400
 8007260:	40001800 	.word	0x40001800
 8007264:	40014000 	.word	0x40014000
 8007268:	00010007 	.word	0x00010007

0800726c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e049      	b.n	8007312 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d106      	bne.n	8007298 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7f9 fb2a 	bl	80008ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2202      	movs	r2, #2
 800729c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3304      	adds	r3, #4
 80072a8:	4619      	mov	r1, r3
 80072aa:	4610      	mov	r0, r2
 80072ac:	f000 fdcc 	bl	8007e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
	...

0800731c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d109      	bne.n	8007340 <HAL_TIM_PWM_Start+0x24>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b01      	cmp	r3, #1
 8007336:	bf14      	ite	ne
 8007338:	2301      	movne	r3, #1
 800733a:	2300      	moveq	r3, #0
 800733c:	b2db      	uxtb	r3, r3
 800733e:	e03c      	b.n	80073ba <HAL_TIM_PWM_Start+0x9e>
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	2b04      	cmp	r3, #4
 8007344:	d109      	bne.n	800735a <HAL_TIM_PWM_Start+0x3e>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b01      	cmp	r3, #1
 8007350:	bf14      	ite	ne
 8007352:	2301      	movne	r3, #1
 8007354:	2300      	moveq	r3, #0
 8007356:	b2db      	uxtb	r3, r3
 8007358:	e02f      	b.n	80073ba <HAL_TIM_PWM_Start+0x9e>
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	2b08      	cmp	r3, #8
 800735e:	d109      	bne.n	8007374 <HAL_TIM_PWM_Start+0x58>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b01      	cmp	r3, #1
 800736a:	bf14      	ite	ne
 800736c:	2301      	movne	r3, #1
 800736e:	2300      	moveq	r3, #0
 8007370:	b2db      	uxtb	r3, r3
 8007372:	e022      	b.n	80073ba <HAL_TIM_PWM_Start+0x9e>
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	2b0c      	cmp	r3, #12
 8007378:	d109      	bne.n	800738e <HAL_TIM_PWM_Start+0x72>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007380:	b2db      	uxtb	r3, r3
 8007382:	2b01      	cmp	r3, #1
 8007384:	bf14      	ite	ne
 8007386:	2301      	movne	r3, #1
 8007388:	2300      	moveq	r3, #0
 800738a:	b2db      	uxtb	r3, r3
 800738c:	e015      	b.n	80073ba <HAL_TIM_PWM_Start+0x9e>
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b10      	cmp	r3, #16
 8007392:	d109      	bne.n	80073a8 <HAL_TIM_PWM_Start+0x8c>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b01      	cmp	r3, #1
 800739e:	bf14      	ite	ne
 80073a0:	2301      	movne	r3, #1
 80073a2:	2300      	moveq	r3, #0
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	e008      	b.n	80073ba <HAL_TIM_PWM_Start+0x9e>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	bf14      	ite	ne
 80073b4:	2301      	movne	r3, #1
 80073b6:	2300      	moveq	r3, #0
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d001      	beq.n	80073c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e0a1      	b.n	8007506 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d104      	bne.n	80073d2 <HAL_TIM_PWM_Start+0xb6>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073d0:	e023      	b.n	800741a <HAL_TIM_PWM_Start+0xfe>
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b04      	cmp	r3, #4
 80073d6:	d104      	bne.n	80073e2 <HAL_TIM_PWM_Start+0xc6>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2202      	movs	r2, #2
 80073dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073e0:	e01b      	b.n	800741a <HAL_TIM_PWM_Start+0xfe>
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	2b08      	cmp	r3, #8
 80073e6:	d104      	bne.n	80073f2 <HAL_TIM_PWM_Start+0xd6>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073f0:	e013      	b.n	800741a <HAL_TIM_PWM_Start+0xfe>
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	2b0c      	cmp	r3, #12
 80073f6:	d104      	bne.n	8007402 <HAL_TIM_PWM_Start+0xe6>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2202      	movs	r2, #2
 80073fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007400:	e00b      	b.n	800741a <HAL_TIM_PWM_Start+0xfe>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2b10      	cmp	r3, #16
 8007406:	d104      	bne.n	8007412 <HAL_TIM_PWM_Start+0xf6>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2202      	movs	r2, #2
 800740c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007410:	e003      	b.n	800741a <HAL_TIM_PWM_Start+0xfe>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2202      	movs	r2, #2
 8007416:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2201      	movs	r2, #1
 8007420:	6839      	ldr	r1, [r7, #0]
 8007422:	4618      	mov	r0, r3
 8007424:	f001 f91e 	bl	8008664 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a38      	ldr	r2, [pc, #224]	; (8007510 <HAL_TIM_PWM_Start+0x1f4>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d013      	beq.n	800745a <HAL_TIM_PWM_Start+0x13e>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a37      	ldr	r2, [pc, #220]	; (8007514 <HAL_TIM_PWM_Start+0x1f8>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d00e      	beq.n	800745a <HAL_TIM_PWM_Start+0x13e>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a35      	ldr	r2, [pc, #212]	; (8007518 <HAL_TIM_PWM_Start+0x1fc>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d009      	beq.n	800745a <HAL_TIM_PWM_Start+0x13e>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a34      	ldr	r2, [pc, #208]	; (800751c <HAL_TIM_PWM_Start+0x200>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d004      	beq.n	800745a <HAL_TIM_PWM_Start+0x13e>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a32      	ldr	r2, [pc, #200]	; (8007520 <HAL_TIM_PWM_Start+0x204>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d101      	bne.n	800745e <HAL_TIM_PWM_Start+0x142>
 800745a:	2301      	movs	r3, #1
 800745c:	e000      	b.n	8007460 <HAL_TIM_PWM_Start+0x144>
 800745e:	2300      	movs	r3, #0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d007      	beq.n	8007474 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007472:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a25      	ldr	r2, [pc, #148]	; (8007510 <HAL_TIM_PWM_Start+0x1f4>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d022      	beq.n	80074c4 <HAL_TIM_PWM_Start+0x1a8>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007486:	d01d      	beq.n	80074c4 <HAL_TIM_PWM_Start+0x1a8>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a25      	ldr	r2, [pc, #148]	; (8007524 <HAL_TIM_PWM_Start+0x208>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d018      	beq.n	80074c4 <HAL_TIM_PWM_Start+0x1a8>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a24      	ldr	r2, [pc, #144]	; (8007528 <HAL_TIM_PWM_Start+0x20c>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d013      	beq.n	80074c4 <HAL_TIM_PWM_Start+0x1a8>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a22      	ldr	r2, [pc, #136]	; (800752c <HAL_TIM_PWM_Start+0x210>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d00e      	beq.n	80074c4 <HAL_TIM_PWM_Start+0x1a8>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a1a      	ldr	r2, [pc, #104]	; (8007514 <HAL_TIM_PWM_Start+0x1f8>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d009      	beq.n	80074c4 <HAL_TIM_PWM_Start+0x1a8>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a1e      	ldr	r2, [pc, #120]	; (8007530 <HAL_TIM_PWM_Start+0x214>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d004      	beq.n	80074c4 <HAL_TIM_PWM_Start+0x1a8>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a16      	ldr	r2, [pc, #88]	; (8007518 <HAL_TIM_PWM_Start+0x1fc>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d115      	bne.n	80074f0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	689a      	ldr	r2, [r3, #8]
 80074ca:	4b1a      	ldr	r3, [pc, #104]	; (8007534 <HAL_TIM_PWM_Start+0x218>)
 80074cc:	4013      	ands	r3, r2
 80074ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2b06      	cmp	r3, #6
 80074d4:	d015      	beq.n	8007502 <HAL_TIM_PWM_Start+0x1e6>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074dc:	d011      	beq.n	8007502 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f042 0201 	orr.w	r2, r2, #1
 80074ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074ee:	e008      	b.n	8007502 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f042 0201 	orr.w	r2, r2, #1
 80074fe:	601a      	str	r2, [r3, #0]
 8007500:	e000      	b.n	8007504 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007502:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	40010000 	.word	0x40010000
 8007514:	40010400 	.word	0x40010400
 8007518:	40014000 	.word	0x40014000
 800751c:	40014400 	.word	0x40014400
 8007520:	40014800 	.word	0x40014800
 8007524:	40000400 	.word	0x40000400
 8007528:	40000800 	.word	0x40000800
 800752c:	40000c00 	.word	0x40000c00
 8007530:	40001800 	.word	0x40001800
 8007534:	00010007 	.word	0x00010007

08007538 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e08f      	b.n	800766c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b00      	cmp	r3, #0
 8007556:	d106      	bne.n	8007566 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7f9 f9e3 	bl	800092c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2202      	movs	r2, #2
 800756a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	6899      	ldr	r1, [r3, #8]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	4b3e      	ldr	r3, [pc, #248]	; (8007674 <HAL_TIM_Encoder_Init+0x13c>)
 800757a:	400b      	ands	r3, r1
 800757c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	3304      	adds	r3, #4
 8007586:	4619      	mov	r1, r3
 8007588:	4610      	mov	r0, r2
 800758a:	f000 fc5d 	bl	8007e48 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	699b      	ldr	r3, [r3, #24]
 800759c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	6a1b      	ldr	r3, [r3, #32]
 80075a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	4b31      	ldr	r3, [pc, #196]	; (8007678 <HAL_TIM_Encoder_Init+0x140>)
 80075b4:	4013      	ands	r3, r2
 80075b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	689a      	ldr	r2, [r3, #8]
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	021b      	lsls	r3, r3, #8
 80075c2:	4313      	orrs	r3, r2
 80075c4:	693a      	ldr	r2, [r7, #16]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	4b2b      	ldr	r3, [pc, #172]	; (800767c <HAL_TIM_Encoder_Init+0x144>)
 80075ce:	4013      	ands	r3, r2
 80075d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80075d2:	693a      	ldr	r2, [r7, #16]
 80075d4:	4b2a      	ldr	r3, [pc, #168]	; (8007680 <HAL_TIM_Encoder_Init+0x148>)
 80075d6:	4013      	ands	r3, r2
 80075d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	68da      	ldr	r2, [r3, #12]
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	69db      	ldr	r3, [r3, #28]
 80075e2:	021b      	lsls	r3, r3, #8
 80075e4:	4313      	orrs	r3, r2
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	011a      	lsls	r2, r3, #4
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	031b      	lsls	r3, r3, #12
 80075f8:	4313      	orrs	r3, r2
 80075fa:	693a      	ldr	r2, [r7, #16]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007606:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800760e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	685a      	ldr	r2, [r3, #4]
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	011b      	lsls	r3, r3, #4
 800761a:	4313      	orrs	r3, r2
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	4313      	orrs	r3, r2
 8007620:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	697a      	ldr	r2, [r7, #20]
 8007628:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3718      	adds	r7, #24
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	fffebff8 	.word	0xfffebff8
 8007678:	fffffcfc 	.word	0xfffffcfc
 800767c:	fffff3f3 	.word	0xfffff3f3
 8007680:	ffff0f0f 	.word	0xffff0f0f

08007684 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007694:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800769c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076a4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076ac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d110      	bne.n	80076d6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d102      	bne.n	80076c0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80076ba:	7b7b      	ldrb	r3, [r7, #13]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d001      	beq.n	80076c4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e069      	b.n	8007798 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2202      	movs	r2, #2
 80076c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2202      	movs	r2, #2
 80076d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076d4:	e031      	b.n	800773a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	2b04      	cmp	r3, #4
 80076da:	d110      	bne.n	80076fe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80076dc:	7bbb      	ldrb	r3, [r7, #14]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d102      	bne.n	80076e8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80076e2:	7b3b      	ldrb	r3, [r7, #12]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d001      	beq.n	80076ec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e055      	b.n	8007798 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2202      	movs	r2, #2
 80076f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2202      	movs	r2, #2
 80076f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076fc:	e01d      	b.n	800773a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d108      	bne.n	8007716 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007704:	7bbb      	ldrb	r3, [r7, #14]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d105      	bne.n	8007716 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800770a:	7b7b      	ldrb	r3, [r7, #13]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d102      	bne.n	8007716 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007710:	7b3b      	ldrb	r3, [r7, #12]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d001      	beq.n	800771a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e03e      	b.n	8007798 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2202      	movs	r2, #2
 800771e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2202      	movs	r2, #2
 8007726:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2202      	movs	r2, #2
 800772e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2202      	movs	r2, #2
 8007736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d003      	beq.n	8007748 <HAL_TIM_Encoder_Start+0xc4>
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2b04      	cmp	r3, #4
 8007744:	d008      	beq.n	8007758 <HAL_TIM_Encoder_Start+0xd4>
 8007746:	e00f      	b.n	8007768 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2201      	movs	r2, #1
 800774e:	2100      	movs	r1, #0
 8007750:	4618      	mov	r0, r3
 8007752:	f000 ff87 	bl	8008664 <TIM_CCxChannelCmd>
      break;
 8007756:	e016      	b.n	8007786 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2201      	movs	r2, #1
 800775e:	2104      	movs	r1, #4
 8007760:	4618      	mov	r0, r3
 8007762:	f000 ff7f 	bl	8008664 <TIM_CCxChannelCmd>
      break;
 8007766:	e00e      	b.n	8007786 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2201      	movs	r2, #1
 800776e:	2100      	movs	r1, #0
 8007770:	4618      	mov	r0, r3
 8007772:	f000 ff77 	bl	8008664 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2201      	movs	r2, #1
 800777c:	2104      	movs	r1, #4
 800777e:	4618      	mov	r0, r3
 8007780:	f000 ff70 	bl	8008664 <TIM_CCxChannelCmd>
      break;
 8007784:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f042 0201 	orr.w	r2, r2, #1
 8007794:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	f003 0302 	and.w	r3, r3, #2
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d122      	bne.n	80077fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	f003 0302 	and.w	r3, r3, #2
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d11b      	bne.n	80077fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f06f 0202 	mvn.w	r2, #2
 80077cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2201      	movs	r2, #1
 80077d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	f003 0303 	and.w	r3, r3, #3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fb12 	bl	8007e0c <HAL_TIM_IC_CaptureCallback>
 80077e8:	e005      	b.n	80077f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fb04 	bl	8007df8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fb15 	bl	8007e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	f003 0304 	and.w	r3, r3, #4
 8007806:	2b04      	cmp	r3, #4
 8007808:	d122      	bne.n	8007850 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f003 0304 	and.w	r3, r3, #4
 8007814:	2b04      	cmp	r3, #4
 8007816:	d11b      	bne.n	8007850 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f06f 0204 	mvn.w	r2, #4
 8007820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2202      	movs	r2, #2
 8007826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fae8 	bl	8007e0c <HAL_TIM_IC_CaptureCallback>
 800783c:	e005      	b.n	800784a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fada 	bl	8007df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 faeb 	bl	8007e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	f003 0308 	and.w	r3, r3, #8
 800785a:	2b08      	cmp	r3, #8
 800785c:	d122      	bne.n	80078a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	f003 0308 	and.w	r3, r3, #8
 8007868:	2b08      	cmp	r3, #8
 800786a:	d11b      	bne.n	80078a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f06f 0208 	mvn.w	r2, #8
 8007874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2204      	movs	r2, #4
 800787a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	f003 0303 	and.w	r3, r3, #3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fabe 	bl	8007e0c <HAL_TIM_IC_CaptureCallback>
 8007890:	e005      	b.n	800789e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fab0 	bl	8007df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fac1 	bl	8007e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	f003 0310 	and.w	r3, r3, #16
 80078ae:	2b10      	cmp	r3, #16
 80078b0:	d122      	bne.n	80078f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	f003 0310 	and.w	r3, r3, #16
 80078bc:	2b10      	cmp	r3, #16
 80078be:	d11b      	bne.n	80078f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f06f 0210 	mvn.w	r2, #16
 80078c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2208      	movs	r2, #8
 80078ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	69db      	ldr	r3, [r3, #28]
 80078d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d003      	beq.n	80078e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 fa94 	bl	8007e0c <HAL_TIM_IC_CaptureCallback>
 80078e4:	e005      	b.n	80078f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fa86 	bl	8007df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fa97 	bl	8007e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b01      	cmp	r3, #1
 8007904:	d10e      	bne.n	8007924 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	2b01      	cmp	r3, #1
 8007912:	d107      	bne.n	8007924 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f06f 0201 	mvn.w	r2, #1
 800791c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f7f8 fcda 	bl	80002d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800792e:	2b80      	cmp	r3, #128	; 0x80
 8007930:	d10e      	bne.n	8007950 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800793c:	2b80      	cmp	r3, #128	; 0x80
 800793e:	d107      	bne.n	8007950 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 ff48 	bl	80087e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800795a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800795e:	d10e      	bne.n	800797e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800796a:	2b80      	cmp	r3, #128	; 0x80
 800796c:	d107      	bne.n	800797e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 ff3b 	bl	80087f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007988:	2b40      	cmp	r3, #64	; 0x40
 800798a:	d10e      	bne.n	80079aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007996:	2b40      	cmp	r3, #64	; 0x40
 8007998:	d107      	bne.n	80079aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 fa45 	bl	8007e34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	f003 0320 	and.w	r3, r3, #32
 80079b4:	2b20      	cmp	r3, #32
 80079b6:	d10e      	bne.n	80079d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	f003 0320 	and.w	r3, r3, #32
 80079c2:	2b20      	cmp	r3, #32
 80079c4:	d107      	bne.n	80079d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f06f 0220 	mvn.w	r2, #32
 80079ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fefb 	bl	80087cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079d6:	bf00      	nop
 80079d8:	3708      	adds	r7, #8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
	...

080079e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079ec:	2300      	movs	r3, #0
 80079ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d101      	bne.n	80079fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80079fa:	2302      	movs	r3, #2
 80079fc:	e0ff      	b.n	8007bfe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2b14      	cmp	r3, #20
 8007a0a:	f200 80f0 	bhi.w	8007bee <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007a0e:	a201      	add	r2, pc, #4	; (adr r2, 8007a14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a14:	08007a69 	.word	0x08007a69
 8007a18:	08007bef 	.word	0x08007bef
 8007a1c:	08007bef 	.word	0x08007bef
 8007a20:	08007bef 	.word	0x08007bef
 8007a24:	08007aa9 	.word	0x08007aa9
 8007a28:	08007bef 	.word	0x08007bef
 8007a2c:	08007bef 	.word	0x08007bef
 8007a30:	08007bef 	.word	0x08007bef
 8007a34:	08007aeb 	.word	0x08007aeb
 8007a38:	08007bef 	.word	0x08007bef
 8007a3c:	08007bef 	.word	0x08007bef
 8007a40:	08007bef 	.word	0x08007bef
 8007a44:	08007b2b 	.word	0x08007b2b
 8007a48:	08007bef 	.word	0x08007bef
 8007a4c:	08007bef 	.word	0x08007bef
 8007a50:	08007bef 	.word	0x08007bef
 8007a54:	08007b6d 	.word	0x08007b6d
 8007a58:	08007bef 	.word	0x08007bef
 8007a5c:	08007bef 	.word	0x08007bef
 8007a60:	08007bef 	.word	0x08007bef
 8007a64:	08007bad 	.word	0x08007bad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68b9      	ldr	r1, [r7, #8]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 fa84 	bl	8007f7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	699a      	ldr	r2, [r3, #24]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f042 0208 	orr.w	r2, r2, #8
 8007a82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	699a      	ldr	r2, [r3, #24]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f022 0204 	bic.w	r2, r2, #4
 8007a92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	6999      	ldr	r1, [r3, #24]
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	691a      	ldr	r2, [r3, #16]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	619a      	str	r2, [r3, #24]
      break;
 8007aa6:	e0a5      	b.n	8007bf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68b9      	ldr	r1, [r7, #8]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 faf4 	bl	800809c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	699a      	ldr	r2, [r3, #24]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	699a      	ldr	r2, [r3, #24]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6999      	ldr	r1, [r3, #24]
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	021a      	lsls	r2, r3, #8
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	619a      	str	r2, [r3, #24]
      break;
 8007ae8:	e084      	b.n	8007bf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68b9      	ldr	r1, [r7, #8]
 8007af0:	4618      	mov	r0, r3
 8007af2:	f000 fb5d 	bl	80081b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	69da      	ldr	r2, [r3, #28]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f042 0208 	orr.w	r2, r2, #8
 8007b04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	69da      	ldr	r2, [r3, #28]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f022 0204 	bic.w	r2, r2, #4
 8007b14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	69d9      	ldr	r1, [r3, #28]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	691a      	ldr	r2, [r3, #16]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	61da      	str	r2, [r3, #28]
      break;
 8007b28:	e064      	b.n	8007bf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68b9      	ldr	r1, [r7, #8]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f000 fbc5 	bl	80082c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	69da      	ldr	r2, [r3, #28]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	69da      	ldr	r2, [r3, #28]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	69d9      	ldr	r1, [r3, #28]
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	021a      	lsls	r2, r3, #8
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	430a      	orrs	r2, r1
 8007b68:	61da      	str	r2, [r3, #28]
      break;
 8007b6a:	e043      	b.n	8007bf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68b9      	ldr	r1, [r7, #8]
 8007b72:	4618      	mov	r0, r3
 8007b74:	f000 fc0e 	bl	8008394 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f042 0208 	orr.w	r2, r2, #8
 8007b86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f022 0204 	bic.w	r2, r2, #4
 8007b96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	691a      	ldr	r2, [r3, #16]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007baa:	e023      	b.n	8007bf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68b9      	ldr	r1, [r7, #8]
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 fc52 	bl	800845c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	021a      	lsls	r2, r3, #8
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	430a      	orrs	r2, r1
 8007bea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007bec:	e002      	b.n	8007bf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	75fb      	strb	r3, [r7, #23]
      break;
 8007bf2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3718      	adds	r7, #24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop

08007c08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d101      	bne.n	8007c24 <HAL_TIM_ConfigClockSource+0x1c>
 8007c20:	2302      	movs	r3, #2
 8007c22:	e0dc      	b.n	8007dde <HAL_TIM_ConfigClockSource+0x1d6>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2202      	movs	r2, #2
 8007c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	4b6a      	ldr	r3, [pc, #424]	; (8007de8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007c40:	4013      	ands	r3, r2
 8007c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a64      	ldr	r2, [pc, #400]	; (8007dec <HAL_TIM_ConfigClockSource+0x1e4>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	f000 80a9 	beq.w	8007db2 <HAL_TIM_ConfigClockSource+0x1aa>
 8007c60:	4a62      	ldr	r2, [pc, #392]	; (8007dec <HAL_TIM_ConfigClockSource+0x1e4>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	f200 80ae 	bhi.w	8007dc4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c68:	4a61      	ldr	r2, [pc, #388]	; (8007df0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	f000 80a1 	beq.w	8007db2 <HAL_TIM_ConfigClockSource+0x1aa>
 8007c70:	4a5f      	ldr	r2, [pc, #380]	; (8007df0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	f200 80a6 	bhi.w	8007dc4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c78:	4a5e      	ldr	r2, [pc, #376]	; (8007df4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	f000 8099 	beq.w	8007db2 <HAL_TIM_ConfigClockSource+0x1aa>
 8007c80:	4a5c      	ldr	r2, [pc, #368]	; (8007df4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	f200 809e 	bhi.w	8007dc4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c88:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007c8c:	f000 8091 	beq.w	8007db2 <HAL_TIM_ConfigClockSource+0x1aa>
 8007c90:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007c94:	f200 8096 	bhi.w	8007dc4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c9c:	f000 8089 	beq.w	8007db2 <HAL_TIM_ConfigClockSource+0x1aa>
 8007ca0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ca4:	f200 808e 	bhi.w	8007dc4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cac:	d03e      	beq.n	8007d2c <HAL_TIM_ConfigClockSource+0x124>
 8007cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cb2:	f200 8087 	bhi.w	8007dc4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cba:	f000 8086 	beq.w	8007dca <HAL_TIM_ConfigClockSource+0x1c2>
 8007cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cc2:	d87f      	bhi.n	8007dc4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007cc4:	2b70      	cmp	r3, #112	; 0x70
 8007cc6:	d01a      	beq.n	8007cfe <HAL_TIM_ConfigClockSource+0xf6>
 8007cc8:	2b70      	cmp	r3, #112	; 0x70
 8007cca:	d87b      	bhi.n	8007dc4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ccc:	2b60      	cmp	r3, #96	; 0x60
 8007cce:	d050      	beq.n	8007d72 <HAL_TIM_ConfigClockSource+0x16a>
 8007cd0:	2b60      	cmp	r3, #96	; 0x60
 8007cd2:	d877      	bhi.n	8007dc4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007cd4:	2b50      	cmp	r3, #80	; 0x50
 8007cd6:	d03c      	beq.n	8007d52 <HAL_TIM_ConfigClockSource+0x14a>
 8007cd8:	2b50      	cmp	r3, #80	; 0x50
 8007cda:	d873      	bhi.n	8007dc4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007cdc:	2b40      	cmp	r3, #64	; 0x40
 8007cde:	d058      	beq.n	8007d92 <HAL_TIM_ConfigClockSource+0x18a>
 8007ce0:	2b40      	cmp	r3, #64	; 0x40
 8007ce2:	d86f      	bhi.n	8007dc4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ce4:	2b30      	cmp	r3, #48	; 0x30
 8007ce6:	d064      	beq.n	8007db2 <HAL_TIM_ConfigClockSource+0x1aa>
 8007ce8:	2b30      	cmp	r3, #48	; 0x30
 8007cea:	d86b      	bhi.n	8007dc4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007cec:	2b20      	cmp	r3, #32
 8007cee:	d060      	beq.n	8007db2 <HAL_TIM_ConfigClockSource+0x1aa>
 8007cf0:	2b20      	cmp	r3, #32
 8007cf2:	d867      	bhi.n	8007dc4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d05c      	beq.n	8007db2 <HAL_TIM_ConfigClockSource+0x1aa>
 8007cf8:	2b10      	cmp	r3, #16
 8007cfa:	d05a      	beq.n	8007db2 <HAL_TIM_ConfigClockSource+0x1aa>
 8007cfc:	e062      	b.n	8007dc4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6818      	ldr	r0, [r3, #0]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	6899      	ldr	r1, [r3, #8]
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	685a      	ldr	r2, [r3, #4]
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	f000 fc89 	bl	8008624 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	609a      	str	r2, [r3, #8]
      break;
 8007d2a:	e04f      	b.n	8007dcc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6818      	ldr	r0, [r3, #0]
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	6899      	ldr	r1, [r3, #8]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	685a      	ldr	r2, [r3, #4]
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	f000 fc72 	bl	8008624 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	689a      	ldr	r2, [r3, #8]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d4e:	609a      	str	r2, [r3, #8]
      break;
 8007d50:	e03c      	b.n	8007dcc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6818      	ldr	r0, [r3, #0]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	6859      	ldr	r1, [r3, #4]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	f000 fbe2 	bl	8008528 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2150      	movs	r1, #80	; 0x50
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f000 fc3c 	bl	80085e8 <TIM_ITRx_SetConfig>
      break;
 8007d70:	e02c      	b.n	8007dcc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6818      	ldr	r0, [r3, #0]
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	6859      	ldr	r1, [r3, #4]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	f000 fc01 	bl	8008586 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2160      	movs	r1, #96	; 0x60
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f000 fc2c 	bl	80085e8 <TIM_ITRx_SetConfig>
      break;
 8007d90:	e01c      	b.n	8007dcc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6818      	ldr	r0, [r3, #0]
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	6859      	ldr	r1, [r3, #4]
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	f000 fbc2 	bl	8008528 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2140      	movs	r1, #64	; 0x40
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 fc1c 	bl	80085e8 <TIM_ITRx_SetConfig>
      break;
 8007db0:	e00c      	b.n	8007dcc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4619      	mov	r1, r3
 8007dbc:	4610      	mov	r0, r2
 8007dbe:	f000 fc13 	bl	80085e8 <TIM_ITRx_SetConfig>
      break;
 8007dc2:	e003      	b.n	8007dcc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8007dc8:	e000      	b.n	8007dcc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007dca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	ffceff88 	.word	0xffceff88
 8007dec:	00100040 	.word	0x00100040
 8007df0:	00100030 	.word	0x00100030
 8007df4:	00100020 	.word	0x00100020

08007df8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a40      	ldr	r2, [pc, #256]	; (8007f5c <TIM_Base_SetConfig+0x114>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d013      	beq.n	8007e88 <TIM_Base_SetConfig+0x40>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e66:	d00f      	beq.n	8007e88 <TIM_Base_SetConfig+0x40>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a3d      	ldr	r2, [pc, #244]	; (8007f60 <TIM_Base_SetConfig+0x118>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d00b      	beq.n	8007e88 <TIM_Base_SetConfig+0x40>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a3c      	ldr	r2, [pc, #240]	; (8007f64 <TIM_Base_SetConfig+0x11c>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d007      	beq.n	8007e88 <TIM_Base_SetConfig+0x40>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a3b      	ldr	r2, [pc, #236]	; (8007f68 <TIM_Base_SetConfig+0x120>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d003      	beq.n	8007e88 <TIM_Base_SetConfig+0x40>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a3a      	ldr	r2, [pc, #232]	; (8007f6c <TIM_Base_SetConfig+0x124>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d108      	bne.n	8007e9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a2f      	ldr	r2, [pc, #188]	; (8007f5c <TIM_Base_SetConfig+0x114>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d01f      	beq.n	8007ee2 <TIM_Base_SetConfig+0x9a>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ea8:	d01b      	beq.n	8007ee2 <TIM_Base_SetConfig+0x9a>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a2c      	ldr	r2, [pc, #176]	; (8007f60 <TIM_Base_SetConfig+0x118>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d017      	beq.n	8007ee2 <TIM_Base_SetConfig+0x9a>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a2b      	ldr	r2, [pc, #172]	; (8007f64 <TIM_Base_SetConfig+0x11c>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d013      	beq.n	8007ee2 <TIM_Base_SetConfig+0x9a>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a2a      	ldr	r2, [pc, #168]	; (8007f68 <TIM_Base_SetConfig+0x120>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d00f      	beq.n	8007ee2 <TIM_Base_SetConfig+0x9a>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a29      	ldr	r2, [pc, #164]	; (8007f6c <TIM_Base_SetConfig+0x124>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d00b      	beq.n	8007ee2 <TIM_Base_SetConfig+0x9a>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a28      	ldr	r2, [pc, #160]	; (8007f70 <TIM_Base_SetConfig+0x128>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d007      	beq.n	8007ee2 <TIM_Base_SetConfig+0x9a>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a27      	ldr	r2, [pc, #156]	; (8007f74 <TIM_Base_SetConfig+0x12c>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d003      	beq.n	8007ee2 <TIM_Base_SetConfig+0x9a>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a26      	ldr	r2, [pc, #152]	; (8007f78 <TIM_Base_SetConfig+0x130>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d108      	bne.n	8007ef4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	689a      	ldr	r2, [r3, #8]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a10      	ldr	r2, [pc, #64]	; (8007f5c <TIM_Base_SetConfig+0x114>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d00f      	beq.n	8007f40 <TIM_Base_SetConfig+0xf8>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a12      	ldr	r2, [pc, #72]	; (8007f6c <TIM_Base_SetConfig+0x124>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d00b      	beq.n	8007f40 <TIM_Base_SetConfig+0xf8>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a11      	ldr	r2, [pc, #68]	; (8007f70 <TIM_Base_SetConfig+0x128>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d007      	beq.n	8007f40 <TIM_Base_SetConfig+0xf8>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a10      	ldr	r2, [pc, #64]	; (8007f74 <TIM_Base_SetConfig+0x12c>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d003      	beq.n	8007f40 <TIM_Base_SetConfig+0xf8>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a0f      	ldr	r2, [pc, #60]	; (8007f78 <TIM_Base_SetConfig+0x130>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d103      	bne.n	8007f48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	691a      	ldr	r2, [r3, #16]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	615a      	str	r2, [r3, #20]
}
 8007f4e:	bf00      	nop
 8007f50:	3714      	adds	r7, #20
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	40010000 	.word	0x40010000
 8007f60:	40000400 	.word	0x40000400
 8007f64:	40000800 	.word	0x40000800
 8007f68:	40000c00 	.word	0x40000c00
 8007f6c:	40010400 	.word	0x40010400
 8007f70:	40014000 	.word	0x40014000
 8007f74:	40014400 	.word	0x40014400
 8007f78:	40014800 	.word	0x40014800

08007f7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	f023 0201 	bic.w	r2, r3, #1
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	699b      	ldr	r3, [r3, #24]
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	4b37      	ldr	r3, [pc, #220]	; (8008084 <TIM_OC1_SetConfig+0x108>)
 8007fa8:	4013      	ands	r3, r2
 8007faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f023 0303 	bic.w	r3, r3, #3
 8007fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	f023 0302 	bic.w	r3, r3, #2
 8007fc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a2d      	ldr	r2, [pc, #180]	; (8008088 <TIM_OC1_SetConfig+0x10c>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d00f      	beq.n	8007ff8 <TIM_OC1_SetConfig+0x7c>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a2c      	ldr	r2, [pc, #176]	; (800808c <TIM_OC1_SetConfig+0x110>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d00b      	beq.n	8007ff8 <TIM_OC1_SetConfig+0x7c>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a2b      	ldr	r2, [pc, #172]	; (8008090 <TIM_OC1_SetConfig+0x114>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d007      	beq.n	8007ff8 <TIM_OC1_SetConfig+0x7c>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a2a      	ldr	r2, [pc, #168]	; (8008094 <TIM_OC1_SetConfig+0x118>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d003      	beq.n	8007ff8 <TIM_OC1_SetConfig+0x7c>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a29      	ldr	r2, [pc, #164]	; (8008098 <TIM_OC1_SetConfig+0x11c>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d10c      	bne.n	8008012 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	f023 0308 	bic.w	r3, r3, #8
 8007ffe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	697a      	ldr	r2, [r7, #20]
 8008006:	4313      	orrs	r3, r2
 8008008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	f023 0304 	bic.w	r3, r3, #4
 8008010:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a1c      	ldr	r2, [pc, #112]	; (8008088 <TIM_OC1_SetConfig+0x10c>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d00f      	beq.n	800803a <TIM_OC1_SetConfig+0xbe>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a1b      	ldr	r2, [pc, #108]	; (800808c <TIM_OC1_SetConfig+0x110>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d00b      	beq.n	800803a <TIM_OC1_SetConfig+0xbe>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4a1a      	ldr	r2, [pc, #104]	; (8008090 <TIM_OC1_SetConfig+0x114>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d007      	beq.n	800803a <TIM_OC1_SetConfig+0xbe>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a19      	ldr	r2, [pc, #100]	; (8008094 <TIM_OC1_SetConfig+0x118>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d003      	beq.n	800803a <TIM_OC1_SetConfig+0xbe>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a18      	ldr	r2, [pc, #96]	; (8008098 <TIM_OC1_SetConfig+0x11c>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d111      	bne.n	800805e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	695b      	ldr	r3, [r3, #20]
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	4313      	orrs	r3, r2
 8008052:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	693a      	ldr	r2, [r7, #16]
 800805a:	4313      	orrs	r3, r2
 800805c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	693a      	ldr	r2, [r7, #16]
 8008062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	68fa      	ldr	r2, [r7, #12]
 8008068:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	697a      	ldr	r2, [r7, #20]
 8008076:	621a      	str	r2, [r3, #32]
}
 8008078:	bf00      	nop
 800807a:	371c      	adds	r7, #28
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr
 8008084:	fffeff8f 	.word	0xfffeff8f
 8008088:	40010000 	.word	0x40010000
 800808c:	40010400 	.word	0x40010400
 8008090:	40014000 	.word	0x40014000
 8008094:	40014400 	.word	0x40014400
 8008098:	40014800 	.word	0x40014800

0800809c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800809c:	b480      	push	{r7}
 800809e:	b087      	sub	sp, #28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a1b      	ldr	r3, [r3, #32]
 80080aa:	f023 0210 	bic.w	r2, r3, #16
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	699b      	ldr	r3, [r3, #24]
 80080c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	4b34      	ldr	r3, [pc, #208]	; (8008198 <TIM_OC2_SetConfig+0xfc>)
 80080c8:	4013      	ands	r3, r2
 80080ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	021b      	lsls	r3, r3, #8
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	4313      	orrs	r3, r2
 80080de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	f023 0320 	bic.w	r3, r3, #32
 80080e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	011b      	lsls	r3, r3, #4
 80080ee:	697a      	ldr	r2, [r7, #20]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a29      	ldr	r2, [pc, #164]	; (800819c <TIM_OC2_SetConfig+0x100>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d003      	beq.n	8008104 <TIM_OC2_SetConfig+0x68>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a28      	ldr	r2, [pc, #160]	; (80081a0 <TIM_OC2_SetConfig+0x104>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d10d      	bne.n	8008120 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800810a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	011b      	lsls	r3, r3, #4
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	4313      	orrs	r3, r2
 8008116:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800811e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a1e      	ldr	r2, [pc, #120]	; (800819c <TIM_OC2_SetConfig+0x100>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d00f      	beq.n	8008148 <TIM_OC2_SetConfig+0xac>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a1d      	ldr	r2, [pc, #116]	; (80081a0 <TIM_OC2_SetConfig+0x104>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d00b      	beq.n	8008148 <TIM_OC2_SetConfig+0xac>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a1c      	ldr	r2, [pc, #112]	; (80081a4 <TIM_OC2_SetConfig+0x108>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d007      	beq.n	8008148 <TIM_OC2_SetConfig+0xac>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a1b      	ldr	r2, [pc, #108]	; (80081a8 <TIM_OC2_SetConfig+0x10c>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d003      	beq.n	8008148 <TIM_OC2_SetConfig+0xac>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a1a      	ldr	r2, [pc, #104]	; (80081ac <TIM_OC2_SetConfig+0x110>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d113      	bne.n	8008170 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800814e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008156:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	695b      	ldr	r3, [r3, #20]
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	693a      	ldr	r2, [r7, #16]
 8008160:	4313      	orrs	r3, r2
 8008162:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	4313      	orrs	r3, r2
 800816e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	693a      	ldr	r2, [r7, #16]
 8008174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	685a      	ldr	r2, [r3, #4]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	621a      	str	r2, [r3, #32]
}
 800818a:	bf00      	nop
 800818c:	371c      	adds	r7, #28
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	feff8fff 	.word	0xfeff8fff
 800819c:	40010000 	.word	0x40010000
 80081a0:	40010400 	.word	0x40010400
 80081a4:	40014000 	.word	0x40014000
 80081a8:	40014400 	.word	0x40014400
 80081ac:	40014800 	.word	0x40014800

080081b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b087      	sub	sp, #28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a1b      	ldr	r3, [r3, #32]
 80081ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	69db      	ldr	r3, [r3, #28]
 80081d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	4b33      	ldr	r3, [pc, #204]	; (80082a8 <TIM_OC3_SetConfig+0xf8>)
 80081dc:	4013      	ands	r3, r2
 80081de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f023 0303 	bic.w	r3, r3, #3
 80081e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	021b      	lsls	r3, r3, #8
 8008200:	697a      	ldr	r2, [r7, #20]
 8008202:	4313      	orrs	r3, r2
 8008204:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a28      	ldr	r2, [pc, #160]	; (80082ac <TIM_OC3_SetConfig+0xfc>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d003      	beq.n	8008216 <TIM_OC3_SetConfig+0x66>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a27      	ldr	r2, [pc, #156]	; (80082b0 <TIM_OC3_SetConfig+0x100>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d10d      	bne.n	8008232 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800821c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	021b      	lsls	r3, r3, #8
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	4313      	orrs	r3, r2
 8008228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a1d      	ldr	r2, [pc, #116]	; (80082ac <TIM_OC3_SetConfig+0xfc>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d00f      	beq.n	800825a <TIM_OC3_SetConfig+0xaa>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a1c      	ldr	r2, [pc, #112]	; (80082b0 <TIM_OC3_SetConfig+0x100>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d00b      	beq.n	800825a <TIM_OC3_SetConfig+0xaa>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a1b      	ldr	r2, [pc, #108]	; (80082b4 <TIM_OC3_SetConfig+0x104>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d007      	beq.n	800825a <TIM_OC3_SetConfig+0xaa>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a1a      	ldr	r2, [pc, #104]	; (80082b8 <TIM_OC3_SetConfig+0x108>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d003      	beq.n	800825a <TIM_OC3_SetConfig+0xaa>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a19      	ldr	r2, [pc, #100]	; (80082bc <TIM_OC3_SetConfig+0x10c>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d113      	bne.n	8008282 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	695b      	ldr	r3, [r3, #20]
 800826e:	011b      	lsls	r3, r3, #4
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	4313      	orrs	r3, r2
 8008274:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	699b      	ldr	r3, [r3, #24]
 800827a:	011b      	lsls	r3, r3, #4
 800827c:	693a      	ldr	r2, [r7, #16]
 800827e:	4313      	orrs	r3, r2
 8008280:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	693a      	ldr	r2, [r7, #16]
 8008286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	685a      	ldr	r2, [r3, #4]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	697a      	ldr	r2, [r7, #20]
 800829a:	621a      	str	r2, [r3, #32]
}
 800829c:	bf00      	nop
 800829e:	371c      	adds	r7, #28
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr
 80082a8:	fffeff8f 	.word	0xfffeff8f
 80082ac:	40010000 	.word	0x40010000
 80082b0:	40010400 	.word	0x40010400
 80082b4:	40014000 	.word	0x40014000
 80082b8:	40014400 	.word	0x40014400
 80082bc:	40014800 	.word	0x40014800

080082c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b087      	sub	sp, #28
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a1b      	ldr	r3, [r3, #32]
 80082ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a1b      	ldr	r3, [r3, #32]
 80082da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	4b24      	ldr	r3, [pc, #144]	; (800837c <TIM_OC4_SetConfig+0xbc>)
 80082ec:	4013      	ands	r3, r2
 80082ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	021b      	lsls	r3, r3, #8
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	4313      	orrs	r3, r2
 8008302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800830a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	031b      	lsls	r3, r3, #12
 8008312:	693a      	ldr	r2, [r7, #16]
 8008314:	4313      	orrs	r3, r2
 8008316:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a19      	ldr	r2, [pc, #100]	; (8008380 <TIM_OC4_SetConfig+0xc0>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d00f      	beq.n	8008340 <TIM_OC4_SetConfig+0x80>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4a18      	ldr	r2, [pc, #96]	; (8008384 <TIM_OC4_SetConfig+0xc4>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d00b      	beq.n	8008340 <TIM_OC4_SetConfig+0x80>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a17      	ldr	r2, [pc, #92]	; (8008388 <TIM_OC4_SetConfig+0xc8>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d007      	beq.n	8008340 <TIM_OC4_SetConfig+0x80>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4a16      	ldr	r2, [pc, #88]	; (800838c <TIM_OC4_SetConfig+0xcc>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d003      	beq.n	8008340 <TIM_OC4_SetConfig+0x80>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a15      	ldr	r2, [pc, #84]	; (8008390 <TIM_OC4_SetConfig+0xd0>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d109      	bne.n	8008354 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008346:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	019b      	lsls	r3, r3, #6
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	4313      	orrs	r3, r2
 8008352:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	693a      	ldr	r2, [r7, #16]
 800836c:	621a      	str	r2, [r3, #32]
}
 800836e:	bf00      	nop
 8008370:	371c      	adds	r7, #28
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	feff8fff 	.word	0xfeff8fff
 8008380:	40010000 	.word	0x40010000
 8008384:	40010400 	.word	0x40010400
 8008388:	40014000 	.word	0x40014000
 800838c:	40014400 	.word	0x40014400
 8008390:	40014800 	.word	0x40014800

08008394 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008394:	b480      	push	{r7}
 8008396:	b087      	sub	sp, #28
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a1b      	ldr	r3, [r3, #32]
 80083ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	4b21      	ldr	r3, [pc, #132]	; (8008444 <TIM_OC5_SetConfig+0xb0>)
 80083c0:	4013      	ands	r3, r2
 80083c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80083d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	041b      	lsls	r3, r3, #16
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	4313      	orrs	r3, r2
 80083e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a18      	ldr	r2, [pc, #96]	; (8008448 <TIM_OC5_SetConfig+0xb4>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d00f      	beq.n	800840a <TIM_OC5_SetConfig+0x76>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a17      	ldr	r2, [pc, #92]	; (800844c <TIM_OC5_SetConfig+0xb8>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d00b      	beq.n	800840a <TIM_OC5_SetConfig+0x76>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a16      	ldr	r2, [pc, #88]	; (8008450 <TIM_OC5_SetConfig+0xbc>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d007      	beq.n	800840a <TIM_OC5_SetConfig+0x76>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a15      	ldr	r2, [pc, #84]	; (8008454 <TIM_OC5_SetConfig+0xc0>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d003      	beq.n	800840a <TIM_OC5_SetConfig+0x76>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a14      	ldr	r2, [pc, #80]	; (8008458 <TIM_OC5_SetConfig+0xc4>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d109      	bne.n	800841e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008410:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	695b      	ldr	r3, [r3, #20]
 8008416:	021b      	lsls	r3, r3, #8
 8008418:	697a      	ldr	r2, [r7, #20]
 800841a:	4313      	orrs	r3, r2
 800841c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	685a      	ldr	r2, [r3, #4]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	693a      	ldr	r2, [r7, #16]
 8008436:	621a      	str	r2, [r3, #32]
}
 8008438:	bf00      	nop
 800843a:	371c      	adds	r7, #28
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr
 8008444:	fffeff8f 	.word	0xfffeff8f
 8008448:	40010000 	.word	0x40010000
 800844c:	40010400 	.word	0x40010400
 8008450:	40014000 	.word	0x40014000
 8008454:	40014400 	.word	0x40014400
 8008458:	40014800 	.word	0x40014800

0800845c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800845c:	b480      	push	{r7}
 800845e:	b087      	sub	sp, #28
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a1b      	ldr	r3, [r3, #32]
 800846a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a1b      	ldr	r3, [r3, #32]
 8008476:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	4b22      	ldr	r3, [pc, #136]	; (8008510 <TIM_OC6_SetConfig+0xb4>)
 8008488:	4013      	ands	r3, r2
 800848a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	021b      	lsls	r3, r3, #8
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	4313      	orrs	r3, r2
 8008496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800849e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	051b      	lsls	r3, r3, #20
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a19      	ldr	r2, [pc, #100]	; (8008514 <TIM_OC6_SetConfig+0xb8>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d00f      	beq.n	80084d4 <TIM_OC6_SetConfig+0x78>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a18      	ldr	r2, [pc, #96]	; (8008518 <TIM_OC6_SetConfig+0xbc>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d00b      	beq.n	80084d4 <TIM_OC6_SetConfig+0x78>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a17      	ldr	r2, [pc, #92]	; (800851c <TIM_OC6_SetConfig+0xc0>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d007      	beq.n	80084d4 <TIM_OC6_SetConfig+0x78>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a16      	ldr	r2, [pc, #88]	; (8008520 <TIM_OC6_SetConfig+0xc4>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d003      	beq.n	80084d4 <TIM_OC6_SetConfig+0x78>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a15      	ldr	r2, [pc, #84]	; (8008524 <TIM_OC6_SetConfig+0xc8>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d109      	bne.n	80084e8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	695b      	ldr	r3, [r3, #20]
 80084e0:	029b      	lsls	r3, r3, #10
 80084e2:	697a      	ldr	r2, [r7, #20]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	697a      	ldr	r2, [r7, #20]
 80084ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	685a      	ldr	r2, [r3, #4]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	621a      	str	r2, [r3, #32]
}
 8008502:	bf00      	nop
 8008504:	371c      	adds	r7, #28
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	feff8fff 	.word	0xfeff8fff
 8008514:	40010000 	.word	0x40010000
 8008518:	40010400 	.word	0x40010400
 800851c:	40014000 	.word	0x40014000
 8008520:	40014400 	.word	0x40014400
 8008524:	40014800 	.word	0x40014800

08008528 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008528:	b480      	push	{r7}
 800852a:	b087      	sub	sp, #28
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6a1b      	ldr	r3, [r3, #32]
 8008538:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	f023 0201 	bic.w	r2, r3, #1
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008552:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	011b      	lsls	r3, r3, #4
 8008558:	693a      	ldr	r2, [r7, #16]
 800855a:	4313      	orrs	r3, r2
 800855c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	f023 030a 	bic.w	r3, r3, #10
 8008564:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	4313      	orrs	r3, r2
 800856c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	693a      	ldr	r2, [r7, #16]
 8008572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	621a      	str	r2, [r3, #32]
}
 800857a:	bf00      	nop
 800857c:	371c      	adds	r7, #28
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr

08008586 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008586:	b480      	push	{r7}
 8008588:	b087      	sub	sp, #28
 800858a:	af00      	add	r7, sp, #0
 800858c:	60f8      	str	r0, [r7, #12]
 800858e:	60b9      	str	r1, [r7, #8]
 8008590:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6a1b      	ldr	r3, [r3, #32]
 8008596:	f023 0210 	bic.w	r2, r3, #16
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	699b      	ldr	r3, [r3, #24]
 80085a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6a1b      	ldr	r3, [r3, #32]
 80085a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	031b      	lsls	r3, r3, #12
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80085c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	011b      	lsls	r3, r3, #4
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	697a      	ldr	r2, [r7, #20]
 80085d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	621a      	str	r2, [r3, #32]
}
 80085da:	bf00      	nop
 80085dc:	371c      	adds	r7, #28
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr
	...

080085e8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	4b09      	ldr	r3, [pc, #36]	; (8008620 <TIM_ITRx_SetConfig+0x38>)
 80085fc:	4013      	ands	r3, r2
 80085fe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008600:	683a      	ldr	r2, [r7, #0]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	4313      	orrs	r3, r2
 8008606:	f043 0307 	orr.w	r3, r3, #7
 800860a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	609a      	str	r2, [r3, #8]
}
 8008612:	bf00      	nop
 8008614:	3714      	adds	r7, #20
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	ffcfff8f 	.word	0xffcfff8f

08008624 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008624:	b480      	push	{r7}
 8008626:	b087      	sub	sp, #28
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
 8008630:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800863e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	021a      	lsls	r2, r3, #8
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	431a      	orrs	r2, r3
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	4313      	orrs	r3, r2
 800864c:	697a      	ldr	r2, [r7, #20]
 800864e:	4313      	orrs	r3, r2
 8008650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	609a      	str	r2, [r3, #8]
}
 8008658:	bf00      	nop
 800865a:	371c      	adds	r7, #28
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008664:	b480      	push	{r7}
 8008666:	b087      	sub	sp, #28
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	f003 031f 	and.w	r3, r3, #31
 8008676:	2201      	movs	r2, #1
 8008678:	fa02 f303 	lsl.w	r3, r2, r3
 800867c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6a1a      	ldr	r2, [r3, #32]
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	43db      	mvns	r3, r3
 8008686:	401a      	ands	r2, r3
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6a1a      	ldr	r2, [r3, #32]
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	f003 031f 	and.w	r3, r3, #31
 8008696:	6879      	ldr	r1, [r7, #4]
 8008698:	fa01 f303 	lsl.w	r3, r1, r3
 800869c:	431a      	orrs	r2, r3
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	621a      	str	r2, [r3, #32]
}
 80086a2:	bf00      	nop
 80086a4:	371c      	adds	r7, #28
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
	...

080086b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d101      	bne.n	80086c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086c4:	2302      	movs	r3, #2
 80086c6:	e06d      	b.n	80087a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2202      	movs	r2, #2
 80086d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a30      	ldr	r2, [pc, #192]	; (80087b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d004      	beq.n	80086fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a2f      	ldr	r2, [pc, #188]	; (80087b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d108      	bne.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008702:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	4313      	orrs	r3, r2
 800870c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008714:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	4313      	orrs	r3, r2
 800871e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a20      	ldr	r2, [pc, #128]	; (80087b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d022      	beq.n	8008778 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800873a:	d01d      	beq.n	8008778 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a1d      	ldr	r2, [pc, #116]	; (80087b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d018      	beq.n	8008778 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a1c      	ldr	r2, [pc, #112]	; (80087bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d013      	beq.n	8008778 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a1a      	ldr	r2, [pc, #104]	; (80087c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d00e      	beq.n	8008778 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a15      	ldr	r2, [pc, #84]	; (80087b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d009      	beq.n	8008778 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a16      	ldr	r2, [pc, #88]	; (80087c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d004      	beq.n	8008778 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a15      	ldr	r2, [pc, #84]	; (80087c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d10c      	bne.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800877e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	68ba      	ldr	r2, [r7, #8]
 8008786:	4313      	orrs	r3, r2
 8008788:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2201      	movs	r2, #1
 8008796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3714      	adds	r7, #20
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr
 80087b0:	40010000 	.word	0x40010000
 80087b4:	40010400 	.word	0x40010400
 80087b8:	40000400 	.word	0x40000400
 80087bc:	40000800 	.word	0x40000800
 80087c0:	40000c00 	.word	0x40000c00
 80087c4:	40001800 	.word	0x40001800
 80087c8:	40014000 	.word	0x40014000

080087cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80087fc:	bf00      	nop
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008808:	b084      	sub	sp, #16
 800880a:	b580      	push	{r7, lr}
 800880c:	b084      	sub	sp, #16
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
 8008812:	f107 001c 	add.w	r0, r7, #28
 8008816:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800881a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881c:	2b01      	cmp	r3, #1
 800881e:	d120      	bne.n	8008862 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008824:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	68da      	ldr	r2, [r3, #12]
 8008830:	4b2a      	ldr	r3, [pc, #168]	; (80088dc <USB_CoreInit+0xd4>)
 8008832:	4013      	ands	r3, r2
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008846:	2b01      	cmp	r3, #1
 8008848:	d105      	bne.n	8008856 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f001 fc04 	bl	800a064 <USB_CoreReset>
 800885c:	4603      	mov	r3, r0
 800885e:	73fb      	strb	r3, [r7, #15]
 8008860:	e01a      	b.n	8008898 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f001 fbf8 	bl	800a064 <USB_CoreReset>
 8008874:	4603      	mov	r3, r0
 8008876:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800887a:	2b00      	cmp	r3, #0
 800887c:	d106      	bne.n	800888c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008882:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	639a      	str	r2, [r3, #56]	; 0x38
 800888a:	e005      	b.n	8008898 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008890:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889a:	2b01      	cmp	r3, #1
 800889c:	d116      	bne.n	80088cc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80088ac:	4b0c      	ldr	r3, [pc, #48]	; (80088e0 <USB_CoreInit+0xd8>)
 80088ae:	4313      	orrs	r3, r2
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	f043 0206 	orr.w	r2, r3, #6
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	f043 0220 	orr.w	r2, r3, #32
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80088cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088d8:	b004      	add	sp, #16
 80088da:	4770      	bx	lr
 80088dc:	ffbdffbf 	.word	0xffbdffbf
 80088e0:	03ee0000 	.word	0x03ee0000

080088e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b087      	sub	sp, #28
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	4613      	mov	r3, r2
 80088f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80088f2:	79fb      	ldrb	r3, [r7, #7]
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d165      	bne.n	80089c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	4a41      	ldr	r2, [pc, #260]	; (8008a00 <USB_SetTurnaroundTime+0x11c>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d906      	bls.n	800890e <USB_SetTurnaroundTime+0x2a>
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	4a40      	ldr	r2, [pc, #256]	; (8008a04 <USB_SetTurnaroundTime+0x120>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d202      	bcs.n	800890e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008908:	230f      	movs	r3, #15
 800890a:	617b      	str	r3, [r7, #20]
 800890c:	e062      	b.n	80089d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	4a3c      	ldr	r2, [pc, #240]	; (8008a04 <USB_SetTurnaroundTime+0x120>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d306      	bcc.n	8008924 <USB_SetTurnaroundTime+0x40>
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	4a3b      	ldr	r2, [pc, #236]	; (8008a08 <USB_SetTurnaroundTime+0x124>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d202      	bcs.n	8008924 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800891e:	230e      	movs	r3, #14
 8008920:	617b      	str	r3, [r7, #20]
 8008922:	e057      	b.n	80089d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	4a38      	ldr	r2, [pc, #224]	; (8008a08 <USB_SetTurnaroundTime+0x124>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d306      	bcc.n	800893a <USB_SetTurnaroundTime+0x56>
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	4a37      	ldr	r2, [pc, #220]	; (8008a0c <USB_SetTurnaroundTime+0x128>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d202      	bcs.n	800893a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008934:	230d      	movs	r3, #13
 8008936:	617b      	str	r3, [r7, #20]
 8008938:	e04c      	b.n	80089d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	4a33      	ldr	r2, [pc, #204]	; (8008a0c <USB_SetTurnaroundTime+0x128>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d306      	bcc.n	8008950 <USB_SetTurnaroundTime+0x6c>
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	4a32      	ldr	r2, [pc, #200]	; (8008a10 <USB_SetTurnaroundTime+0x12c>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d802      	bhi.n	8008950 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800894a:	230c      	movs	r3, #12
 800894c:	617b      	str	r3, [r7, #20]
 800894e:	e041      	b.n	80089d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	4a2f      	ldr	r2, [pc, #188]	; (8008a10 <USB_SetTurnaroundTime+0x12c>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d906      	bls.n	8008966 <USB_SetTurnaroundTime+0x82>
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	4a2e      	ldr	r2, [pc, #184]	; (8008a14 <USB_SetTurnaroundTime+0x130>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d802      	bhi.n	8008966 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008960:	230b      	movs	r3, #11
 8008962:	617b      	str	r3, [r7, #20]
 8008964:	e036      	b.n	80089d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	4a2a      	ldr	r2, [pc, #168]	; (8008a14 <USB_SetTurnaroundTime+0x130>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d906      	bls.n	800897c <USB_SetTurnaroundTime+0x98>
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	4a29      	ldr	r2, [pc, #164]	; (8008a18 <USB_SetTurnaroundTime+0x134>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d802      	bhi.n	800897c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008976:	230a      	movs	r3, #10
 8008978:	617b      	str	r3, [r7, #20]
 800897a:	e02b      	b.n	80089d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	4a26      	ldr	r2, [pc, #152]	; (8008a18 <USB_SetTurnaroundTime+0x134>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d906      	bls.n	8008992 <USB_SetTurnaroundTime+0xae>
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	4a25      	ldr	r2, [pc, #148]	; (8008a1c <USB_SetTurnaroundTime+0x138>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d202      	bcs.n	8008992 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800898c:	2309      	movs	r3, #9
 800898e:	617b      	str	r3, [r7, #20]
 8008990:	e020      	b.n	80089d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	4a21      	ldr	r2, [pc, #132]	; (8008a1c <USB_SetTurnaroundTime+0x138>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d306      	bcc.n	80089a8 <USB_SetTurnaroundTime+0xc4>
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	4a20      	ldr	r2, [pc, #128]	; (8008a20 <USB_SetTurnaroundTime+0x13c>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d802      	bhi.n	80089a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80089a2:	2308      	movs	r3, #8
 80089a4:	617b      	str	r3, [r7, #20]
 80089a6:	e015      	b.n	80089d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	4a1d      	ldr	r2, [pc, #116]	; (8008a20 <USB_SetTurnaroundTime+0x13c>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d906      	bls.n	80089be <USB_SetTurnaroundTime+0xda>
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	4a1c      	ldr	r2, [pc, #112]	; (8008a24 <USB_SetTurnaroundTime+0x140>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d202      	bcs.n	80089be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80089b8:	2307      	movs	r3, #7
 80089ba:	617b      	str	r3, [r7, #20]
 80089bc:	e00a      	b.n	80089d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80089be:	2306      	movs	r3, #6
 80089c0:	617b      	str	r3, [r7, #20]
 80089c2:	e007      	b.n	80089d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80089c4:	79fb      	ldrb	r3, [r7, #7]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d102      	bne.n	80089d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80089ca:	2309      	movs	r3, #9
 80089cc:	617b      	str	r3, [r7, #20]
 80089ce:	e001      	b.n	80089d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80089d0:	2309      	movs	r3, #9
 80089d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	68da      	ldr	r2, [r3, #12]
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	029b      	lsls	r3, r3, #10
 80089e8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80089ec:	431a      	orrs	r2, r3
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	371c      	adds	r7, #28
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr
 8008a00:	00d8acbf 	.word	0x00d8acbf
 8008a04:	00e4e1c0 	.word	0x00e4e1c0
 8008a08:	00f42400 	.word	0x00f42400
 8008a0c:	01067380 	.word	0x01067380
 8008a10:	011a499f 	.word	0x011a499f
 8008a14:	01312cff 	.word	0x01312cff
 8008a18:	014ca43f 	.word	0x014ca43f
 8008a1c:	016e3600 	.word	0x016e3600
 8008a20:	01a6ab1f 	.word	0x01a6ab1f
 8008a24:	01e84800 	.word	0x01e84800

08008a28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	f043 0201 	orr.w	r2, r3, #1
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	370c      	adds	r7, #12
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr

08008a4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b083      	sub	sp, #12
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	f023 0201 	bic.w	r2, r3, #1
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	460b      	mov	r3, r1
 8008a76:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008a88:	78fb      	ldrb	r3, [r7, #3]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d115      	bne.n	8008aba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008a9a:	2001      	movs	r0, #1
 8008a9c:	f7fa f812 	bl	8002ac4 <HAL_Delay>
      ms++;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f001 fa4b 	bl	8009f42 <USB_GetMode>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d01e      	beq.n	8008af0 <USB_SetCurrentMode+0x84>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2b31      	cmp	r3, #49	; 0x31
 8008ab6:	d9f0      	bls.n	8008a9a <USB_SetCurrentMode+0x2e>
 8008ab8:	e01a      	b.n	8008af0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008aba:	78fb      	ldrb	r3, [r7, #3]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d115      	bne.n	8008aec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008acc:	2001      	movs	r0, #1
 8008ace:	f7f9 fff9 	bl	8002ac4 <HAL_Delay>
      ms++;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f001 fa32 	bl	8009f42 <USB_GetMode>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d005      	beq.n	8008af0 <USB_SetCurrentMode+0x84>
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2b31      	cmp	r3, #49	; 0x31
 8008ae8:	d9f0      	bls.n	8008acc <USB_SetCurrentMode+0x60>
 8008aea:	e001      	b.n	8008af0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	e005      	b.n	8008afc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2b32      	cmp	r3, #50	; 0x32
 8008af4:	d101      	bne.n	8008afa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e000      	b.n	8008afc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b04:	b084      	sub	sp, #16
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b086      	sub	sp, #24
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008b12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b16:	2300      	movs	r3, #0
 8008b18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008b1e:	2300      	movs	r3, #0
 8008b20:	613b      	str	r3, [r7, #16]
 8008b22:	e009      	b.n	8008b38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	3340      	adds	r3, #64	; 0x40
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	4413      	add	r3, r2
 8008b2e:	2200      	movs	r2, #0
 8008b30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	3301      	adds	r3, #1
 8008b36:	613b      	str	r3, [r7, #16]
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	2b0e      	cmp	r3, #14
 8008b3c:	d9f2      	bls.n	8008b24 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d11c      	bne.n	8008b7e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b52:	f043 0302 	orr.w	r3, r3, #2
 8008b56:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	601a      	str	r2, [r3, #0]
 8008b7c:	e005      	b.n	8008b8a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b90:	461a      	mov	r2, r3
 8008b92:	2300      	movs	r3, #0
 8008b94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	680b      	ldr	r3, [r1, #0]
 8008ba8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d10c      	bne.n	8008bca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d104      	bne.n	8008bc0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 f965 	bl	8008e88 <USB_SetDevSpeed>
 8008bbe:	e008      	b.n	8008bd2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008bc0:	2101      	movs	r1, #1
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f960 	bl	8008e88 <USB_SetDevSpeed>
 8008bc8:	e003      	b.n	8008bd2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008bca:	2103      	movs	r1, #3
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f95b 	bl	8008e88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008bd2:	2110      	movs	r1, #16
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f8f3 	bl	8008dc0 <USB_FlushTxFifo>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d001      	beq.n	8008be4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 f91f 	bl	8008e28 <USB_FlushRxFifo>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d001      	beq.n	8008bf4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c06:	461a      	mov	r2, r3
 8008c08:	2300      	movs	r3, #0
 8008c0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c12:	461a      	mov	r2, r3
 8008c14:	2300      	movs	r3, #0
 8008c16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c18:	2300      	movs	r3, #0
 8008c1a:	613b      	str	r3, [r7, #16]
 8008c1c:	e043      	b.n	8008ca6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	015a      	lsls	r2, r3, #5
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	4413      	add	r3, r2
 8008c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c34:	d118      	bne.n	8008c68 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d10a      	bne.n	8008c52 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	015a      	lsls	r2, r3, #5
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	4413      	add	r3, r2
 8008c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c48:	461a      	mov	r2, r3
 8008c4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c4e:	6013      	str	r3, [r2, #0]
 8008c50:	e013      	b.n	8008c7a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	015a      	lsls	r2, r3, #5
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	4413      	add	r3, r2
 8008c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c5e:	461a      	mov	r2, r3
 8008c60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c64:	6013      	str	r3, [r2, #0]
 8008c66:	e008      	b.n	8008c7a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	015a      	lsls	r2, r3, #5
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	4413      	add	r3, r2
 8008c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c74:	461a      	mov	r2, r3
 8008c76:	2300      	movs	r3, #0
 8008c78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	015a      	lsls	r2, r3, #5
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	4413      	add	r3, r2
 8008c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c86:	461a      	mov	r2, r3
 8008c88:	2300      	movs	r3, #0
 8008c8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	015a      	lsls	r2, r3, #5
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	4413      	add	r3, r2
 8008c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c98:	461a      	mov	r2, r3
 8008c9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	613b      	str	r3, [r7, #16]
 8008ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca8:	693a      	ldr	r2, [r7, #16]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d3b7      	bcc.n	8008c1e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cae:	2300      	movs	r3, #0
 8008cb0:	613b      	str	r3, [r7, #16]
 8008cb2:	e043      	b.n	8008d3c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	015a      	lsls	r2, r3, #5
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	4413      	add	r3, r2
 8008cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cca:	d118      	bne.n	8008cfe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d10a      	bne.n	8008ce8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	015a      	lsls	r2, r3, #5
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	4413      	add	r3, r2
 8008cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cde:	461a      	mov	r2, r3
 8008ce0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ce4:	6013      	str	r3, [r2, #0]
 8008ce6:	e013      	b.n	8008d10 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	015a      	lsls	r2, r3, #5
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	4413      	add	r3, r2
 8008cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008cfa:	6013      	str	r3, [r2, #0]
 8008cfc:	e008      	b.n	8008d10 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	015a      	lsls	r2, r3, #5
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	4413      	add	r3, r2
 8008d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	015a      	lsls	r2, r3, #5
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	4413      	add	r3, r2
 8008d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	2300      	movs	r3, #0
 8008d20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	015a      	lsls	r2, r3, #5
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	4413      	add	r3, r2
 8008d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d2e:	461a      	mov	r2, r3
 8008d30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	613b      	str	r3, [r7, #16]
 8008d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d3b7      	bcc.n	8008cb4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d4a:	691b      	ldr	r3, [r3, #16]
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d56:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008d64:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d105      	bne.n	8008d78 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	699b      	ldr	r3, [r3, #24]
 8008d70:	f043 0210 	orr.w	r2, r3, #16
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	699a      	ldr	r2, [r3, #24]
 8008d7c:	4b0e      	ldr	r3, [pc, #56]	; (8008db8 <USB_DevInit+0x2b4>)
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d005      	beq.n	8008d96 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	699b      	ldr	r3, [r3, #24]
 8008d8e:	f043 0208 	orr.w	r2, r3, #8
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d105      	bne.n	8008da8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	699a      	ldr	r2, [r3, #24]
 8008da0:	4b06      	ldr	r3, [pc, #24]	; (8008dbc <USB_DevInit+0x2b8>)
 8008da2:	4313      	orrs	r3, r2
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3718      	adds	r7, #24
 8008dae:	46bd      	mov	sp, r7
 8008db0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008db4:	b004      	add	sp, #16
 8008db6:	4770      	bx	lr
 8008db8:	803c3800 	.word	0x803c3800
 8008dbc:	40000004 	.word	0x40000004

08008dc0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4a13      	ldr	r2, [pc, #76]	; (8008e24 <USB_FlushTxFifo+0x64>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d901      	bls.n	8008de0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008ddc:	2303      	movs	r3, #3
 8008dde:	e01b      	b.n	8008e18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	daf2      	bge.n	8008dce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008de8:	2300      	movs	r3, #0
 8008dea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	019b      	lsls	r3, r3, #6
 8008df0:	f043 0220 	orr.w	r2, r3, #32
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	4a08      	ldr	r2, [pc, #32]	; (8008e24 <USB_FlushTxFifo+0x64>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d901      	bls.n	8008e0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008e06:	2303      	movs	r3, #3
 8008e08:	e006      	b.n	8008e18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	f003 0320 	and.w	r3, r3, #32
 8008e12:	2b20      	cmp	r3, #32
 8008e14:	d0f0      	beq.n	8008df8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr
 8008e24:	00030d40 	.word	0x00030d40

08008e28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e30:	2300      	movs	r3, #0
 8008e32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	3301      	adds	r3, #1
 8008e38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	4a11      	ldr	r2, [pc, #68]	; (8008e84 <USB_FlushRxFifo+0x5c>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d901      	bls.n	8008e46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008e42:	2303      	movs	r3, #3
 8008e44:	e018      	b.n	8008e78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	daf2      	bge.n	8008e34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2210      	movs	r2, #16
 8008e56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	4a08      	ldr	r2, [pc, #32]	; (8008e84 <USB_FlushRxFifo+0x5c>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d901      	bls.n	8008e6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008e66:	2303      	movs	r3, #3
 8008e68:	e006      	b.n	8008e78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	691b      	ldr	r3, [r3, #16]
 8008e6e:	f003 0310 	and.w	r3, r3, #16
 8008e72:	2b10      	cmp	r3, #16
 8008e74:	d0f0      	beq.n	8008e58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3714      	adds	r7, #20
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr
 8008e84:	00030d40 	.word	0x00030d40

08008e88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	460b      	mov	r3, r1
 8008e92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	78fb      	ldrb	r3, [r7, #3]
 8008ea2:	68f9      	ldr	r1, [r7, #12]
 8008ea4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3714      	adds	r7, #20
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr

08008eba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008eba:	b480      	push	{r7}
 8008ebc:	b087      	sub	sp, #28
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	f003 0306 	and.w	r3, r3, #6
 8008ed2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d102      	bne.n	8008ee0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008eda:	2300      	movs	r3, #0
 8008edc:	75fb      	strb	r3, [r7, #23]
 8008ede:	e00a      	b.n	8008ef6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d002      	beq.n	8008eec <USB_GetDevSpeed+0x32>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2b06      	cmp	r3, #6
 8008eea:	d102      	bne.n	8008ef2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008eec:	2302      	movs	r3, #2
 8008eee:	75fb      	strb	r3, [r7, #23]
 8008ef0:	e001      	b.n	8008ef6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008ef2:	230f      	movs	r3, #15
 8008ef4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	371c      	adds	r7, #28
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	785b      	ldrb	r3, [r3, #1]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d139      	bne.n	8008f94 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f26:	69da      	ldr	r2, [r3, #28]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	f003 030f 	and.w	r3, r3, #15
 8008f30:	2101      	movs	r1, #1
 8008f32:	fa01 f303 	lsl.w	r3, r1, r3
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	68f9      	ldr	r1, [r7, #12]
 8008f3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	015a      	lsls	r2, r3, #5
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	4413      	add	r3, r2
 8008f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d153      	bne.n	8009000 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	015a      	lsls	r2, r3, #5
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	4413      	add	r3, r2
 8008f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	791b      	ldrb	r3, [r3, #4]
 8008f72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	059b      	lsls	r3, r3, #22
 8008f7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f7c:	431a      	orrs	r2, r3
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	0159      	lsls	r1, r3, #5
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	440b      	add	r3, r1
 8008f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	4b20      	ldr	r3, [pc, #128]	; (8009010 <USB_ActivateEndpoint+0x10c>)
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	600b      	str	r3, [r1, #0]
 8008f92:	e035      	b.n	8009000 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f9a:	69da      	ldr	r2, [r3, #28]
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	f003 030f 	and.w	r3, r3, #15
 8008fa4:	2101      	movs	r1, #1
 8008fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8008faa:	041b      	lsls	r3, r3, #16
 8008fac:	68f9      	ldr	r1, [r7, #12]
 8008fae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	015a      	lsls	r2, r3, #5
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d119      	bne.n	8009000 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	015a      	lsls	r2, r3, #5
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	791b      	ldrb	r3, [r3, #4]
 8008fe6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008fe8:	430b      	orrs	r3, r1
 8008fea:	431a      	orrs	r2, r3
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	0159      	lsls	r1, r3, #5
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	440b      	add	r3, r1
 8008ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	4b05      	ldr	r3, [pc, #20]	; (8009010 <USB_ActivateEndpoint+0x10c>)
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009000:	2300      	movs	r3, #0
}
 8009002:	4618      	mov	r0, r3
 8009004:	3714      	adds	r7, #20
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	10008000 	.word	0x10008000

08009014 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	785b      	ldrb	r3, [r3, #1]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d161      	bne.n	80090f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	015a      	lsls	r2, r3, #5
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	4413      	add	r3, r2
 8009038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009042:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009046:	d11f      	bne.n	8009088 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	015a      	lsls	r2, r3, #5
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	4413      	add	r3, r2
 8009050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68ba      	ldr	r2, [r7, #8]
 8009058:	0151      	lsls	r1, r2, #5
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	440a      	add	r2, r1
 800905e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009062:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009066:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	015a      	lsls	r2, r3, #5
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	4413      	add	r3, r2
 8009070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	0151      	lsls	r1, r2, #5
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	440a      	add	r2, r1
 800907e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009082:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009086:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800908e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	f003 030f 	and.w	r3, r3, #15
 8009098:	2101      	movs	r1, #1
 800909a:	fa01 f303 	lsl.w	r3, r1, r3
 800909e:	b29b      	uxth	r3, r3
 80090a0:	43db      	mvns	r3, r3
 80090a2:	68f9      	ldr	r1, [r7, #12]
 80090a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090a8:	4013      	ands	r3, r2
 80090aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b2:	69da      	ldr	r2, [r3, #28]
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	f003 030f 	and.w	r3, r3, #15
 80090bc:	2101      	movs	r1, #1
 80090be:	fa01 f303 	lsl.w	r3, r1, r3
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	43db      	mvns	r3, r3
 80090c6:	68f9      	ldr	r1, [r7, #12]
 80090c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090cc:	4013      	ands	r3, r2
 80090ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	015a      	lsls	r2, r3, #5
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	0159      	lsls	r1, r3, #5
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	440b      	add	r3, r1
 80090e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ea:	4619      	mov	r1, r3
 80090ec:	4b35      	ldr	r3, [pc, #212]	; (80091c4 <USB_DeactivateEndpoint+0x1b0>)
 80090ee:	4013      	ands	r3, r2
 80090f0:	600b      	str	r3, [r1, #0]
 80090f2:	e060      	b.n	80091b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	015a      	lsls	r2, r3, #5
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	4413      	add	r3, r2
 80090fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009106:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800910a:	d11f      	bne.n	800914c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	015a      	lsls	r2, r3, #5
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	4413      	add	r3, r2
 8009114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	0151      	lsls	r1, r2, #5
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	440a      	add	r2, r1
 8009122:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009126:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800912a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	015a      	lsls	r2, r3, #5
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	4413      	add	r3, r2
 8009134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68ba      	ldr	r2, [r7, #8]
 800913c:	0151      	lsls	r1, r2, #5
 800913e:	68fa      	ldr	r2, [r7, #12]
 8009140:	440a      	add	r2, r1
 8009142:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009146:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800914a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009152:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	f003 030f 	and.w	r3, r3, #15
 800915c:	2101      	movs	r1, #1
 800915e:	fa01 f303 	lsl.w	r3, r1, r3
 8009162:	041b      	lsls	r3, r3, #16
 8009164:	43db      	mvns	r3, r3
 8009166:	68f9      	ldr	r1, [r7, #12]
 8009168:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800916c:	4013      	ands	r3, r2
 800916e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009176:	69da      	ldr	r2, [r3, #28]
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	f003 030f 	and.w	r3, r3, #15
 8009180:	2101      	movs	r1, #1
 8009182:	fa01 f303 	lsl.w	r3, r1, r3
 8009186:	041b      	lsls	r3, r3, #16
 8009188:	43db      	mvns	r3, r3
 800918a:	68f9      	ldr	r1, [r7, #12]
 800918c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009190:	4013      	ands	r3, r2
 8009192:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	015a      	lsls	r2, r3, #5
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	4413      	add	r3, r2
 800919c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	0159      	lsls	r1, r3, #5
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	440b      	add	r3, r1
 80091aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ae:	4619      	mov	r1, r3
 80091b0:	4b05      	ldr	r3, [pc, #20]	; (80091c8 <USB_DeactivateEndpoint+0x1b4>)
 80091b2:	4013      	ands	r3, r2
 80091b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3714      	adds	r7, #20
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr
 80091c4:	ec337800 	.word	0xec337800
 80091c8:	eff37800 	.word	0xeff37800

080091cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b08a      	sub	sp, #40	; 0x28
 80091d0:	af02      	add	r7, sp, #8
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	4613      	mov	r3, r2
 80091d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	785b      	ldrb	r3, [r3, #1]
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	f040 8163 	bne.w	80094b4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	699b      	ldr	r3, [r3, #24]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d132      	bne.n	800925c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	015a      	lsls	r2, r3, #5
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	4413      	add	r3, r2
 80091fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009202:	691a      	ldr	r2, [r3, #16]
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	0159      	lsls	r1, r3, #5
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	440b      	add	r3, r1
 800920c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009210:	4619      	mov	r1, r3
 8009212:	4ba5      	ldr	r3, [pc, #660]	; (80094a8 <USB_EPStartXfer+0x2dc>)
 8009214:	4013      	ands	r3, r2
 8009216:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	015a      	lsls	r2, r3, #5
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	4413      	add	r3, r2
 8009220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009224:	691b      	ldr	r3, [r3, #16]
 8009226:	69ba      	ldr	r2, [r7, #24]
 8009228:	0151      	lsls	r1, r2, #5
 800922a:	69fa      	ldr	r2, [r7, #28]
 800922c:	440a      	add	r2, r1
 800922e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009232:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009236:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	015a      	lsls	r2, r3, #5
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	4413      	add	r3, r2
 8009240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009244:	691a      	ldr	r2, [r3, #16]
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	0159      	lsls	r1, r3, #5
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	440b      	add	r3, r1
 800924e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009252:	4619      	mov	r1, r3
 8009254:	4b95      	ldr	r3, [pc, #596]	; (80094ac <USB_EPStartXfer+0x2e0>)
 8009256:	4013      	ands	r3, r2
 8009258:	610b      	str	r3, [r1, #16]
 800925a:	e074      	b.n	8009346 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	015a      	lsls	r2, r3, #5
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	4413      	add	r3, r2
 8009264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009268:	691a      	ldr	r2, [r3, #16]
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	0159      	lsls	r1, r3, #5
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	440b      	add	r3, r1
 8009272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009276:	4619      	mov	r1, r3
 8009278:	4b8c      	ldr	r3, [pc, #560]	; (80094ac <USB_EPStartXfer+0x2e0>)
 800927a:	4013      	ands	r3, r2
 800927c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	015a      	lsls	r2, r3, #5
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	4413      	add	r3, r2
 8009286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800928a:	691a      	ldr	r2, [r3, #16]
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	0159      	lsls	r1, r3, #5
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	440b      	add	r3, r1
 8009294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009298:	4619      	mov	r1, r3
 800929a:	4b83      	ldr	r3, [pc, #524]	; (80094a8 <USB_EPStartXfer+0x2dc>)
 800929c:	4013      	ands	r3, r2
 800929e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	015a      	lsls	r2, r3, #5
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	4413      	add	r3, r2
 80092a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ac:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	6999      	ldr	r1, [r3, #24]
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	440b      	add	r3, r1
 80092b8:	1e59      	subs	r1, r3, #1
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	fbb1 f3f3 	udiv	r3, r1, r3
 80092c2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80092c4:	4b7a      	ldr	r3, [pc, #488]	; (80094b0 <USB_EPStartXfer+0x2e4>)
 80092c6:	400b      	ands	r3, r1
 80092c8:	69b9      	ldr	r1, [r7, #24]
 80092ca:	0148      	lsls	r0, r1, #5
 80092cc:	69f9      	ldr	r1, [r7, #28]
 80092ce:	4401      	add	r1, r0
 80092d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80092d4:	4313      	orrs	r3, r2
 80092d6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	015a      	lsls	r2, r3, #5
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	4413      	add	r3, r2
 80092e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092e4:	691a      	ldr	r2, [r3, #16]
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	699b      	ldr	r3, [r3, #24]
 80092ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092ee:	69b9      	ldr	r1, [r7, #24]
 80092f0:	0148      	lsls	r0, r1, #5
 80092f2:	69f9      	ldr	r1, [r7, #28]
 80092f4:	4401      	add	r1, r0
 80092f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80092fa:	4313      	orrs	r3, r2
 80092fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	791b      	ldrb	r3, [r3, #4]
 8009302:	2b01      	cmp	r3, #1
 8009304:	d11f      	bne.n	8009346 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	015a      	lsls	r2, r3, #5
 800930a:	69fb      	ldr	r3, [r7, #28]
 800930c:	4413      	add	r3, r2
 800930e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	69ba      	ldr	r2, [r7, #24]
 8009316:	0151      	lsls	r1, r2, #5
 8009318:	69fa      	ldr	r2, [r7, #28]
 800931a:	440a      	add	r2, r1
 800931c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009320:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009324:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	015a      	lsls	r2, r3, #5
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	4413      	add	r3, r2
 800932e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	69ba      	ldr	r2, [r7, #24]
 8009336:	0151      	lsls	r1, r2, #5
 8009338:	69fa      	ldr	r2, [r7, #28]
 800933a:	440a      	add	r2, r1
 800933c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009340:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009344:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009346:	79fb      	ldrb	r3, [r7, #7]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d14b      	bne.n	80093e4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	695b      	ldr	r3, [r3, #20]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d009      	beq.n	8009368 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	015a      	lsls	r2, r3, #5
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	4413      	add	r3, r2
 800935c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009360:	461a      	mov	r2, r3
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	695b      	ldr	r3, [r3, #20]
 8009366:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	791b      	ldrb	r3, [r3, #4]
 800936c:	2b01      	cmp	r3, #1
 800936e:	d128      	bne.n	80093c2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800937c:	2b00      	cmp	r3, #0
 800937e:	d110      	bne.n	80093a2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	015a      	lsls	r2, r3, #5
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	4413      	add	r3, r2
 8009388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	69ba      	ldr	r2, [r7, #24]
 8009390:	0151      	lsls	r1, r2, #5
 8009392:	69fa      	ldr	r2, [r7, #28]
 8009394:	440a      	add	r2, r1
 8009396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800939a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800939e:	6013      	str	r3, [r2, #0]
 80093a0:	e00f      	b.n	80093c2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	015a      	lsls	r2, r3, #5
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	4413      	add	r3, r2
 80093aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	69ba      	ldr	r2, [r7, #24]
 80093b2:	0151      	lsls	r1, r2, #5
 80093b4:	69fa      	ldr	r2, [r7, #28]
 80093b6:	440a      	add	r2, r1
 80093b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093c0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	015a      	lsls	r2, r3, #5
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	4413      	add	r3, r2
 80093ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	69ba      	ldr	r2, [r7, #24]
 80093d2:	0151      	lsls	r1, r2, #5
 80093d4:	69fa      	ldr	r2, [r7, #28]
 80093d6:	440a      	add	r2, r1
 80093d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80093e0:	6013      	str	r3, [r2, #0]
 80093e2:	e137      	b.n	8009654 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	015a      	lsls	r2, r3, #5
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	4413      	add	r3, r2
 80093ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	69ba      	ldr	r2, [r7, #24]
 80093f4:	0151      	lsls	r1, r2, #5
 80093f6:	69fa      	ldr	r2, [r7, #28]
 80093f8:	440a      	add	r2, r1
 80093fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009402:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	791b      	ldrb	r3, [r3, #4]
 8009408:	2b01      	cmp	r3, #1
 800940a:	d015      	beq.n	8009438 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	2b00      	cmp	r3, #0
 8009412:	f000 811f 	beq.w	8009654 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800941c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	f003 030f 	and.w	r3, r3, #15
 8009426:	2101      	movs	r1, #1
 8009428:	fa01 f303 	lsl.w	r3, r1, r3
 800942c:	69f9      	ldr	r1, [r7, #28]
 800942e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009432:	4313      	orrs	r3, r2
 8009434:	634b      	str	r3, [r1, #52]	; 0x34
 8009436:	e10d      	b.n	8009654 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009444:	2b00      	cmp	r3, #0
 8009446:	d110      	bne.n	800946a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	015a      	lsls	r2, r3, #5
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	4413      	add	r3, r2
 8009450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	69ba      	ldr	r2, [r7, #24]
 8009458:	0151      	lsls	r1, r2, #5
 800945a:	69fa      	ldr	r2, [r7, #28]
 800945c:	440a      	add	r2, r1
 800945e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009462:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009466:	6013      	str	r3, [r2, #0]
 8009468:	e00f      	b.n	800948a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	015a      	lsls	r2, r3, #5
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	4413      	add	r3, r2
 8009472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	69ba      	ldr	r2, [r7, #24]
 800947a:	0151      	lsls	r1, r2, #5
 800947c:	69fa      	ldr	r2, [r7, #28]
 800947e:	440a      	add	r2, r1
 8009480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009488:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	6919      	ldr	r1, [r3, #16]
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	781a      	ldrb	r2, [r3, #0]
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	699b      	ldr	r3, [r3, #24]
 8009496:	b298      	uxth	r0, r3
 8009498:	79fb      	ldrb	r3, [r7, #7]
 800949a:	9300      	str	r3, [sp, #0]
 800949c:	4603      	mov	r3, r0
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	f000 faea 	bl	8009a78 <USB_WritePacket>
 80094a4:	e0d6      	b.n	8009654 <USB_EPStartXfer+0x488>
 80094a6:	bf00      	nop
 80094a8:	e007ffff 	.word	0xe007ffff
 80094ac:	fff80000 	.word	0xfff80000
 80094b0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	015a      	lsls	r2, r3, #5
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	4413      	add	r3, r2
 80094bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c0:	691a      	ldr	r2, [r3, #16]
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	0159      	lsls	r1, r3, #5
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	440b      	add	r3, r1
 80094ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ce:	4619      	mov	r1, r3
 80094d0:	4b63      	ldr	r3, [pc, #396]	; (8009660 <USB_EPStartXfer+0x494>)
 80094d2:	4013      	ands	r3, r2
 80094d4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	015a      	lsls	r2, r3, #5
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	4413      	add	r3, r2
 80094de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094e2:	691a      	ldr	r2, [r3, #16]
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	0159      	lsls	r1, r3, #5
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	440b      	add	r3, r1
 80094ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094f0:	4619      	mov	r1, r3
 80094f2:	4b5c      	ldr	r3, [pc, #368]	; (8009664 <USB_EPStartXfer+0x498>)
 80094f4:	4013      	ands	r3, r2
 80094f6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d123      	bne.n	8009548 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	015a      	lsls	r2, r3, #5
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	4413      	add	r3, r2
 8009508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800950c:	691a      	ldr	r2, [r3, #16]
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009516:	69b9      	ldr	r1, [r7, #24]
 8009518:	0148      	lsls	r0, r1, #5
 800951a:	69f9      	ldr	r1, [r7, #28]
 800951c:	4401      	add	r1, r0
 800951e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009522:	4313      	orrs	r3, r2
 8009524:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	015a      	lsls	r2, r3, #5
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	4413      	add	r3, r2
 800952e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	69ba      	ldr	r2, [r7, #24]
 8009536:	0151      	lsls	r1, r2, #5
 8009538:	69fa      	ldr	r2, [r7, #28]
 800953a:	440a      	add	r2, r1
 800953c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009540:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009544:	6113      	str	r3, [r2, #16]
 8009546:	e037      	b.n	80095b8 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	699a      	ldr	r2, [r3, #24]
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	4413      	add	r3, r2
 8009552:	1e5a      	subs	r2, r3, #1
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	fbb2 f3f3 	udiv	r3, r2, r3
 800955c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	8afa      	ldrh	r2, [r7, #22]
 8009564:	fb03 f202 	mul.w	r2, r3, r2
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	015a      	lsls	r2, r3, #5
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	4413      	add	r3, r2
 8009574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009578:	691a      	ldr	r2, [r3, #16]
 800957a:	8afb      	ldrh	r3, [r7, #22]
 800957c:	04d9      	lsls	r1, r3, #19
 800957e:	4b3a      	ldr	r3, [pc, #232]	; (8009668 <USB_EPStartXfer+0x49c>)
 8009580:	400b      	ands	r3, r1
 8009582:	69b9      	ldr	r1, [r7, #24]
 8009584:	0148      	lsls	r0, r1, #5
 8009586:	69f9      	ldr	r1, [r7, #28]
 8009588:	4401      	add	r1, r0
 800958a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800958e:	4313      	orrs	r3, r2
 8009590:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	015a      	lsls	r2, r3, #5
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	4413      	add	r3, r2
 800959a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800959e:	691a      	ldr	r2, [r3, #16]
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	69db      	ldr	r3, [r3, #28]
 80095a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095a8:	69b9      	ldr	r1, [r7, #24]
 80095aa:	0148      	lsls	r0, r1, #5
 80095ac:	69f9      	ldr	r1, [r7, #28]
 80095ae:	4401      	add	r1, r0
 80095b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80095b4:	4313      	orrs	r3, r2
 80095b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80095b8:	79fb      	ldrb	r3, [r7, #7]
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d10d      	bne.n	80095da <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	691b      	ldr	r3, [r3, #16]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d009      	beq.n	80095da <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	6919      	ldr	r1, [r3, #16]
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	015a      	lsls	r2, r3, #5
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	4413      	add	r3, r2
 80095d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095d6:	460a      	mov	r2, r1
 80095d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	791b      	ldrb	r3, [r3, #4]
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d128      	bne.n	8009634 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d110      	bne.n	8009614 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	015a      	lsls	r2, r3, #5
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	4413      	add	r3, r2
 80095fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	69ba      	ldr	r2, [r7, #24]
 8009602:	0151      	lsls	r1, r2, #5
 8009604:	69fa      	ldr	r2, [r7, #28]
 8009606:	440a      	add	r2, r1
 8009608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800960c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009610:	6013      	str	r3, [r2, #0]
 8009612:	e00f      	b.n	8009634 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	015a      	lsls	r2, r3, #5
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	4413      	add	r3, r2
 800961c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	69ba      	ldr	r2, [r7, #24]
 8009624:	0151      	lsls	r1, r2, #5
 8009626:	69fa      	ldr	r2, [r7, #28]
 8009628:	440a      	add	r2, r1
 800962a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800962e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009632:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009634:	69bb      	ldr	r3, [r7, #24]
 8009636:	015a      	lsls	r2, r3, #5
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	4413      	add	r3, r2
 800963c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	69ba      	ldr	r2, [r7, #24]
 8009644:	0151      	lsls	r1, r2, #5
 8009646:	69fa      	ldr	r2, [r7, #28]
 8009648:	440a      	add	r2, r1
 800964a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800964e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009652:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3720      	adds	r7, #32
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	fff80000 	.word	0xfff80000
 8009664:	e007ffff 	.word	0xe007ffff
 8009668:	1ff80000 	.word	0x1ff80000

0800966c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800966c:	b480      	push	{r7}
 800966e:	b087      	sub	sp, #28
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	4613      	mov	r3, r2
 8009678:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	785b      	ldrb	r3, [r3, #1]
 8009688:	2b01      	cmp	r3, #1
 800968a:	f040 80ce 	bne.w	800982a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d132      	bne.n	80096fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	015a      	lsls	r2, r3, #5
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	4413      	add	r3, r2
 800969e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a2:	691a      	ldr	r2, [r3, #16]
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	0159      	lsls	r1, r3, #5
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	440b      	add	r3, r1
 80096ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096b0:	4619      	mov	r1, r3
 80096b2:	4b9a      	ldr	r3, [pc, #616]	; (800991c <USB_EP0StartXfer+0x2b0>)
 80096b4:	4013      	ands	r3, r2
 80096b6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	015a      	lsls	r2, r3, #5
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	4413      	add	r3, r2
 80096c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	693a      	ldr	r2, [r7, #16]
 80096c8:	0151      	lsls	r1, r2, #5
 80096ca:	697a      	ldr	r2, [r7, #20]
 80096cc:	440a      	add	r2, r1
 80096ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	015a      	lsls	r2, r3, #5
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	4413      	add	r3, r2
 80096e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096e4:	691a      	ldr	r2, [r3, #16]
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	0159      	lsls	r1, r3, #5
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	440b      	add	r3, r1
 80096ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096f2:	4619      	mov	r1, r3
 80096f4:	4b8a      	ldr	r3, [pc, #552]	; (8009920 <USB_EP0StartXfer+0x2b4>)
 80096f6:	4013      	ands	r3, r2
 80096f8:	610b      	str	r3, [r1, #16]
 80096fa:	e04e      	b.n	800979a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	015a      	lsls	r2, r3, #5
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	4413      	add	r3, r2
 8009704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009708:	691a      	ldr	r2, [r3, #16]
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	0159      	lsls	r1, r3, #5
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	440b      	add	r3, r1
 8009712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009716:	4619      	mov	r1, r3
 8009718:	4b81      	ldr	r3, [pc, #516]	; (8009920 <USB_EP0StartXfer+0x2b4>)
 800971a:	4013      	ands	r3, r2
 800971c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	015a      	lsls	r2, r3, #5
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	4413      	add	r3, r2
 8009726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800972a:	691a      	ldr	r2, [r3, #16]
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	0159      	lsls	r1, r3, #5
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	440b      	add	r3, r1
 8009734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009738:	4619      	mov	r1, r3
 800973a:	4b78      	ldr	r3, [pc, #480]	; (800991c <USB_EP0StartXfer+0x2b0>)
 800973c:	4013      	ands	r3, r2
 800973e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	699a      	ldr	r2, [r3, #24]
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	429a      	cmp	r2, r3
 800974a:	d903      	bls.n	8009754 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	68da      	ldr	r2, [r3, #12]
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	015a      	lsls	r2, r3, #5
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	4413      	add	r3, r2
 800975c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	693a      	ldr	r2, [r7, #16]
 8009764:	0151      	lsls	r1, r2, #5
 8009766:	697a      	ldr	r2, [r7, #20]
 8009768:	440a      	add	r2, r1
 800976a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800976e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009772:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	015a      	lsls	r2, r3, #5
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	4413      	add	r3, r2
 800977c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009780:	691a      	ldr	r2, [r3, #16]
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	699b      	ldr	r3, [r3, #24]
 8009786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800978a:	6939      	ldr	r1, [r7, #16]
 800978c:	0148      	lsls	r0, r1, #5
 800978e:	6979      	ldr	r1, [r7, #20]
 8009790:	4401      	add	r1, r0
 8009792:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009796:	4313      	orrs	r3, r2
 8009798:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800979a:	79fb      	ldrb	r3, [r7, #7]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d11e      	bne.n	80097de <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	695b      	ldr	r3, [r3, #20]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d009      	beq.n	80097bc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	015a      	lsls	r2, r3, #5
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	4413      	add	r3, r2
 80097b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097b4:	461a      	mov	r2, r3
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	695b      	ldr	r3, [r3, #20]
 80097ba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	015a      	lsls	r2, r3, #5
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	4413      	add	r3, r2
 80097c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	693a      	ldr	r2, [r7, #16]
 80097cc:	0151      	lsls	r1, r2, #5
 80097ce:	697a      	ldr	r2, [r7, #20]
 80097d0:	440a      	add	r2, r1
 80097d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80097da:	6013      	str	r3, [r2, #0]
 80097dc:	e097      	b.n	800990e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	015a      	lsls	r2, r3, #5
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	4413      	add	r3, r2
 80097e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	693a      	ldr	r2, [r7, #16]
 80097ee:	0151      	lsls	r1, r2, #5
 80097f0:	697a      	ldr	r2, [r7, #20]
 80097f2:	440a      	add	r2, r1
 80097f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80097fc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	699b      	ldr	r3, [r3, #24]
 8009802:	2b00      	cmp	r3, #0
 8009804:	f000 8083 	beq.w	800990e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800980e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	f003 030f 	and.w	r3, r3, #15
 8009818:	2101      	movs	r1, #1
 800981a:	fa01 f303 	lsl.w	r3, r1, r3
 800981e:	6979      	ldr	r1, [r7, #20]
 8009820:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009824:	4313      	orrs	r3, r2
 8009826:	634b      	str	r3, [r1, #52]	; 0x34
 8009828:	e071      	b.n	800990e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	015a      	lsls	r2, r3, #5
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	4413      	add	r3, r2
 8009832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009836:	691a      	ldr	r2, [r3, #16]
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	0159      	lsls	r1, r3, #5
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	440b      	add	r3, r1
 8009840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009844:	4619      	mov	r1, r3
 8009846:	4b36      	ldr	r3, [pc, #216]	; (8009920 <USB_EP0StartXfer+0x2b4>)
 8009848:	4013      	ands	r3, r2
 800984a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	015a      	lsls	r2, r3, #5
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	4413      	add	r3, r2
 8009854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009858:	691a      	ldr	r2, [r3, #16]
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	0159      	lsls	r1, r3, #5
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	440b      	add	r3, r1
 8009862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009866:	4619      	mov	r1, r3
 8009868:	4b2c      	ldr	r3, [pc, #176]	; (800991c <USB_EP0StartXfer+0x2b0>)
 800986a:	4013      	ands	r3, r2
 800986c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	699b      	ldr	r3, [r3, #24]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d003      	beq.n	800987e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	68da      	ldr	r2, [r3, #12]
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	68da      	ldr	r2, [r3, #12]
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	015a      	lsls	r2, r3, #5
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	4413      	add	r3, r2
 800988e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	693a      	ldr	r2, [r7, #16]
 8009896:	0151      	lsls	r1, r2, #5
 8009898:	697a      	ldr	r2, [r7, #20]
 800989a:	440a      	add	r2, r1
 800989c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	015a      	lsls	r2, r3, #5
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	4413      	add	r3, r2
 80098ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098b2:	691a      	ldr	r2, [r3, #16]
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	69db      	ldr	r3, [r3, #28]
 80098b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098bc:	6939      	ldr	r1, [r7, #16]
 80098be:	0148      	lsls	r0, r1, #5
 80098c0:	6979      	ldr	r1, [r7, #20]
 80098c2:	4401      	add	r1, r0
 80098c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80098c8:	4313      	orrs	r3, r2
 80098ca:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80098cc:	79fb      	ldrb	r3, [r7, #7]
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d10d      	bne.n	80098ee <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d009      	beq.n	80098ee <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	6919      	ldr	r1, [r3, #16]
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	015a      	lsls	r2, r3, #5
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	4413      	add	r3, r2
 80098e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ea:	460a      	mov	r2, r1
 80098ec:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	015a      	lsls	r2, r3, #5
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	4413      	add	r3, r2
 80098f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	0151      	lsls	r1, r2, #5
 8009900:	697a      	ldr	r2, [r7, #20]
 8009902:	440a      	add	r2, r1
 8009904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009908:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800990c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800990e:	2300      	movs	r3, #0
}
 8009910:	4618      	mov	r0, r3
 8009912:	371c      	adds	r7, #28
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr
 800991c:	e007ffff 	.word	0xe007ffff
 8009920:	fff80000 	.word	0xfff80000

08009924 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009924:	b480      	push	{r7}
 8009926:	b087      	sub	sp, #28
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800992e:	2300      	movs	r3, #0
 8009930:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009932:	2300      	movs	r3, #0
 8009934:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	785b      	ldrb	r3, [r3, #1]
 800993e:	2b01      	cmp	r3, #1
 8009940:	d14a      	bne.n	80099d8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	015a      	lsls	r2, r3, #5
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	4413      	add	r3, r2
 800994c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009956:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800995a:	f040 8086 	bne.w	8009a6a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	015a      	lsls	r2, r3, #5
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	4413      	add	r3, r2
 8009968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	683a      	ldr	r2, [r7, #0]
 8009970:	7812      	ldrb	r2, [r2, #0]
 8009972:	0151      	lsls	r1, r2, #5
 8009974:	693a      	ldr	r2, [r7, #16]
 8009976:	440a      	add	r2, r1
 8009978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800997c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009980:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	015a      	lsls	r2, r3, #5
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	4413      	add	r3, r2
 800998c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	683a      	ldr	r2, [r7, #0]
 8009994:	7812      	ldrb	r2, [r2, #0]
 8009996:	0151      	lsls	r1, r2, #5
 8009998:	693a      	ldr	r2, [r7, #16]
 800999a:	440a      	add	r2, r1
 800999c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	3301      	adds	r3, #1
 80099aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d902      	bls.n	80099bc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	75fb      	strb	r3, [r7, #23]
          break;
 80099ba:	e056      	b.n	8009a6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	015a      	lsls	r2, r3, #5
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	4413      	add	r3, r2
 80099c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099d4:	d0e7      	beq.n	80099a6 <USB_EPStopXfer+0x82>
 80099d6:	e048      	b.n	8009a6a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	015a      	lsls	r2, r3, #5
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	4413      	add	r3, r2
 80099e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099f0:	d13b      	bne.n	8009a6a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	015a      	lsls	r2, r3, #5
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	4413      	add	r3, r2
 80099fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	7812      	ldrb	r2, [r2, #0]
 8009a06:	0151      	lsls	r1, r2, #5
 8009a08:	693a      	ldr	r2, [r7, #16]
 8009a0a:	440a      	add	r2, r1
 8009a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a14:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	015a      	lsls	r2, r3, #5
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	4413      	add	r3, r2
 8009a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	683a      	ldr	r2, [r7, #0]
 8009a28:	7812      	ldrb	r2, [r2, #0]
 8009a2a:	0151      	lsls	r1, r2, #5
 8009a2c:	693a      	ldr	r2, [r7, #16]
 8009a2e:	440a      	add	r2, r1
 8009a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f242 7210 	movw	r2, #10000	; 0x2710
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d902      	bls.n	8009a50 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	75fb      	strb	r3, [r7, #23]
          break;
 8009a4e:	e00c      	b.n	8009a6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	015a      	lsls	r2, r3, #5
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	4413      	add	r3, r2
 8009a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a68:	d0e7      	beq.n	8009a3a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	371c      	adds	r7, #28
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b089      	sub	sp, #36	; 0x24
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	4611      	mov	r1, r2
 8009a84:	461a      	mov	r2, r3
 8009a86:	460b      	mov	r3, r1
 8009a88:	71fb      	strb	r3, [r7, #7]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009a96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d123      	bne.n	8009ae6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009a9e:	88bb      	ldrh	r3, [r7, #4]
 8009aa0:	3303      	adds	r3, #3
 8009aa2:	089b      	lsrs	r3, r3, #2
 8009aa4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	61bb      	str	r3, [r7, #24]
 8009aaa:	e018      	b.n	8009ade <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009aac:	79fb      	ldrb	r3, [r7, #7]
 8009aae:	031a      	lsls	r2, r3, #12
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ab8:	461a      	mov	r2, r3
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009acc:	69fb      	ldr	r3, [r7, #28]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009ad8:	69bb      	ldr	r3, [r7, #24]
 8009ada:	3301      	adds	r3, #1
 8009adc:	61bb      	str	r3, [r7, #24]
 8009ade:	69ba      	ldr	r2, [r7, #24]
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d3e2      	bcc.n	8009aac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009ae6:	2300      	movs	r3, #0
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3724      	adds	r7, #36	; 0x24
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b08b      	sub	sp, #44	; 0x2c
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	4613      	mov	r3, r2
 8009b00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009b0a:	88fb      	ldrh	r3, [r7, #6]
 8009b0c:	089b      	lsrs	r3, r3, #2
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009b12:	88fb      	ldrh	r3, [r7, #6]
 8009b14:	f003 0303 	and.w	r3, r3, #3
 8009b18:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	623b      	str	r3, [r7, #32]
 8009b1e:	e014      	b.n	8009b4a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2a:	601a      	str	r2, [r3, #0]
    pDest++;
 8009b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2e:	3301      	adds	r3, #1
 8009b30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b34:	3301      	adds	r3, #1
 8009b36:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b40:	3301      	adds	r3, #1
 8009b42:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009b44:	6a3b      	ldr	r3, [r7, #32]
 8009b46:	3301      	adds	r3, #1
 8009b48:	623b      	str	r3, [r7, #32]
 8009b4a:	6a3a      	ldr	r2, [r7, #32]
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d3e6      	bcc.n	8009b20 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009b52:	8bfb      	ldrh	r3, [r7, #30]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d01e      	beq.n	8009b96 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b62:	461a      	mov	r2, r3
 8009b64:	f107 0310 	add.w	r3, r7, #16
 8009b68:	6812      	ldr	r2, [r2, #0]
 8009b6a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009b6c:	693a      	ldr	r2, [r7, #16]
 8009b6e:	6a3b      	ldr	r3, [r7, #32]
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	00db      	lsls	r3, r3, #3
 8009b74:	fa22 f303 	lsr.w	r3, r2, r3
 8009b78:	b2da      	uxtb	r2, r3
 8009b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7c:	701a      	strb	r2, [r3, #0]
      i++;
 8009b7e:	6a3b      	ldr	r3, [r7, #32]
 8009b80:	3301      	adds	r3, #1
 8009b82:	623b      	str	r3, [r7, #32]
      pDest++;
 8009b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b86:	3301      	adds	r3, #1
 8009b88:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009b8a:	8bfb      	ldrh	r3, [r7, #30]
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009b90:	8bfb      	ldrh	r3, [r7, #30]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d1ea      	bne.n	8009b6c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	372c      	adds	r7, #44	; 0x2c
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	785b      	ldrb	r3, [r3, #1]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d12c      	bne.n	8009c1a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	015a      	lsls	r2, r3, #5
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	4413      	add	r3, r2
 8009bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	db12      	blt.n	8009bf8 <USB_EPSetStall+0x54>
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00f      	beq.n	8009bf8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	015a      	lsls	r2, r3, #5
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	4413      	add	r3, r2
 8009be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	0151      	lsls	r1, r2, #5
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	440a      	add	r2, r1
 8009bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bf2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009bf6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	015a      	lsls	r2, r3, #5
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	4413      	add	r3, r2
 8009c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	68ba      	ldr	r2, [r7, #8]
 8009c08:	0151      	lsls	r1, r2, #5
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	440a      	add	r2, r1
 8009c0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c16:	6013      	str	r3, [r2, #0]
 8009c18:	e02b      	b.n	8009c72 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	015a      	lsls	r2, r3, #5
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	4413      	add	r3, r2
 8009c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	db12      	blt.n	8009c52 <USB_EPSetStall+0xae>
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00f      	beq.n	8009c52 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	015a      	lsls	r2, r3, #5
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	4413      	add	r3, r2
 8009c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	68ba      	ldr	r2, [r7, #8]
 8009c42:	0151      	lsls	r1, r2, #5
 8009c44:	68fa      	ldr	r2, [r7, #12]
 8009c46:	440a      	add	r2, r1
 8009c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c50:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	015a      	lsls	r2, r3, #5
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	4413      	add	r3, r2
 8009c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	68ba      	ldr	r2, [r7, #8]
 8009c62:	0151      	lsls	r1, r2, #5
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	440a      	add	r2, r1
 8009c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3714      	adds	r7, #20
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b085      	sub	sp, #20
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	785b      	ldrb	r3, [r3, #1]
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d128      	bne.n	8009cee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	015a      	lsls	r2, r3, #5
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	4413      	add	r3, r2
 8009ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	0151      	lsls	r1, r2, #5
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	440a      	add	r2, r1
 8009cb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009cba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	791b      	ldrb	r3, [r3, #4]
 8009cc0:	2b03      	cmp	r3, #3
 8009cc2:	d003      	beq.n	8009ccc <USB_EPClearStall+0x4c>
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	791b      	ldrb	r3, [r3, #4]
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d138      	bne.n	8009d3e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	015a      	lsls	r2, r3, #5
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	4413      	add	r3, r2
 8009cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	0151      	lsls	r1, r2, #5
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	440a      	add	r2, r1
 8009ce2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cea:	6013      	str	r3, [r2, #0]
 8009cec:	e027      	b.n	8009d3e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	015a      	lsls	r2, r3, #5
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68ba      	ldr	r2, [r7, #8]
 8009cfe:	0151      	lsls	r1, r2, #5
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	440a      	add	r2, r1
 8009d04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d0c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	791b      	ldrb	r3, [r3, #4]
 8009d12:	2b03      	cmp	r3, #3
 8009d14:	d003      	beq.n	8009d1e <USB_EPClearStall+0x9e>
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	791b      	ldrb	r3, [r3, #4]
 8009d1a:	2b02      	cmp	r3, #2
 8009d1c:	d10f      	bne.n	8009d3e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	015a      	lsls	r2, r3, #5
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	4413      	add	r3, r2
 8009d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	68ba      	ldr	r2, [r7, #8]
 8009d2e:	0151      	lsls	r1, r2, #5
 8009d30:	68fa      	ldr	r2, [r7, #12]
 8009d32:	440a      	add	r2, r1
 8009d34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d3c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009d3e:	2300      	movs	r3, #0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3714      	adds	r7, #20
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	460b      	mov	r3, r1
 8009d56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d6a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009d6e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	78fb      	ldrb	r3, [r7, #3]
 8009d7a:	011b      	lsls	r3, r3, #4
 8009d7c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009d80:	68f9      	ldr	r1, [r7, #12]
 8009d82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d86:	4313      	orrs	r3, r2
 8009d88:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3714      	adds	r7, #20
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68fa      	ldr	r2, [r7, #12]
 8009dae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009db2:	f023 0303 	bic.w	r3, r3, #3
 8009db6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009dc6:	f023 0302 	bic.w	r3, r3, #2
 8009dca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009dcc:	2300      	movs	r3, #0
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3714      	adds	r7, #20
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr

08009dda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009dda:	b480      	push	{r7}
 8009ddc:	b085      	sub	sp, #20
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009df4:	f023 0303 	bic.w	r3, r3, #3
 8009df8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e08:	f043 0302 	orr.w	r3, r3, #2
 8009e0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3714      	adds	r7, #20
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b085      	sub	sp, #20
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	695b      	ldr	r3, [r3, #20]
 8009e28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	699b      	ldr	r3, [r3, #24]
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	4013      	ands	r3, r2
 8009e32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009e34:	68fb      	ldr	r3, [r7, #12]
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3714      	adds	r7, #20
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr

08009e42 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e42:	b480      	push	{r7}
 8009e44:	b085      	sub	sp, #20
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e54:	699b      	ldr	r3, [r3, #24]
 8009e56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e5e:	69db      	ldr	r3, [r3, #28]
 8009e60:	68ba      	ldr	r2, [r7, #8]
 8009e62:	4013      	ands	r3, r2
 8009e64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	0c1b      	lsrs	r3, r3, #16
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3714      	adds	r7, #20
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr

08009e76 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e76:	b480      	push	{r7}
 8009e78:	b085      	sub	sp, #20
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e88:	699b      	ldr	r3, [r3, #24]
 8009e8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e92:	69db      	ldr	r3, [r3, #28]
 8009e94:	68ba      	ldr	r2, [r7, #8]
 8009e96:	4013      	ands	r3, r2
 8009e98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	b29b      	uxth	r3, r3
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3714      	adds	r7, #20
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr

08009eaa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009eaa:	b480      	push	{r7}
 8009eac:	b085      	sub	sp, #20
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009eba:	78fb      	ldrb	r3, [r7, #3]
 8009ebc:	015a      	lsls	r2, r3, #5
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ed0:	695b      	ldr	r3, [r3, #20]
 8009ed2:	68ba      	ldr	r2, [r7, #8]
 8009ed4:	4013      	ands	r3, r2
 8009ed6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ed8:	68bb      	ldr	r3, [r7, #8]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3714      	adds	r7, #20
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr

08009ee6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009ee6:	b480      	push	{r7}
 8009ee8:	b087      	sub	sp, #28
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
 8009eee:	460b      	mov	r3, r1
 8009ef0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f08:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009f0a:	78fb      	ldrb	r3, [r7, #3]
 8009f0c:	f003 030f 	and.w	r3, r3, #15
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	fa22 f303 	lsr.w	r3, r2, r3
 8009f16:	01db      	lsls	r3, r3, #7
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	693a      	ldr	r2, [r7, #16]
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009f20:	78fb      	ldrb	r3, [r7, #3]
 8009f22:	015a      	lsls	r2, r3, #5
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	4413      	add	r3, r2
 8009f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	693a      	ldr	r2, [r7, #16]
 8009f30:	4013      	ands	r3, r2
 8009f32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009f34:	68bb      	ldr	r3, [r7, #8]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	371c      	adds	r7, #28
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr

08009f42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009f42:	b480      	push	{r7}
 8009f44:	b083      	sub	sp, #12
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	695b      	ldr	r3, [r3, #20]
 8009f4e:	f003 0301 	and.w	r3, r3, #1
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	370c      	adds	r7, #12
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr
	...

08009f60 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	4b09      	ldr	r3, [pc, #36]	; (8009fa4 <USB_ActivateSetup+0x44>)
 8009f7e:	4013      	ands	r3, r2
 8009f80:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3714      	adds	r7, #20
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr
 8009fa4:	fffff800 	.word	0xfffff800

08009fa8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b087      	sub	sp, #28
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	607a      	str	r2, [r7, #4]
 8009fb4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	333c      	adds	r3, #60	; 0x3c
 8009fbe:	3304      	adds	r3, #4
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	4a26      	ldr	r2, [pc, #152]	; (800a060 <USB_EP0_OutStart+0xb8>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d90a      	bls.n	8009fe2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fdc:	d101      	bne.n	8009fe2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	e037      	b.n	800a052 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fe8:	461a      	mov	r2, r3
 8009fea:	2300      	movs	r3, #0
 8009fec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ff4:	691b      	ldr	r3, [r3, #16]
 8009ff6:	697a      	ldr	r2, [r7, #20]
 8009ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ffc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a000:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	697a      	ldr	r2, [r7, #20]
 800a00c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a010:	f043 0318 	orr.w	r3, r3, #24
 800a014:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	697a      	ldr	r2, [r7, #20]
 800a020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a024:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a028:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a02a:	7afb      	ldrb	r3, [r7, #11]
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d10f      	bne.n	800a050 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a036:	461a      	mov	r2, r3
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	697a      	ldr	r2, [r7, #20]
 800a046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a04a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a04e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a050:	2300      	movs	r3, #0
}
 800a052:	4618      	mov	r0, r3
 800a054:	371c      	adds	r7, #28
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	4f54300a 	.word	0x4f54300a

0800a064 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a064:	b480      	push	{r7}
 800a066:	b085      	sub	sp, #20
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a06c:	2300      	movs	r3, #0
 800a06e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	3301      	adds	r3, #1
 800a074:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	4a13      	ldr	r2, [pc, #76]	; (800a0c8 <USB_CoreReset+0x64>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d901      	bls.n	800a082 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a07e:	2303      	movs	r3, #3
 800a080:	e01b      	b.n	800a0ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	2b00      	cmp	r3, #0
 800a088:	daf2      	bge.n	800a070 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a08a:	2300      	movs	r3, #0
 800a08c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	f043 0201 	orr.w	r2, r3, #1
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	3301      	adds	r3, #1
 800a09e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	4a09      	ldr	r2, [pc, #36]	; (800a0c8 <USB_CoreReset+0x64>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d901      	bls.n	800a0ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	e006      	b.n	800a0ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	691b      	ldr	r3, [r3, #16]
 800a0b0:	f003 0301 	and.w	r3, r3, #1
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d0f0      	beq.n	800a09a <USB_CoreReset+0x36>

  return HAL_OK;
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3714      	adds	r7, #20
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	00030d40 	.word	0x00030d40

0800a0cc <USBD_MIDI_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_MIDI_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	70fb      	strb	r3, [r7, #3]
  USBD_MIDI_HandleTypeDef   *hmidi;

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, MIDI_OUT_EP, USBD_EP_TYPE_BULK, USB_FS_MAX_PACKET_SIZE);
 800a0d8:	2340      	movs	r3, #64	; 0x40
 800a0da:	2202      	movs	r2, #2
 800a0dc:	2101      	movs	r1, #1
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f001 fefd 	bl	800bede <USBD_LL_OpenEP>
  pdev->ep_out[MIDI_OUT_EP & 0xFU].is_used = 1U;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, MIDI_IN_EP, USBD_EP_TYPE_BULK, USB_FS_MAX_PACKET_SIZE);
 800a0ec:	2340      	movs	r3, #64	; 0x40
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	2181      	movs	r1, #129	; 0x81
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f001 fef3 	bl	800bede <USBD_LL_OpenEP>
  pdev->ep_in[MIDI_IN_EP & 0xFU].is_used = 1U;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Allocate MIDI structure */
  pdev->pClassData = USBD_malloc(sizeof (USBD_MIDI_HandleTypeDef));
 800a0fe:	2082      	movs	r0, #130	; 0x82
 800a100:	f002 f810 	bl	800c124 <USBD_static_malloc>
 800a104:	4602      	mov	r2, r0
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if(pdev->pClassData == NULL)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a112:	2b00      	cmp	r3, #0
 800a114:	d101      	bne.n	800a11a <USBD_MIDI_Init+0x4e>
  {
    return USBD_FAIL;
 800a116:	2303      	movs	r3, #3
 800a118:	e00e      	b.n	800a138 <USBD_MIDI_Init+0x6c>
  }
  else
  {
    hmidi = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a120:	60fb      	str	r3, [r7, #12]

    hmidi->tx_busy = 0;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2200      	movs	r2, #0
 800a126:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, MIDI_OUT_EP, hmidi->rx_buffer,
 800a12a:	68fa      	ldr	r2, [r7, #12]
 800a12c:	2340      	movs	r3, #64	; 0x40
 800a12e:	2101      	movs	r1, #1
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f001 ffc3 	bl	800c0bc <USBD_LL_PrepareReceive>
                           USB_FS_MAX_PACKET_SIZE);
  }
  return USBD_OK;
 800a136:	2300      	movs	r3, #0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3710      	adds	r7, #16
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <USBD_MIDI_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	460b      	mov	r3, r1
 800a14a:	70fb      	strb	r3, [r7, #3]

  /* Open EP OUT */
  USBD_LL_CloseEP(pdev, MIDI_OUT_EP);
 800a14c:	2101      	movs	r1, #1
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f001 feeb 	bl	800bf2a <USBD_LL_CloseEP>
  pdev->ep_out[MIDI_OUT_EP & 0xFU].is_used = 0U;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev, MIDI_IN_EP);
 800a15c:	2181      	movs	r1, #129	; 0x81
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f001 fee3 	bl	800bf2a <USBD_LL_CloseEP>
  pdev->ep_in[MIDI_IN_EP & 0xFU].is_used = 0U;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	871a      	strh	r2, [r3, #56]	; 0x38

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a170:	2b00      	cmp	r3, #0
 800a172:	d009      	beq.n	800a188 <USBD_MIDI_DeInit+0x48>
  {
    USBD_free(pdev->pClassData);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a17a:	4618      	mov	r0, r3
 800a17c:	f001 ffe0 	bl	800c140 <USBD_static_free>
    pdev->pClassData = NULL;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 800a188:	2300      	movs	r3, #0
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3708      	adds	r7, #8
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <USBD_MIDI_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_MIDI_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800a192:	b480      	push	{r7}
 800a194:	b083      	sub	sp, #12
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
 800a19a:	6039      	str	r1, [r7, #0]
  return USBD_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	370c      	adds	r7, #12
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr
	...

0800a1ac <USBD_MIDI_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor rx_buffer
  */
static uint8_t  *USBD_MIDI_GetCfgDesc (uint16_t *length)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2285      	movs	r2, #133	; 0x85
 800a1b8:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 800a1ba:	4b03      	ldr	r3, [pc, #12]	; (800a1c8 <USBD_MIDI_GetCfgDesc+0x1c>)
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr
 800a1c8:	24000058 	.word	0x24000058

0800a1cc <USBD_MIDI_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	70fb      	strb	r3, [r7, #3]

  USBD_MIDI_HandleTypeDef   *hmidi;
  hmidi = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1de:	60fb      	str	r3, [r7, #12]
  hmidi->tx_busy = 0;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  
  return USBD_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3714      	adds	r7, #20
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr

0800a1f6 <USBD_MIDI_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_MIDI_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800a1f6:	b480      	push	{r7}
 800a1f8:	b083      	sub	sp, #12
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <USBD_MIDI_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_MIDI_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  /* Only OUT control data are processed */
  return USBD_OK;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	370c      	adds	r7, #12
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr

0800a222 <USBD_MIDI_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_MIDI_SOF (USBD_HandleTypeDef *pdev)
{
 800a222:	b480      	push	{r7}
 800a224:	b083      	sub	sp, #12
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800a22a:	2300      	movs	r3, #0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <USBD_MIDI_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	460b      	mov	r3, r1
 800a242:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	370c      	adds	r7, #12
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr

0800a252 <USBD_MIDI_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a252:	b480      	push	{r7}
 800a254:	b083      	sub	sp, #12
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
 800a25a:	460b      	mov	r3, r1
 800a25c:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <USBD_MIDI_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b086      	sub	sp, #24
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	460b      	mov	r3, r1
 800a276:	70fb      	strb	r3, [r7, #3]
  USBD_MIDI_HandleTypeDef   *hmidi;
  hmidi = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a27e:	613b      	str	r3, [r7, #16]

  if (epnum == MIDI_OUT_EP)
 800a280:	78fb      	ldrb	r3, [r7, #3]
 800a282:	2b01      	cmp	r3, #1
 800a284:	d126      	bne.n	800a2d4 <USBD_MIDI_DataOut+0x68>
  {
    /* Get data length and actual data */
    size_t length = USBD_LL_GetRxDataSize(pdev, epnum);
 800a286:	78fb      	ldrb	r3, [r7, #3]
 800a288:	4619      	mov	r1, r3
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f001 ff37 	bl	800c0fe <USBD_LL_GetRxDataSize>
 800a290:	60f8      	str	r0, [r7, #12]
    uint8_t  *rx_buffer = hmidi->rx_buffer;
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	60bb      	str	r3, [r7, #8]

    /* Pass data to Receive() */
    for (uint32_t i=0; i < length; i+=4) {
 800a296:	2300      	movs	r3, #0
 800a298:	617b      	str	r3, [r7, #20]
 800a29a:	e011      	b.n	800a2c0 <USBD_MIDI_DataOut+0x54>
    	 ((USBD_MIDI_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(rx_buffer + i, length);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	33b0      	adds	r3, #176	; 0xb0
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	4413      	add	r3, r2
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	68b9      	ldr	r1, [r7, #8]
 800a2b0:	697a      	ldr	r2, [r7, #20]
 800a2b2:	440a      	add	r2, r1
 800a2b4:	68f9      	ldr	r1, [r7, #12]
 800a2b6:	4610      	mov	r0, r2
 800a2b8:	4798      	blx	r3
    for (uint32_t i=0; i < length; i+=4) {
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	3304      	adds	r3, #4
 800a2be:	617b      	str	r3, [r7, #20]
 800a2c0:	697a      	ldr	r2, [r7, #20]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d3e9      	bcc.n	800a29c <USBD_MIDI_DataOut+0x30>
//        ((USBD_MIDI_ItfTypeDef *)pdev->pUserData)->Receive(rx_buffer + i, length);
    }

    /* Prepare Out endpoint to receive next midi packet */
    USBD_LL_PrepareReceive(pdev, MIDI_OUT_EP, hmidi->rx_buffer,
 800a2c8:	693a      	ldr	r2, [r7, #16]
 800a2ca:	2340      	movs	r3, #64	; 0x40
 800a2cc:	2101      	movs	r1, #1
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f001 fef4 	bl	800c0bc <USBD_LL_PrepareReceive>
                           USB_FS_MAX_PACKET_SIZE);
  }

  return USBD_OK;
 800a2d4:	2300      	movs	r3, #0
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3718      	adds	r7, #24
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
	...

0800a2e0 <USBD_MIDI_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor rx_buffer
*/
static uint8_t  *USBD_MIDI_GetDeviceQualifierDesc (uint16_t *length)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	220a      	movs	r2, #10
 800a2ec:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_DeviceQualifierDesc;
 800a2ee:	4b03      	ldr	r3, [pc, #12]	; (800a2fc <USBD_MIDI_GetDeviceQualifierDesc+0x1c>)
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr
 800a2fc:	240000e0 	.word	0x240000e0

0800a300 <USBD_MIDI_RegisterInterface>:
* @param  fops: MIDI interface callback
* @retval status
*/
uint8_t USBD_MIDI_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_MIDI_ItfTypeDef *fops)
{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d101      	bne.n	800a314 <USBD_MIDI_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a310:	2303      	movs	r3, #3
 800a312:	e009      	b.n	800a328 <USBD_MIDI_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	33b0      	adds	r3, #176	; 0xb0
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	4413      	add	r3, r2
 800a322:	683a      	ldr	r2, [r7, #0]
 800a324:	605a      	str	r2, [r3, #4]


  return (uint8_t)USBD_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <USBD_MIDI_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_MIDI_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *buff,
                                uint16_t length)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b086      	sub	sp, #24
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	4613      	mov	r3, r2
 800a340:	80fb      	strh	r3, [r7, #6]
  USBD_MIDI_HandleTypeDef   *hmidi = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a348:	617b      	str	r3, [r7, #20]

  // hmidi->tx_buffer = buff;
  memcpy(hmidi->tx_buffer, buff, length);
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	3340      	adds	r3, #64	; 0x40
 800a34e:	88fa      	ldrh	r2, [r7, #6]
 800a350:	68b9      	ldr	r1, [r7, #8]
 800a352:	4618      	mov	r0, r3
 800a354:	f001 ff4e 	bl	800c1f4 <memcpy>
  hmidi->tx_length = length;
 800a358:	88fb      	ldrh	r3, [r7, #6]
 800a35a:	b2da      	uxtb	r2, r3
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return USBD_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3718      	adds	r7, #24
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <USBD_MIDI_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_MIDI_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  USBD_MIDI_HandleTypeDef   *hmidi = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a37a:	60fb      	str	r3, [r7, #12]

  if(hmidi->tx_busy == 0) {
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a382:	2b00      	cmp	r3, #0
 800a384:	d115      	bne.n	800a3b2 <USBD_MIDI_TransmitPacket+0x46>

    hmidi->tx_busy = 1;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2201      	movs	r2, #1
 800a38a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    pdev->ep_in[MIDI_IN_EP & 0xFU].total_length = hmidi->tx_length;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a394:	461a      	mov	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit */
    USBD_LL_Transmit(pdev, MIDI_IN_EP, hmidi->tx_buffer,
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f103 0240 	add.w	r2, r3, #64	; 0x40
                     (uint8_t)hmidi->tx_length);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
    USBD_LL_Transmit(pdev, MIDI_IN_EP, hmidi->tx_buffer,
 800a3a6:	2181      	movs	r1, #129	; 0x81
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f001 fe66 	bl	800c07a <USBD_LL_Transmit>
    
    return USBD_OK;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	e000      	b.n	800a3b4 <USBD_MIDI_TransmitPacket+0x48>
  } else {
    return USBD_BUSY;
 800a3b2:	2301      	movs	r3, #1
  }
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3710      	adds	r7, #16
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b086      	sub	sp, #24
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	4613      	mov	r3, r2
 800a3c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d101      	bne.n	800a3d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a3d0:	2303      	movs	r3, #3
 800a3d2:	e01f      	b.n	800a414 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d003      	beq.n	800a3fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	68ba      	ldr	r2, [r7, #8]
 800a3f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	79fa      	ldrb	r2, [r7, #7]
 800a406:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a408:	68f8      	ldr	r0, [r7, #12]
 800a40a:	f001 fcfd 	bl	800be08 <USBD_LL_Init>
 800a40e:	4603      	mov	r3, r0
 800a410:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a412:	7dfb      	ldrb	r3, [r7, #23]
}
 800a414:	4618      	mov	r0, r3
 800a416:	3718      	adds	r7, #24
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a426:	2300      	movs	r3, #0
 800a428:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d101      	bne.n	800a434 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a430:	2303      	movs	r3, #3
 800a432:	e025      	b.n	800a480 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	683a      	ldr	r2, [r7, #0]
 800a438:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	32ae      	adds	r2, #174	; 0xae
 800a446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d00f      	beq.n	800a470 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	32ae      	adds	r2, #174	; 0xae
 800a45a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a460:	f107 020e 	add.w	r2, r7, #14
 800a464:	4610      	mov	r0, r2
 800a466:	4798      	blx	r3
 800a468:	4602      	mov	r2, r0
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a476:	1c5a      	adds	r2, r3, #1
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a47e:	2300      	movs	r3, #0
}
 800a480:	4618      	mov	r0, r3
 800a482:	3710      	adds	r7, #16
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f001 fd09 	bl	800bea8 <USBD_LL_Start>
 800a496:	4603      	mov	r3, r0
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3708      	adds	r7, #8
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a4a8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	370c      	adds	r7, #12
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr

0800a4b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b084      	sub	sp, #16
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
 800a4be:	460b      	mov	r3, r1
 800a4c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d009      	beq.n	800a4e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	78fa      	ldrb	r2, [r7, #3]
 800a4da:	4611      	mov	r1, r2
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	4798      	blx	r3
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b084      	sub	sp, #16
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	78fa      	ldrb	r2, [r7, #3]
 800a508:	4611      	mov	r1, r2
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	4798      	blx	r3
 800a50e:	4603      	mov	r3, r0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d001      	beq.n	800a518 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a514:	2303      	movs	r3, #3
 800a516:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a518:	7bfb      	ldrb	r3, [r7, #15]
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a522:	b580      	push	{r7, lr}
 800a524:	b084      	sub	sp, #16
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
 800a52a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a532:	6839      	ldr	r1, [r7, #0]
 800a534:	4618      	mov	r0, r3
 800a536:	f001 f8b2 	bl	800b69e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2201      	movs	r2, #1
 800a53e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a548:	461a      	mov	r2, r3
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a556:	f003 031f 	and.w	r3, r3, #31
 800a55a:	2b02      	cmp	r3, #2
 800a55c:	d01a      	beq.n	800a594 <USBD_LL_SetupStage+0x72>
 800a55e:	2b02      	cmp	r3, #2
 800a560:	d822      	bhi.n	800a5a8 <USBD_LL_SetupStage+0x86>
 800a562:	2b00      	cmp	r3, #0
 800a564:	d002      	beq.n	800a56c <USBD_LL_SetupStage+0x4a>
 800a566:	2b01      	cmp	r3, #1
 800a568:	d00a      	beq.n	800a580 <USBD_LL_SetupStage+0x5e>
 800a56a:	e01d      	b.n	800a5a8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a572:	4619      	mov	r1, r3
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 fb09 	bl	800ab8c <USBD_StdDevReq>
 800a57a:	4603      	mov	r3, r0
 800a57c:	73fb      	strb	r3, [r7, #15]
      break;
 800a57e:	e020      	b.n	800a5c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a586:	4619      	mov	r1, r3
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 fb71 	bl	800ac70 <USBD_StdItfReq>
 800a58e:	4603      	mov	r3, r0
 800a590:	73fb      	strb	r3, [r7, #15]
      break;
 800a592:	e016      	b.n	800a5c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a59a:	4619      	mov	r1, r3
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 fbd3 	bl	800ad48 <USBD_StdEPReq>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	73fb      	strb	r3, [r7, #15]
      break;
 800a5a6:	e00c      	b.n	800a5c2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a5ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f001 fcd6 	bl	800bf68 <USBD_LL_StallEP>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	73fb      	strb	r3, [r7, #15]
      break;
 800a5c0:	bf00      	nop
  }

  return ret;
 800a5c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3710      	adds	r7, #16
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b086      	sub	sp, #24
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	607a      	str	r2, [r7, #4]
 800a5d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a5de:	7afb      	ldrb	r3, [r7, #11]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d16e      	bne.n	800a6c2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a5ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a5f2:	2b03      	cmp	r3, #3
 800a5f4:	f040 8098 	bne.w	800a728 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	689a      	ldr	r2, [r3, #8]
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	429a      	cmp	r2, r3
 800a602:	d913      	bls.n	800a62c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	689a      	ldr	r2, [r3, #8]
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	1ad2      	subs	r2, r2, r3
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	68da      	ldr	r2, [r3, #12]
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	4293      	cmp	r3, r2
 800a61c:	bf28      	it	cs
 800a61e:	4613      	movcs	r3, r2
 800a620:	461a      	mov	r2, r3
 800a622:	6879      	ldr	r1, [r7, #4]
 800a624:	68f8      	ldr	r0, [r7, #12]
 800a626:	f001 f911 	bl	800b84c <USBD_CtlContinueRx>
 800a62a:	e07d      	b.n	800a728 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a632:	f003 031f 	and.w	r3, r3, #31
 800a636:	2b02      	cmp	r3, #2
 800a638:	d014      	beq.n	800a664 <USBD_LL_DataOutStage+0x98>
 800a63a:	2b02      	cmp	r3, #2
 800a63c:	d81d      	bhi.n	800a67a <USBD_LL_DataOutStage+0xae>
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d002      	beq.n	800a648 <USBD_LL_DataOutStage+0x7c>
 800a642:	2b01      	cmp	r3, #1
 800a644:	d003      	beq.n	800a64e <USBD_LL_DataOutStage+0x82>
 800a646:	e018      	b.n	800a67a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a648:	2300      	movs	r3, #0
 800a64a:	75bb      	strb	r3, [r7, #22]
            break;
 800a64c:	e018      	b.n	800a680 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a654:	b2db      	uxtb	r3, r3
 800a656:	4619      	mov	r1, r3
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f000 fa5e 	bl	800ab1a <USBD_CoreFindIF>
 800a65e:	4603      	mov	r3, r0
 800a660:	75bb      	strb	r3, [r7, #22]
            break;
 800a662:	e00d      	b.n	800a680 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	4619      	mov	r1, r3
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f000 fa60 	bl	800ab34 <USBD_CoreFindEP>
 800a674:	4603      	mov	r3, r0
 800a676:	75bb      	strb	r3, [r7, #22]
            break;
 800a678:	e002      	b.n	800a680 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a67a:	2300      	movs	r3, #0
 800a67c:	75bb      	strb	r3, [r7, #22]
            break;
 800a67e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a680:	7dbb      	ldrb	r3, [r7, #22]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d119      	bne.n	800a6ba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	2b03      	cmp	r3, #3
 800a690:	d113      	bne.n	800a6ba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a692:	7dba      	ldrb	r2, [r7, #22]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	32ae      	adds	r2, #174	; 0xae
 800a698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a69c:	691b      	ldr	r3, [r3, #16]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d00b      	beq.n	800a6ba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a6a2:	7dba      	ldrb	r2, [r7, #22]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a6aa:	7dba      	ldrb	r2, [r7, #22]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	32ae      	adds	r2, #174	; 0xae
 800a6b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f001 f8d7 	bl	800b86e <USBD_CtlSendStatus>
 800a6c0:	e032      	b.n	800a728 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a6c2:	7afb      	ldrb	r3, [r7, #11]
 800a6c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	68f8      	ldr	r0, [r7, #12]
 800a6ce:	f000 fa31 	bl	800ab34 <USBD_CoreFindEP>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6d6:	7dbb      	ldrb	r3, [r7, #22]
 800a6d8:	2bff      	cmp	r3, #255	; 0xff
 800a6da:	d025      	beq.n	800a728 <USBD_LL_DataOutStage+0x15c>
 800a6dc:	7dbb      	ldrb	r3, [r7, #22]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d122      	bne.n	800a728 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	2b03      	cmp	r3, #3
 800a6ec:	d117      	bne.n	800a71e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a6ee:	7dba      	ldrb	r2, [r7, #22]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	32ae      	adds	r2, #174	; 0xae
 800a6f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6f8:	699b      	ldr	r3, [r3, #24]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d00f      	beq.n	800a71e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a6fe:	7dba      	ldrb	r2, [r7, #22]
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a706:	7dba      	ldrb	r2, [r7, #22]
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	32ae      	adds	r2, #174	; 0xae
 800a70c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a710:	699b      	ldr	r3, [r3, #24]
 800a712:	7afa      	ldrb	r2, [r7, #11]
 800a714:	4611      	mov	r1, r2
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	4798      	blx	r3
 800a71a:	4603      	mov	r3, r0
 800a71c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a71e:	7dfb      	ldrb	r3, [r7, #23]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d001      	beq.n	800a728 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a724:	7dfb      	ldrb	r3, [r7, #23]
 800a726:	e000      	b.n	800a72a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a728:	2300      	movs	r3, #0
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3718      	adds	r7, #24
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b086      	sub	sp, #24
 800a736:	af00      	add	r7, sp, #0
 800a738:	60f8      	str	r0, [r7, #12]
 800a73a:	460b      	mov	r3, r1
 800a73c:	607a      	str	r2, [r7, #4]
 800a73e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a740:	7afb      	ldrb	r3, [r7, #11]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d16f      	bne.n	800a826 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	3314      	adds	r3, #20
 800a74a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a752:	2b02      	cmp	r3, #2
 800a754:	d15a      	bne.n	800a80c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	689a      	ldr	r2, [r3, #8]
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	68db      	ldr	r3, [r3, #12]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d914      	bls.n	800a78c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	689a      	ldr	r2, [r3, #8]
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	1ad2      	subs	r2, r2, r3
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	461a      	mov	r2, r3
 800a776:	6879      	ldr	r1, [r7, #4]
 800a778:	68f8      	ldr	r0, [r7, #12]
 800a77a:	f001 f856 	bl	800b82a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a77e:	2300      	movs	r3, #0
 800a780:	2200      	movs	r2, #0
 800a782:	2100      	movs	r1, #0
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f001 fc99 	bl	800c0bc <USBD_LL_PrepareReceive>
 800a78a:	e03f      	b.n	800a80c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	68da      	ldr	r2, [r3, #12]
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	429a      	cmp	r2, r3
 800a796:	d11c      	bne.n	800a7d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	685a      	ldr	r2, [r3, #4]
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d316      	bcc.n	800a7d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	685a      	ldr	r2, [r3, #4]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d20f      	bcs.n	800a7d2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	68f8      	ldr	r0, [r7, #12]
 800a7b8:	f001 f837 	bl	800b82a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	f001 fc76 	bl	800c0bc <USBD_LL_PrepareReceive>
 800a7d0:	e01c      	b.n	800a80c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	2b03      	cmp	r3, #3
 800a7dc:	d10f      	bne.n	800a7fe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d009      	beq.n	800a7fe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	68f8      	ldr	r0, [r7, #12]
 800a7fc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7fe:	2180      	movs	r1, #128	; 0x80
 800a800:	68f8      	ldr	r0, [r7, #12]
 800a802:	f001 fbb1 	bl	800bf68 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f001 f844 	bl	800b894 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a812:	2b00      	cmp	r3, #0
 800a814:	d03a      	beq.n	800a88c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	f7ff fe42 	bl	800a4a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2200      	movs	r2, #0
 800a820:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a824:	e032      	b.n	800a88c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a826:	7afb      	ldrb	r3, [r7, #11]
 800a828:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	4619      	mov	r1, r3
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f000 f97f 	bl	800ab34 <USBD_CoreFindEP>
 800a836:	4603      	mov	r3, r0
 800a838:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a83a:	7dfb      	ldrb	r3, [r7, #23]
 800a83c:	2bff      	cmp	r3, #255	; 0xff
 800a83e:	d025      	beq.n	800a88c <USBD_LL_DataInStage+0x15a>
 800a840:	7dfb      	ldrb	r3, [r7, #23]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d122      	bne.n	800a88c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	2b03      	cmp	r3, #3
 800a850:	d11c      	bne.n	800a88c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a852:	7dfa      	ldrb	r2, [r7, #23]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	32ae      	adds	r2, #174	; 0xae
 800a858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a85c:	695b      	ldr	r3, [r3, #20]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d014      	beq.n	800a88c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a862:	7dfa      	ldrb	r2, [r7, #23]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a86a:	7dfa      	ldrb	r2, [r7, #23]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	32ae      	adds	r2, #174	; 0xae
 800a870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a874:	695b      	ldr	r3, [r3, #20]
 800a876:	7afa      	ldrb	r2, [r7, #11]
 800a878:	4611      	mov	r1, r2
 800a87a:	68f8      	ldr	r0, [r7, #12]
 800a87c:	4798      	blx	r3
 800a87e:	4603      	mov	r3, r0
 800a880:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a882:	7dbb      	ldrb	r3, [r7, #22]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d001      	beq.n	800a88c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a888:	7dbb      	ldrb	r3, [r7, #22]
 800a88a:	e000      	b.n	800a88e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a88c:	2300      	movs	r3, #0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3718      	adds	r7, #24
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b084      	sub	sp, #16
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d014      	beq.n	800a8fc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d00e      	beq.n	800a8fc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	6852      	ldr	r2, [r2, #4]
 800a8ea:	b2d2      	uxtb	r2, r2
 800a8ec:	4611      	mov	r1, r2
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	4798      	blx	r3
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d001      	beq.n	800a8fc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a8f8:	2303      	movs	r3, #3
 800a8fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a8fc:	2340      	movs	r3, #64	; 0x40
 800a8fe:	2200      	movs	r2, #0
 800a900:	2100      	movs	r1, #0
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f001 faeb 	bl	800bede <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2201      	movs	r2, #1
 800a90c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2240      	movs	r2, #64	; 0x40
 800a914:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a918:	2340      	movs	r3, #64	; 0x40
 800a91a:	2200      	movs	r2, #0
 800a91c:	2180      	movs	r1, #128	; 0x80
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f001 fadd 	bl	800bede <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2201      	movs	r2, #1
 800a928:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2240      	movs	r2, #64	; 0x40
 800a92e:	621a      	str	r2, [r3, #32]

  return ret;
 800a930:	7bfb      	ldrb	r3, [r7, #15]
}
 800a932:	4618      	mov	r0, r3
 800a934:	3710      	adds	r7, #16
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a93a:	b480      	push	{r7}
 800a93c:	b083      	sub	sp, #12
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
 800a942:	460b      	mov	r3, r1
 800a944:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	78fa      	ldrb	r2, [r7, #3]
 800a94a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a94c:	2300      	movs	r3, #0
}
 800a94e:	4618      	mov	r0, r3
 800a950:	370c      	adds	r7, #12
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr

0800a95a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a95a:	b480      	push	{r7}
 800a95c:	b083      	sub	sp, #12
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a968:	b2da      	uxtb	r2, r3
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2204      	movs	r2, #4
 800a974:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	370c      	adds	r7, #12
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr

0800a986 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a986:	b480      	push	{r7}
 800a988:	b083      	sub	sp, #12
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a994:	b2db      	uxtb	r3, r3
 800a996:	2b04      	cmp	r3, #4
 800a998:	d106      	bne.n	800a9a8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a9a0:	b2da      	uxtb	r2, r3
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a9a8:	2300      	movs	r3, #0
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	370c      	adds	r7, #12
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr

0800a9b6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a9b6:	b580      	push	{r7, lr}
 800a9b8:	b082      	sub	sp, #8
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	2b03      	cmp	r3, #3
 800a9c8:	d110      	bne.n	800a9ec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00b      	beq.n	800a9ec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9da:	69db      	ldr	r3, [r3, #28]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d005      	beq.n	800a9ec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9e6:	69db      	ldr	r3, [r3, #28]
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a9ec:	2300      	movs	r3, #0
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3708      	adds	r7, #8
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}

0800a9f6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b082      	sub	sp, #8
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
 800a9fe:	460b      	mov	r3, r1
 800aa00:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	32ae      	adds	r2, #174	; 0xae
 800aa0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d101      	bne.n	800aa18 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800aa14:	2303      	movs	r3, #3
 800aa16:	e01c      	b.n	800aa52 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	2b03      	cmp	r3, #3
 800aa22:	d115      	bne.n	800aa50 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	32ae      	adds	r2, #174	; 0xae
 800aa2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa32:	6a1b      	ldr	r3, [r3, #32]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d00b      	beq.n	800aa50 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	32ae      	adds	r2, #174	; 0xae
 800aa42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa46:	6a1b      	ldr	r3, [r3, #32]
 800aa48:	78fa      	ldrb	r2, [r7, #3]
 800aa4a:	4611      	mov	r1, r2
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aa50:	2300      	movs	r3, #0
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3708      	adds	r7, #8
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b082      	sub	sp, #8
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
 800aa62:	460b      	mov	r3, r1
 800aa64:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	32ae      	adds	r2, #174	; 0xae
 800aa70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d101      	bne.n	800aa7c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800aa78:	2303      	movs	r3, #3
 800aa7a:	e01c      	b.n	800aab6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	2b03      	cmp	r3, #3
 800aa86:	d115      	bne.n	800aab4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	32ae      	adds	r2, #174	; 0xae
 800aa92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d00b      	beq.n	800aab4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	32ae      	adds	r2, #174	; 0xae
 800aaa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaac:	78fa      	ldrb	r2, [r7, #3]
 800aaae:	4611      	mov	r1, r2
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aab4:	2300      	movs	r3, #0
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3708      	adds	r7, #8
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800aabe:	b480      	push	{r7}
 800aac0:	b083      	sub	sp, #12
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aac6:	2300      	movs	r3, #0
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800aadc:	2300      	movs	r3, #0
 800aade:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2201      	movs	r2, #1
 800aae4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d00e      	beq.n	800ab10 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	6852      	ldr	r2, [r2, #4]
 800aafe:	b2d2      	uxtb	r2, r2
 800ab00:	4611      	mov	r1, r2
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	4798      	blx	r3
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d001      	beq.n	800ab10 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ab0c:	2303      	movs	r3, #3
 800ab0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ab10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ab1a:	b480      	push	{r7}
 800ab1c:	b083      	sub	sp, #12
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
 800ab22:	460b      	mov	r3, r1
 800ab24:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ab26:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ab40:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	370c      	adds	r7, #12
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr

0800ab4e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ab4e:	b480      	push	{r7}
 800ab50:	b087      	sub	sp, #28
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	3301      	adds	r3, #1
 800ab64:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ab6c:	8a3b      	ldrh	r3, [r7, #16]
 800ab6e:	021b      	lsls	r3, r3, #8
 800ab70:	b21a      	sxth	r2, r3
 800ab72:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	b21b      	sxth	r3, r3
 800ab7a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ab7c:	89fb      	ldrh	r3, [r7, #14]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	371c      	adds	r7, #28
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr
	...

0800ab8c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab96:	2300      	movs	r3, #0
 800ab98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aba2:	2b40      	cmp	r3, #64	; 0x40
 800aba4:	d005      	beq.n	800abb2 <USBD_StdDevReq+0x26>
 800aba6:	2b40      	cmp	r3, #64	; 0x40
 800aba8:	d857      	bhi.n	800ac5a <USBD_StdDevReq+0xce>
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00f      	beq.n	800abce <USBD_StdDevReq+0x42>
 800abae:	2b20      	cmp	r3, #32
 800abb0:	d153      	bne.n	800ac5a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	32ae      	adds	r2, #174	; 0xae
 800abbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	6839      	ldr	r1, [r7, #0]
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	4798      	blx	r3
 800abc8:	4603      	mov	r3, r0
 800abca:	73fb      	strb	r3, [r7, #15]
      break;
 800abcc:	e04a      	b.n	800ac64 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	785b      	ldrb	r3, [r3, #1]
 800abd2:	2b09      	cmp	r3, #9
 800abd4:	d83b      	bhi.n	800ac4e <USBD_StdDevReq+0xc2>
 800abd6:	a201      	add	r2, pc, #4	; (adr r2, 800abdc <USBD_StdDevReq+0x50>)
 800abd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abdc:	0800ac31 	.word	0x0800ac31
 800abe0:	0800ac45 	.word	0x0800ac45
 800abe4:	0800ac4f 	.word	0x0800ac4f
 800abe8:	0800ac3b 	.word	0x0800ac3b
 800abec:	0800ac4f 	.word	0x0800ac4f
 800abf0:	0800ac0f 	.word	0x0800ac0f
 800abf4:	0800ac05 	.word	0x0800ac05
 800abf8:	0800ac4f 	.word	0x0800ac4f
 800abfc:	0800ac27 	.word	0x0800ac27
 800ac00:	0800ac19 	.word	0x0800ac19
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ac04:	6839      	ldr	r1, [r7, #0]
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 fa3c 	bl	800b084 <USBD_GetDescriptor>
          break;
 800ac0c:	e024      	b.n	800ac58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ac0e:	6839      	ldr	r1, [r7, #0]
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 fba1 	bl	800b358 <USBD_SetAddress>
          break;
 800ac16:	e01f      	b.n	800ac58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ac18:	6839      	ldr	r1, [r7, #0]
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 fbe0 	bl	800b3e0 <USBD_SetConfig>
 800ac20:	4603      	mov	r3, r0
 800ac22:	73fb      	strb	r3, [r7, #15]
          break;
 800ac24:	e018      	b.n	800ac58 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ac26:	6839      	ldr	r1, [r7, #0]
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f000 fc83 	bl	800b534 <USBD_GetConfig>
          break;
 800ac2e:	e013      	b.n	800ac58 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ac30:	6839      	ldr	r1, [r7, #0]
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 fcb4 	bl	800b5a0 <USBD_GetStatus>
          break;
 800ac38:	e00e      	b.n	800ac58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ac3a:	6839      	ldr	r1, [r7, #0]
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 fce3 	bl	800b608 <USBD_SetFeature>
          break;
 800ac42:	e009      	b.n	800ac58 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ac44:	6839      	ldr	r1, [r7, #0]
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 fd07 	bl	800b65a <USBD_ClrFeature>
          break;
 800ac4c:	e004      	b.n	800ac58 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ac4e:	6839      	ldr	r1, [r7, #0]
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 fd5e 	bl	800b712 <USBD_CtlError>
          break;
 800ac56:	bf00      	nop
      }
      break;
 800ac58:	e004      	b.n	800ac64 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ac5a:	6839      	ldr	r1, [r7, #0]
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 fd58 	bl	800b712 <USBD_CtlError>
      break;
 800ac62:	bf00      	nop
  }

  return ret;
 800ac64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop

0800ac70 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac86:	2b40      	cmp	r3, #64	; 0x40
 800ac88:	d005      	beq.n	800ac96 <USBD_StdItfReq+0x26>
 800ac8a:	2b40      	cmp	r3, #64	; 0x40
 800ac8c:	d852      	bhi.n	800ad34 <USBD_StdItfReq+0xc4>
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d001      	beq.n	800ac96 <USBD_StdItfReq+0x26>
 800ac92:	2b20      	cmp	r3, #32
 800ac94:	d14e      	bne.n	800ad34 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	2b02      	cmp	r3, #2
 800aca2:	d840      	bhi.n	800ad26 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	889b      	ldrh	r3, [r3, #4]
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d836      	bhi.n	800ad1c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	889b      	ldrh	r3, [r3, #4]
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	4619      	mov	r1, r3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f7ff ff2f 	bl	800ab1a <USBD_CoreFindIF>
 800acbc:	4603      	mov	r3, r0
 800acbe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800acc0:	7bbb      	ldrb	r3, [r7, #14]
 800acc2:	2bff      	cmp	r3, #255	; 0xff
 800acc4:	d01d      	beq.n	800ad02 <USBD_StdItfReq+0x92>
 800acc6:	7bbb      	ldrb	r3, [r7, #14]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d11a      	bne.n	800ad02 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800accc:	7bba      	ldrb	r2, [r7, #14]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	32ae      	adds	r2, #174	; 0xae
 800acd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d00f      	beq.n	800acfc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800acdc:	7bba      	ldrb	r2, [r7, #14]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ace4:	7bba      	ldrb	r2, [r7, #14]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	32ae      	adds	r2, #174	; 0xae
 800acea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	6839      	ldr	r1, [r7, #0]
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	4798      	blx	r3
 800acf6:	4603      	mov	r3, r0
 800acf8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800acfa:	e004      	b.n	800ad06 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800acfc:	2303      	movs	r3, #3
 800acfe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ad00:	e001      	b.n	800ad06 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ad02:	2303      	movs	r3, #3
 800ad04:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	88db      	ldrh	r3, [r3, #6]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d110      	bne.n	800ad30 <USBD_StdItfReq+0xc0>
 800ad0e:	7bfb      	ldrb	r3, [r7, #15]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d10d      	bne.n	800ad30 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f000 fdaa 	bl	800b86e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ad1a:	e009      	b.n	800ad30 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ad1c:	6839      	ldr	r1, [r7, #0]
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fcf7 	bl	800b712 <USBD_CtlError>
          break;
 800ad24:	e004      	b.n	800ad30 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ad26:	6839      	ldr	r1, [r7, #0]
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f000 fcf2 	bl	800b712 <USBD_CtlError>
          break;
 800ad2e:	e000      	b.n	800ad32 <USBD_StdItfReq+0xc2>
          break;
 800ad30:	bf00      	nop
      }
      break;
 800ad32:	e004      	b.n	800ad3e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ad34:	6839      	ldr	r1, [r7, #0]
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 fceb 	bl	800b712 <USBD_CtlError>
      break;
 800ad3c:	bf00      	nop
  }

  return ret;
 800ad3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3710      	adds	r7, #16
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ad52:	2300      	movs	r3, #0
 800ad54:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	889b      	ldrh	r3, [r3, #4]
 800ad5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad64:	2b40      	cmp	r3, #64	; 0x40
 800ad66:	d007      	beq.n	800ad78 <USBD_StdEPReq+0x30>
 800ad68:	2b40      	cmp	r3, #64	; 0x40
 800ad6a:	f200 817f 	bhi.w	800b06c <USBD_StdEPReq+0x324>
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d02a      	beq.n	800adc8 <USBD_StdEPReq+0x80>
 800ad72:	2b20      	cmp	r3, #32
 800ad74:	f040 817a 	bne.w	800b06c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ad78:	7bbb      	ldrb	r3, [r7, #14]
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f7ff fed9 	bl	800ab34 <USBD_CoreFindEP>
 800ad82:	4603      	mov	r3, r0
 800ad84:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad86:	7b7b      	ldrb	r3, [r7, #13]
 800ad88:	2bff      	cmp	r3, #255	; 0xff
 800ad8a:	f000 8174 	beq.w	800b076 <USBD_StdEPReq+0x32e>
 800ad8e:	7b7b      	ldrb	r3, [r7, #13]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	f040 8170 	bne.w	800b076 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ad96:	7b7a      	ldrb	r2, [r7, #13]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ad9e:	7b7a      	ldrb	r2, [r7, #13]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	32ae      	adds	r2, #174	; 0xae
 800ada4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ada8:	689b      	ldr	r3, [r3, #8]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	f000 8163 	beq.w	800b076 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800adb0:	7b7a      	ldrb	r2, [r7, #13]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	32ae      	adds	r2, #174	; 0xae
 800adb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	6839      	ldr	r1, [r7, #0]
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	4798      	blx	r3
 800adc2:	4603      	mov	r3, r0
 800adc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800adc6:	e156      	b.n	800b076 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	785b      	ldrb	r3, [r3, #1]
 800adcc:	2b03      	cmp	r3, #3
 800adce:	d008      	beq.n	800ade2 <USBD_StdEPReq+0x9a>
 800add0:	2b03      	cmp	r3, #3
 800add2:	f300 8145 	bgt.w	800b060 <USBD_StdEPReq+0x318>
 800add6:	2b00      	cmp	r3, #0
 800add8:	f000 809b 	beq.w	800af12 <USBD_StdEPReq+0x1ca>
 800addc:	2b01      	cmp	r3, #1
 800adde:	d03c      	beq.n	800ae5a <USBD_StdEPReq+0x112>
 800ade0:	e13e      	b.n	800b060 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	2b02      	cmp	r3, #2
 800adec:	d002      	beq.n	800adf4 <USBD_StdEPReq+0xac>
 800adee:	2b03      	cmp	r3, #3
 800adf0:	d016      	beq.n	800ae20 <USBD_StdEPReq+0xd8>
 800adf2:	e02c      	b.n	800ae4e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800adf4:	7bbb      	ldrb	r3, [r7, #14]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00d      	beq.n	800ae16 <USBD_StdEPReq+0xce>
 800adfa:	7bbb      	ldrb	r3, [r7, #14]
 800adfc:	2b80      	cmp	r3, #128	; 0x80
 800adfe:	d00a      	beq.n	800ae16 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae00:	7bbb      	ldrb	r3, [r7, #14]
 800ae02:	4619      	mov	r1, r3
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f001 f8af 	bl	800bf68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae0a:	2180      	movs	r1, #128	; 0x80
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f001 f8ab 	bl	800bf68 <USBD_LL_StallEP>
 800ae12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae14:	e020      	b.n	800ae58 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ae16:	6839      	ldr	r1, [r7, #0]
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 fc7a 	bl	800b712 <USBD_CtlError>
              break;
 800ae1e:	e01b      	b.n	800ae58 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	885b      	ldrh	r3, [r3, #2]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d10e      	bne.n	800ae46 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ae28:	7bbb      	ldrb	r3, [r7, #14]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d00b      	beq.n	800ae46 <USBD_StdEPReq+0xfe>
 800ae2e:	7bbb      	ldrb	r3, [r7, #14]
 800ae30:	2b80      	cmp	r3, #128	; 0x80
 800ae32:	d008      	beq.n	800ae46 <USBD_StdEPReq+0xfe>
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	88db      	ldrh	r3, [r3, #6]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d104      	bne.n	800ae46 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae3c:	7bbb      	ldrb	r3, [r7, #14]
 800ae3e:	4619      	mov	r1, r3
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f001 f891 	bl	800bf68 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 fd11 	bl	800b86e <USBD_CtlSendStatus>

              break;
 800ae4c:	e004      	b.n	800ae58 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ae4e:	6839      	ldr	r1, [r7, #0]
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 fc5e 	bl	800b712 <USBD_CtlError>
              break;
 800ae56:	bf00      	nop
          }
          break;
 800ae58:	e107      	b.n	800b06a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	2b02      	cmp	r3, #2
 800ae64:	d002      	beq.n	800ae6c <USBD_StdEPReq+0x124>
 800ae66:	2b03      	cmp	r3, #3
 800ae68:	d016      	beq.n	800ae98 <USBD_StdEPReq+0x150>
 800ae6a:	e04b      	b.n	800af04 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae6c:	7bbb      	ldrb	r3, [r7, #14]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d00d      	beq.n	800ae8e <USBD_StdEPReq+0x146>
 800ae72:	7bbb      	ldrb	r3, [r7, #14]
 800ae74:	2b80      	cmp	r3, #128	; 0x80
 800ae76:	d00a      	beq.n	800ae8e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae78:	7bbb      	ldrb	r3, [r7, #14]
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f001 f873 	bl	800bf68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae82:	2180      	movs	r1, #128	; 0x80
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f001 f86f 	bl	800bf68 <USBD_LL_StallEP>
 800ae8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae8c:	e040      	b.n	800af10 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ae8e:	6839      	ldr	r1, [r7, #0]
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 fc3e 	bl	800b712 <USBD_CtlError>
              break;
 800ae96:	e03b      	b.n	800af10 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	885b      	ldrh	r3, [r3, #2]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d136      	bne.n	800af0e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aea0:	7bbb      	ldrb	r3, [r7, #14]
 800aea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d004      	beq.n	800aeb4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aeaa:	7bbb      	ldrb	r3, [r7, #14]
 800aeac:	4619      	mov	r1, r3
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f001 f879 	bl	800bfa6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 fcda 	bl	800b86e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800aeba:	7bbb      	ldrb	r3, [r7, #14]
 800aebc:	4619      	mov	r1, r3
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f7ff fe38 	bl	800ab34 <USBD_CoreFindEP>
 800aec4:	4603      	mov	r3, r0
 800aec6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aec8:	7b7b      	ldrb	r3, [r7, #13]
 800aeca:	2bff      	cmp	r3, #255	; 0xff
 800aecc:	d01f      	beq.n	800af0e <USBD_StdEPReq+0x1c6>
 800aece:	7b7b      	ldrb	r3, [r7, #13]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d11c      	bne.n	800af0e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800aed4:	7b7a      	ldrb	r2, [r7, #13]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800aedc:	7b7a      	ldrb	r2, [r7, #13]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	32ae      	adds	r2, #174	; 0xae
 800aee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d010      	beq.n	800af0e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aeec:	7b7a      	ldrb	r2, [r7, #13]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	32ae      	adds	r2, #174	; 0xae
 800aef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	6839      	ldr	r1, [r7, #0]
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	4798      	blx	r3
 800aefe:	4603      	mov	r3, r0
 800af00:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800af02:	e004      	b.n	800af0e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800af04:	6839      	ldr	r1, [r7, #0]
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 fc03 	bl	800b712 <USBD_CtlError>
              break;
 800af0c:	e000      	b.n	800af10 <USBD_StdEPReq+0x1c8>
              break;
 800af0e:	bf00      	nop
          }
          break;
 800af10:	e0ab      	b.n	800b06a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	d002      	beq.n	800af24 <USBD_StdEPReq+0x1dc>
 800af1e:	2b03      	cmp	r3, #3
 800af20:	d032      	beq.n	800af88 <USBD_StdEPReq+0x240>
 800af22:	e097      	b.n	800b054 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af24:	7bbb      	ldrb	r3, [r7, #14]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d007      	beq.n	800af3a <USBD_StdEPReq+0x1f2>
 800af2a:	7bbb      	ldrb	r3, [r7, #14]
 800af2c:	2b80      	cmp	r3, #128	; 0x80
 800af2e:	d004      	beq.n	800af3a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800af30:	6839      	ldr	r1, [r7, #0]
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 fbed 	bl	800b712 <USBD_CtlError>
                break;
 800af38:	e091      	b.n	800b05e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	da0b      	bge.n	800af5a <USBD_StdEPReq+0x212>
 800af42:	7bbb      	ldrb	r3, [r7, #14]
 800af44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af48:	4613      	mov	r3, r2
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	4413      	add	r3, r2
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	3310      	adds	r3, #16
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	4413      	add	r3, r2
 800af56:	3304      	adds	r3, #4
 800af58:	e00b      	b.n	800af72 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af5a:	7bbb      	ldrb	r3, [r7, #14]
 800af5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af60:	4613      	mov	r3, r2
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	4413      	add	r3, r2
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	4413      	add	r3, r2
 800af70:	3304      	adds	r3, #4
 800af72:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	2200      	movs	r2, #0
 800af78:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	2202      	movs	r2, #2
 800af7e:	4619      	mov	r1, r3
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 fc37 	bl	800b7f4 <USBD_CtlSendData>
              break;
 800af86:	e06a      	b.n	800b05e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800af88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	da11      	bge.n	800afb4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800af90:	7bbb      	ldrb	r3, [r7, #14]
 800af92:	f003 020f 	and.w	r2, r3, #15
 800af96:	6879      	ldr	r1, [r7, #4]
 800af98:	4613      	mov	r3, r2
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	4413      	add	r3, r2
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	440b      	add	r3, r1
 800afa2:	3324      	adds	r3, #36	; 0x24
 800afa4:	881b      	ldrh	r3, [r3, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d117      	bne.n	800afda <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800afaa:	6839      	ldr	r1, [r7, #0]
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 fbb0 	bl	800b712 <USBD_CtlError>
                  break;
 800afb2:	e054      	b.n	800b05e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800afb4:	7bbb      	ldrb	r3, [r7, #14]
 800afb6:	f003 020f 	and.w	r2, r3, #15
 800afba:	6879      	ldr	r1, [r7, #4]
 800afbc:	4613      	mov	r3, r2
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	4413      	add	r3, r2
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	440b      	add	r3, r1
 800afc6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800afca:	881b      	ldrh	r3, [r3, #0]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d104      	bne.n	800afda <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800afd0:	6839      	ldr	r1, [r7, #0]
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 fb9d 	bl	800b712 <USBD_CtlError>
                  break;
 800afd8:	e041      	b.n	800b05e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	da0b      	bge.n	800affa <USBD_StdEPReq+0x2b2>
 800afe2:	7bbb      	ldrb	r3, [r7, #14]
 800afe4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afe8:	4613      	mov	r3, r2
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	4413      	add	r3, r2
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	3310      	adds	r3, #16
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	4413      	add	r3, r2
 800aff6:	3304      	adds	r3, #4
 800aff8:	e00b      	b.n	800b012 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800affa:	7bbb      	ldrb	r3, [r7, #14]
 800affc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b000:	4613      	mov	r3, r2
 800b002:	009b      	lsls	r3, r3, #2
 800b004:	4413      	add	r3, r2
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	4413      	add	r3, r2
 800b010:	3304      	adds	r3, #4
 800b012:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b014:	7bbb      	ldrb	r3, [r7, #14]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d002      	beq.n	800b020 <USBD_StdEPReq+0x2d8>
 800b01a:	7bbb      	ldrb	r3, [r7, #14]
 800b01c:	2b80      	cmp	r3, #128	; 0x80
 800b01e:	d103      	bne.n	800b028 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	2200      	movs	r2, #0
 800b024:	601a      	str	r2, [r3, #0]
 800b026:	e00e      	b.n	800b046 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b028:	7bbb      	ldrb	r3, [r7, #14]
 800b02a:	4619      	mov	r1, r3
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 ffd9 	bl	800bfe4 <USBD_LL_IsStallEP>
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d003      	beq.n	800b040 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	2201      	movs	r2, #1
 800b03c:	601a      	str	r2, [r3, #0]
 800b03e:	e002      	b.n	800b046 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	2200      	movs	r2, #0
 800b044:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	2202      	movs	r2, #2
 800b04a:	4619      	mov	r1, r3
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 fbd1 	bl	800b7f4 <USBD_CtlSendData>
              break;
 800b052:	e004      	b.n	800b05e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b054:	6839      	ldr	r1, [r7, #0]
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 fb5b 	bl	800b712 <USBD_CtlError>
              break;
 800b05c:	bf00      	nop
          }
          break;
 800b05e:	e004      	b.n	800b06a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b060:	6839      	ldr	r1, [r7, #0]
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 fb55 	bl	800b712 <USBD_CtlError>
          break;
 800b068:	bf00      	nop
      }
      break;
 800b06a:	e005      	b.n	800b078 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b06c:	6839      	ldr	r1, [r7, #0]
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 fb4f 	bl	800b712 <USBD_CtlError>
      break;
 800b074:	e000      	b.n	800b078 <USBD_StdEPReq+0x330>
      break;
 800b076:	bf00      	nop
  }

  return ret;
 800b078:	7bfb      	ldrb	r3, [r7, #15]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3710      	adds	r7, #16
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
	...

0800b084 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b08e:	2300      	movs	r3, #0
 800b090:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b092:	2300      	movs	r3, #0
 800b094:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b096:	2300      	movs	r3, #0
 800b098:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	885b      	ldrh	r3, [r3, #2]
 800b09e:	0a1b      	lsrs	r3, r3, #8
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	3b01      	subs	r3, #1
 800b0a4:	2b06      	cmp	r3, #6
 800b0a6:	f200 8128 	bhi.w	800b2fa <USBD_GetDescriptor+0x276>
 800b0aa:	a201      	add	r2, pc, #4	; (adr r2, 800b0b0 <USBD_GetDescriptor+0x2c>)
 800b0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b0:	0800b0cd 	.word	0x0800b0cd
 800b0b4:	0800b0e5 	.word	0x0800b0e5
 800b0b8:	0800b125 	.word	0x0800b125
 800b0bc:	0800b2fb 	.word	0x0800b2fb
 800b0c0:	0800b2fb 	.word	0x0800b2fb
 800b0c4:	0800b29b 	.word	0x0800b29b
 800b0c8:	0800b2c7 	.word	0x0800b2c7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	7c12      	ldrb	r2, [r2, #16]
 800b0d8:	f107 0108 	add.w	r1, r7, #8
 800b0dc:	4610      	mov	r0, r2
 800b0de:	4798      	blx	r3
 800b0e0:	60f8      	str	r0, [r7, #12]
      break;
 800b0e2:	e112      	b.n	800b30a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	7c1b      	ldrb	r3, [r3, #16]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d10d      	bne.n	800b108 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f4:	f107 0208 	add.w	r2, r7, #8
 800b0f8:	4610      	mov	r0, r2
 800b0fa:	4798      	blx	r3
 800b0fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	3301      	adds	r3, #1
 800b102:	2202      	movs	r2, #2
 800b104:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b106:	e100      	b.n	800b30a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b110:	f107 0208 	add.w	r2, r7, #8
 800b114:	4610      	mov	r0, r2
 800b116:	4798      	blx	r3
 800b118:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	3301      	adds	r3, #1
 800b11e:	2202      	movs	r2, #2
 800b120:	701a      	strb	r2, [r3, #0]
      break;
 800b122:	e0f2      	b.n	800b30a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	885b      	ldrh	r3, [r3, #2]
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	2b05      	cmp	r3, #5
 800b12c:	f200 80ac 	bhi.w	800b288 <USBD_GetDescriptor+0x204>
 800b130:	a201      	add	r2, pc, #4	; (adr r2, 800b138 <USBD_GetDescriptor+0xb4>)
 800b132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b136:	bf00      	nop
 800b138:	0800b151 	.word	0x0800b151
 800b13c:	0800b185 	.word	0x0800b185
 800b140:	0800b1b9 	.word	0x0800b1b9
 800b144:	0800b1ed 	.word	0x0800b1ed
 800b148:	0800b221 	.word	0x0800b221
 800b14c:	0800b255 	.word	0x0800b255
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d00b      	beq.n	800b174 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	7c12      	ldrb	r2, [r2, #16]
 800b168:	f107 0108 	add.w	r1, r7, #8
 800b16c:	4610      	mov	r0, r2
 800b16e:	4798      	blx	r3
 800b170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b172:	e091      	b.n	800b298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b174:	6839      	ldr	r1, [r7, #0]
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 facb 	bl	800b712 <USBD_CtlError>
            err++;
 800b17c:	7afb      	ldrb	r3, [r7, #11]
 800b17e:	3301      	adds	r3, #1
 800b180:	72fb      	strb	r3, [r7, #11]
          break;
 800b182:	e089      	b.n	800b298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b18a:	689b      	ldr	r3, [r3, #8]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d00b      	beq.n	800b1a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	7c12      	ldrb	r2, [r2, #16]
 800b19c:	f107 0108 	add.w	r1, r7, #8
 800b1a0:	4610      	mov	r0, r2
 800b1a2:	4798      	blx	r3
 800b1a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1a6:	e077      	b.n	800b298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1a8:	6839      	ldr	r1, [r7, #0]
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 fab1 	bl	800b712 <USBD_CtlError>
            err++;
 800b1b0:	7afb      	ldrb	r3, [r7, #11]
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	72fb      	strb	r3, [r7, #11]
          break;
 800b1b6:	e06f      	b.n	800b298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d00b      	beq.n	800b1dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	687a      	ldr	r2, [r7, #4]
 800b1ce:	7c12      	ldrb	r2, [r2, #16]
 800b1d0:	f107 0108 	add.w	r1, r7, #8
 800b1d4:	4610      	mov	r0, r2
 800b1d6:	4798      	blx	r3
 800b1d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1da:	e05d      	b.n	800b298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1dc:	6839      	ldr	r1, [r7, #0]
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 fa97 	bl	800b712 <USBD_CtlError>
            err++;
 800b1e4:	7afb      	ldrb	r3, [r7, #11]
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	72fb      	strb	r3, [r7, #11]
          break;
 800b1ea:	e055      	b.n	800b298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1f2:	691b      	ldr	r3, [r3, #16]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d00b      	beq.n	800b210 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1fe:	691b      	ldr	r3, [r3, #16]
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	7c12      	ldrb	r2, [r2, #16]
 800b204:	f107 0108 	add.w	r1, r7, #8
 800b208:	4610      	mov	r0, r2
 800b20a:	4798      	blx	r3
 800b20c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b20e:	e043      	b.n	800b298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b210:	6839      	ldr	r1, [r7, #0]
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 fa7d 	bl	800b712 <USBD_CtlError>
            err++;
 800b218:	7afb      	ldrb	r3, [r7, #11]
 800b21a:	3301      	adds	r3, #1
 800b21c:	72fb      	strb	r3, [r7, #11]
          break;
 800b21e:	e03b      	b.n	800b298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b226:	695b      	ldr	r3, [r3, #20]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d00b      	beq.n	800b244 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b232:	695b      	ldr	r3, [r3, #20]
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	7c12      	ldrb	r2, [r2, #16]
 800b238:	f107 0108 	add.w	r1, r7, #8
 800b23c:	4610      	mov	r0, r2
 800b23e:	4798      	blx	r3
 800b240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b242:	e029      	b.n	800b298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b244:	6839      	ldr	r1, [r7, #0]
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 fa63 	bl	800b712 <USBD_CtlError>
            err++;
 800b24c:	7afb      	ldrb	r3, [r7, #11]
 800b24e:	3301      	adds	r3, #1
 800b250:	72fb      	strb	r3, [r7, #11]
          break;
 800b252:	e021      	b.n	800b298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b25a:	699b      	ldr	r3, [r3, #24]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d00b      	beq.n	800b278 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b266:	699b      	ldr	r3, [r3, #24]
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	7c12      	ldrb	r2, [r2, #16]
 800b26c:	f107 0108 	add.w	r1, r7, #8
 800b270:	4610      	mov	r0, r2
 800b272:	4798      	blx	r3
 800b274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b276:	e00f      	b.n	800b298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b278:	6839      	ldr	r1, [r7, #0]
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 fa49 	bl	800b712 <USBD_CtlError>
            err++;
 800b280:	7afb      	ldrb	r3, [r7, #11]
 800b282:	3301      	adds	r3, #1
 800b284:	72fb      	strb	r3, [r7, #11]
          break;
 800b286:	e007      	b.n	800b298 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b288:	6839      	ldr	r1, [r7, #0]
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 fa41 	bl	800b712 <USBD_CtlError>
          err++;
 800b290:	7afb      	ldrb	r3, [r7, #11]
 800b292:	3301      	adds	r3, #1
 800b294:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b296:	bf00      	nop
      }
      break;
 800b298:	e037      	b.n	800b30a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	7c1b      	ldrb	r3, [r3, #16]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d109      	bne.n	800b2b6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2aa:	f107 0208 	add.w	r2, r7, #8
 800b2ae:	4610      	mov	r0, r2
 800b2b0:	4798      	blx	r3
 800b2b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2b4:	e029      	b.n	800b30a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b2b6:	6839      	ldr	r1, [r7, #0]
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 fa2a 	bl	800b712 <USBD_CtlError>
        err++;
 800b2be:	7afb      	ldrb	r3, [r7, #11]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	72fb      	strb	r3, [r7, #11]
      break;
 800b2c4:	e021      	b.n	800b30a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	7c1b      	ldrb	r3, [r3, #16]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d10d      	bne.n	800b2ea <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2d6:	f107 0208 	add.w	r2, r7, #8
 800b2da:	4610      	mov	r0, r2
 800b2dc:	4798      	blx	r3
 800b2de:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	2207      	movs	r2, #7
 800b2e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2e8:	e00f      	b.n	800b30a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b2ea:	6839      	ldr	r1, [r7, #0]
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f000 fa10 	bl	800b712 <USBD_CtlError>
        err++;
 800b2f2:	7afb      	ldrb	r3, [r7, #11]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	72fb      	strb	r3, [r7, #11]
      break;
 800b2f8:	e007      	b.n	800b30a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b2fa:	6839      	ldr	r1, [r7, #0]
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 fa08 	bl	800b712 <USBD_CtlError>
      err++;
 800b302:	7afb      	ldrb	r3, [r7, #11]
 800b304:	3301      	adds	r3, #1
 800b306:	72fb      	strb	r3, [r7, #11]
      break;
 800b308:	bf00      	nop
  }

  if (err != 0U)
 800b30a:	7afb      	ldrb	r3, [r7, #11]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d11e      	bne.n	800b34e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	88db      	ldrh	r3, [r3, #6]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d016      	beq.n	800b346 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b318:	893b      	ldrh	r3, [r7, #8]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d00e      	beq.n	800b33c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	88da      	ldrh	r2, [r3, #6]
 800b322:	893b      	ldrh	r3, [r7, #8]
 800b324:	4293      	cmp	r3, r2
 800b326:	bf28      	it	cs
 800b328:	4613      	movcs	r3, r2
 800b32a:	b29b      	uxth	r3, r3
 800b32c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b32e:	893b      	ldrh	r3, [r7, #8]
 800b330:	461a      	mov	r2, r3
 800b332:	68f9      	ldr	r1, [r7, #12]
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 fa5d 	bl	800b7f4 <USBD_CtlSendData>
 800b33a:	e009      	b.n	800b350 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b33c:	6839      	ldr	r1, [r7, #0]
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 f9e7 	bl	800b712 <USBD_CtlError>
 800b344:	e004      	b.n	800b350 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 fa91 	bl	800b86e <USBD_CtlSendStatus>
 800b34c:	e000      	b.n	800b350 <USBD_GetDescriptor+0x2cc>
    return;
 800b34e:	bf00      	nop
  }
}
 800b350:	3710      	adds	r7, #16
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop

0800b358 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	889b      	ldrh	r3, [r3, #4]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d131      	bne.n	800b3ce <USBD_SetAddress+0x76>
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	88db      	ldrh	r3, [r3, #6]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d12d      	bne.n	800b3ce <USBD_SetAddress+0x76>
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	885b      	ldrh	r3, [r3, #2]
 800b376:	2b7f      	cmp	r3, #127	; 0x7f
 800b378:	d829      	bhi.n	800b3ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	885b      	ldrh	r3, [r3, #2]
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b384:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	2b03      	cmp	r3, #3
 800b390:	d104      	bne.n	800b39c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b392:	6839      	ldr	r1, [r7, #0]
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f000 f9bc 	bl	800b712 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b39a:	e01d      	b.n	800b3d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	7bfa      	ldrb	r2, [r7, #15]
 800b3a0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b3a4:	7bfb      	ldrb	r3, [r7, #15]
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f000 fe47 	bl	800c03c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 fa5d 	bl	800b86e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b3b4:	7bfb      	ldrb	r3, [r7, #15]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d004      	beq.n	800b3c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2202      	movs	r2, #2
 800b3be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3c2:	e009      	b.n	800b3d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3cc:	e004      	b.n	800b3d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b3ce:	6839      	ldr	r1, [r7, #0]
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 f99e 	bl	800b712 <USBD_CtlError>
  }
}
 800b3d6:	bf00      	nop
 800b3d8:	bf00      	nop
 800b3da:	3710      	adds	r7, #16
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	885b      	ldrh	r3, [r3, #2]
 800b3f2:	b2da      	uxtb	r2, r3
 800b3f4:	4b4e      	ldr	r3, [pc, #312]	; (800b530 <USBD_SetConfig+0x150>)
 800b3f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b3f8:	4b4d      	ldr	r3, [pc, #308]	; (800b530 <USBD_SetConfig+0x150>)
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d905      	bls.n	800b40c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b400:	6839      	ldr	r1, [r7, #0]
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 f985 	bl	800b712 <USBD_CtlError>
    return USBD_FAIL;
 800b408:	2303      	movs	r3, #3
 800b40a:	e08c      	b.n	800b526 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b412:	b2db      	uxtb	r3, r3
 800b414:	2b02      	cmp	r3, #2
 800b416:	d002      	beq.n	800b41e <USBD_SetConfig+0x3e>
 800b418:	2b03      	cmp	r3, #3
 800b41a:	d029      	beq.n	800b470 <USBD_SetConfig+0x90>
 800b41c:	e075      	b.n	800b50a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b41e:	4b44      	ldr	r3, [pc, #272]	; (800b530 <USBD_SetConfig+0x150>)
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d020      	beq.n	800b468 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b426:	4b42      	ldr	r3, [pc, #264]	; (800b530 <USBD_SetConfig+0x150>)
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	461a      	mov	r2, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b430:	4b3f      	ldr	r3, [pc, #252]	; (800b530 <USBD_SetConfig+0x150>)
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	4619      	mov	r1, r3
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f7ff f83d 	bl	800a4b6 <USBD_SetClassConfig>
 800b43c:	4603      	mov	r3, r0
 800b43e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b440:	7bfb      	ldrb	r3, [r7, #15]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d008      	beq.n	800b458 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b446:	6839      	ldr	r1, [r7, #0]
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f000 f962 	bl	800b712 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2202      	movs	r2, #2
 800b452:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b456:	e065      	b.n	800b524 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 fa08 	bl	800b86e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2203      	movs	r2, #3
 800b462:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b466:	e05d      	b.n	800b524 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f000 fa00 	bl	800b86e <USBD_CtlSendStatus>
      break;
 800b46e:	e059      	b.n	800b524 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b470:	4b2f      	ldr	r3, [pc, #188]	; (800b530 <USBD_SetConfig+0x150>)
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d112      	bne.n	800b49e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2202      	movs	r2, #2
 800b47c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b480:	4b2b      	ldr	r3, [pc, #172]	; (800b530 <USBD_SetConfig+0x150>)
 800b482:	781b      	ldrb	r3, [r3, #0]
 800b484:	461a      	mov	r2, r3
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b48a:	4b29      	ldr	r3, [pc, #164]	; (800b530 <USBD_SetConfig+0x150>)
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	4619      	mov	r1, r3
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f7ff f82c 	bl	800a4ee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 f9e9 	bl	800b86e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b49c:	e042      	b.n	800b524 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b49e:	4b24      	ldr	r3, [pc, #144]	; (800b530 <USBD_SetConfig+0x150>)
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d02a      	beq.n	800b502 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f7ff f81a 	bl	800a4ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b4ba:	4b1d      	ldr	r3, [pc, #116]	; (800b530 <USBD_SetConfig+0x150>)
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	461a      	mov	r2, r3
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b4c4:	4b1a      	ldr	r3, [pc, #104]	; (800b530 <USBD_SetConfig+0x150>)
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f7fe fff3 	bl	800a4b6 <USBD_SetClassConfig>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b4d4:	7bfb      	ldrb	r3, [r7, #15]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d00f      	beq.n	800b4fa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b4da:	6839      	ldr	r1, [r7, #0]
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 f918 	bl	800b712 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	b2db      	uxtb	r3, r3
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f7fe ffff 	bl	800a4ee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2202      	movs	r2, #2
 800b4f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b4f8:	e014      	b.n	800b524 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f000 f9b7 	bl	800b86e <USBD_CtlSendStatus>
      break;
 800b500:	e010      	b.n	800b524 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 f9b3 	bl	800b86e <USBD_CtlSendStatus>
      break;
 800b508:	e00c      	b.n	800b524 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b50a:	6839      	ldr	r1, [r7, #0]
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f000 f900 	bl	800b712 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b512:	4b07      	ldr	r3, [pc, #28]	; (800b530 <USBD_SetConfig+0x150>)
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	4619      	mov	r1, r3
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f7fe ffe8 	bl	800a4ee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b51e:	2303      	movs	r3, #3
 800b520:	73fb      	strb	r3, [r7, #15]
      break;
 800b522:	bf00      	nop
  }

  return ret;
 800b524:	7bfb      	ldrb	r3, [r7, #15]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3710      	adds	r7, #16
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	240007c8 	.word	0x240007c8

0800b534 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	88db      	ldrh	r3, [r3, #6]
 800b542:	2b01      	cmp	r3, #1
 800b544:	d004      	beq.n	800b550 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b546:	6839      	ldr	r1, [r7, #0]
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 f8e2 	bl	800b712 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b54e:	e023      	b.n	800b598 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b556:	b2db      	uxtb	r3, r3
 800b558:	2b02      	cmp	r3, #2
 800b55a:	dc02      	bgt.n	800b562 <USBD_GetConfig+0x2e>
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	dc03      	bgt.n	800b568 <USBD_GetConfig+0x34>
 800b560:	e015      	b.n	800b58e <USBD_GetConfig+0x5a>
 800b562:	2b03      	cmp	r3, #3
 800b564:	d00b      	beq.n	800b57e <USBD_GetConfig+0x4a>
 800b566:	e012      	b.n	800b58e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	3308      	adds	r3, #8
 800b572:	2201      	movs	r2, #1
 800b574:	4619      	mov	r1, r3
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 f93c 	bl	800b7f4 <USBD_CtlSendData>
        break;
 800b57c:	e00c      	b.n	800b598 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	3304      	adds	r3, #4
 800b582:	2201      	movs	r2, #1
 800b584:	4619      	mov	r1, r3
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 f934 	bl	800b7f4 <USBD_CtlSendData>
        break;
 800b58c:	e004      	b.n	800b598 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b58e:	6839      	ldr	r1, [r7, #0]
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 f8be 	bl	800b712 <USBD_CtlError>
        break;
 800b596:	bf00      	nop
}
 800b598:	bf00      	nop
 800b59a:	3708      	adds	r7, #8
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b082      	sub	sp, #8
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5b0:	b2db      	uxtb	r3, r3
 800b5b2:	3b01      	subs	r3, #1
 800b5b4:	2b02      	cmp	r3, #2
 800b5b6:	d81e      	bhi.n	800b5f6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	88db      	ldrh	r3, [r3, #6]
 800b5bc:	2b02      	cmp	r3, #2
 800b5be:	d004      	beq.n	800b5ca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b5c0:	6839      	ldr	r1, [r7, #0]
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 f8a5 	bl	800b712 <USBD_CtlError>
        break;
 800b5c8:	e01a      	b.n	800b600 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d005      	beq.n	800b5e6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	68db      	ldr	r3, [r3, #12]
 800b5de:	f043 0202 	orr.w	r2, r3, #2
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	330c      	adds	r3, #12
 800b5ea:	2202      	movs	r2, #2
 800b5ec:	4619      	mov	r1, r3
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 f900 	bl	800b7f4 <USBD_CtlSendData>
      break;
 800b5f4:	e004      	b.n	800b600 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b5f6:	6839      	ldr	r1, [r7, #0]
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 f88a 	bl	800b712 <USBD_CtlError>
      break;
 800b5fe:	bf00      	nop
  }
}
 800b600:	bf00      	nop
 800b602:	3708      	adds	r7, #8
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	885b      	ldrh	r3, [r3, #2]
 800b616:	2b01      	cmp	r3, #1
 800b618:	d107      	bne.n	800b62a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2201      	movs	r2, #1
 800b61e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 f923 	bl	800b86e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b628:	e013      	b.n	800b652 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	885b      	ldrh	r3, [r3, #2]
 800b62e:	2b02      	cmp	r3, #2
 800b630:	d10b      	bne.n	800b64a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	889b      	ldrh	r3, [r3, #4]
 800b636:	0a1b      	lsrs	r3, r3, #8
 800b638:	b29b      	uxth	r3, r3
 800b63a:	b2da      	uxtb	r2, r3
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 f913 	bl	800b86e <USBD_CtlSendStatus>
}
 800b648:	e003      	b.n	800b652 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b64a:	6839      	ldr	r1, [r7, #0]
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 f860 	bl	800b712 <USBD_CtlError>
}
 800b652:	bf00      	nop
 800b654:	3708      	adds	r7, #8
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}

0800b65a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b082      	sub	sp, #8
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
 800b662:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b66a:	b2db      	uxtb	r3, r3
 800b66c:	3b01      	subs	r3, #1
 800b66e:	2b02      	cmp	r3, #2
 800b670:	d80b      	bhi.n	800b68a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	885b      	ldrh	r3, [r3, #2]
 800b676:	2b01      	cmp	r3, #1
 800b678:	d10c      	bne.n	800b694 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2200      	movs	r2, #0
 800b67e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 f8f3 	bl	800b86e <USBD_CtlSendStatus>
      }
      break;
 800b688:	e004      	b.n	800b694 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b68a:	6839      	ldr	r1, [r7, #0]
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 f840 	bl	800b712 <USBD_CtlError>
      break;
 800b692:	e000      	b.n	800b696 <USBD_ClrFeature+0x3c>
      break;
 800b694:	bf00      	nop
  }
}
 800b696:	bf00      	nop
 800b698:	3708      	adds	r7, #8
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}

0800b69e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b084      	sub	sp, #16
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
 800b6a6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	781a      	ldrb	r2, [r3, #0]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	781a      	ldrb	r2, [r3, #0]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f7ff fa40 	bl	800ab4e <SWAPBYTE>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	3301      	adds	r3, #1
 800b6da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	3301      	adds	r3, #1
 800b6e0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b6e2:	68f8      	ldr	r0, [r7, #12]
 800b6e4:	f7ff fa33 	bl	800ab4e <SWAPBYTE>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b6fc:	68f8      	ldr	r0, [r7, #12]
 800b6fe:	f7ff fa26 	bl	800ab4e <SWAPBYTE>
 800b702:	4603      	mov	r3, r0
 800b704:	461a      	mov	r2, r3
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	80da      	strh	r2, [r3, #6]
}
 800b70a:	bf00      	nop
 800b70c:	3710      	adds	r7, #16
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}

0800b712 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b712:	b580      	push	{r7, lr}
 800b714:	b082      	sub	sp, #8
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
 800b71a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b71c:	2180      	movs	r1, #128	; 0x80
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 fc22 	bl	800bf68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b724:	2100      	movs	r1, #0
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f000 fc1e 	bl	800bf68 <USBD_LL_StallEP>
}
 800b72c:	bf00      	nop
 800b72e:	3708      	adds	r7, #8
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b086      	sub	sp, #24
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b740:	2300      	movs	r3, #0
 800b742:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d036      	beq.n	800b7b8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b74e:	6938      	ldr	r0, [r7, #16]
 800b750:	f000 f836 	bl	800b7c0 <USBD_GetLen>
 800b754:	4603      	mov	r3, r0
 800b756:	3301      	adds	r3, #1
 800b758:	b29b      	uxth	r3, r3
 800b75a:	005b      	lsls	r3, r3, #1
 800b75c:	b29a      	uxth	r2, r3
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b762:	7dfb      	ldrb	r3, [r7, #23]
 800b764:	68ba      	ldr	r2, [r7, #8]
 800b766:	4413      	add	r3, r2
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	7812      	ldrb	r2, [r2, #0]
 800b76c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b76e:	7dfb      	ldrb	r3, [r7, #23]
 800b770:	3301      	adds	r3, #1
 800b772:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b774:	7dfb      	ldrb	r3, [r7, #23]
 800b776:	68ba      	ldr	r2, [r7, #8]
 800b778:	4413      	add	r3, r2
 800b77a:	2203      	movs	r2, #3
 800b77c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b77e:	7dfb      	ldrb	r3, [r7, #23]
 800b780:	3301      	adds	r3, #1
 800b782:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b784:	e013      	b.n	800b7ae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b786:	7dfb      	ldrb	r3, [r7, #23]
 800b788:	68ba      	ldr	r2, [r7, #8]
 800b78a:	4413      	add	r3, r2
 800b78c:	693a      	ldr	r2, [r7, #16]
 800b78e:	7812      	ldrb	r2, [r2, #0]
 800b790:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	3301      	adds	r3, #1
 800b796:	613b      	str	r3, [r7, #16]
    idx++;
 800b798:	7dfb      	ldrb	r3, [r7, #23]
 800b79a:	3301      	adds	r3, #1
 800b79c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b79e:	7dfb      	ldrb	r3, [r7, #23]
 800b7a0:	68ba      	ldr	r2, [r7, #8]
 800b7a2:	4413      	add	r3, r2
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	701a      	strb	r2, [r3, #0]
    idx++;
 800b7a8:	7dfb      	ldrb	r3, [r7, #23]
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d1e7      	bne.n	800b786 <USBD_GetString+0x52>
 800b7b6:	e000      	b.n	800b7ba <USBD_GetString+0x86>
    return;
 800b7b8:	bf00      	nop
  }
}
 800b7ba:	3718      	adds	r7, #24
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b085      	sub	sp, #20
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b7d0:	e005      	b.n	800b7de <USBD_GetLen+0x1e>
  {
    len++;
 800b7d2:	7bfb      	ldrb	r3, [r7, #15]
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d1f5      	bne.n	800b7d2 <USBD_GetLen+0x12>
  }

  return len;
 800b7e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3714      	adds	r7, #20
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr

0800b7f4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	60b9      	str	r1, [r7, #8]
 800b7fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2202      	movs	r2, #2
 800b804:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	68ba      	ldr	r2, [r7, #8]
 800b818:	2100      	movs	r1, #0
 800b81a:	68f8      	ldr	r0, [r7, #12]
 800b81c:	f000 fc2d 	bl	800c07a <USBD_LL_Transmit>

  return USBD_OK;
 800b820:	2300      	movs	r3, #0
}
 800b822:	4618      	mov	r0, r3
 800b824:	3710      	adds	r7, #16
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}

0800b82a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b084      	sub	sp, #16
 800b82e:	af00      	add	r7, sp, #0
 800b830:	60f8      	str	r0, [r7, #12]
 800b832:	60b9      	str	r1, [r7, #8]
 800b834:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	68ba      	ldr	r2, [r7, #8]
 800b83a:	2100      	movs	r1, #0
 800b83c:	68f8      	ldr	r0, [r7, #12]
 800b83e:	f000 fc1c 	bl	800c07a <USBD_LL_Transmit>

  return USBD_OK;
 800b842:	2300      	movs	r3, #0
}
 800b844:	4618      	mov	r0, r3
 800b846:	3710      	adds	r7, #16
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	68ba      	ldr	r2, [r7, #8]
 800b85c:	2100      	movs	r1, #0
 800b85e:	68f8      	ldr	r0, [r7, #12]
 800b860:	f000 fc2c 	bl	800c0bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b864:	2300      	movs	r3, #0
}
 800b866:	4618      	mov	r0, r3
 800b868:	3710      	adds	r7, #16
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}

0800b86e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b86e:	b580      	push	{r7, lr}
 800b870:	b082      	sub	sp, #8
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2204      	movs	r2, #4
 800b87a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b87e:	2300      	movs	r3, #0
 800b880:	2200      	movs	r2, #0
 800b882:	2100      	movs	r1, #0
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f000 fbf8 	bl	800c07a <USBD_LL_Transmit>

  return USBD_OK;
 800b88a:	2300      	movs	r3, #0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3708      	adds	r7, #8
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2205      	movs	r2, #5
 800b8a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	2100      	movs	r1, #0
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 fc06 	bl	800c0bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3708      	adds	r7, #8
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
	...

0800b8bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	af00      	add	r7, sp, #0
//  {
//    Error_Handler();
//  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	4913      	ldr	r1, [pc, #76]	; (800b910 <MX_USB_DEVICE_Init+0x54>)
 800b8c4:	4813      	ldr	r0, [pc, #76]	; (800b914 <MX_USB_DEVICE_Init+0x58>)
 800b8c6:	f7fe fd79 	bl	800a3bc <USBD_Init>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d001      	beq.n	800b8d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b8d0:	f7f4 ff88 	bl	80007e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI) != USBD_OK)
 800b8d4:	4910      	ldr	r1, [pc, #64]	; (800b918 <MX_USB_DEVICE_Init+0x5c>)
 800b8d6:	480f      	ldr	r0, [pc, #60]	; (800b914 <MX_USB_DEVICE_Init+0x58>)
 800b8d8:	f7fe fda0 	bl	800a41c <USBD_RegisterClass>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d001      	beq.n	800b8e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b8e2:	f7f4 ff7f 	bl	80007e4 <Error_Handler>
  }
  if (USBD_MIDI_RegisterInterface(&hUsbDeviceFS, &USBD_MIDI_fops) != USBD_OK)
 800b8e6:	490d      	ldr	r1, [pc, #52]	; (800b91c <MX_USB_DEVICE_Init+0x60>)
 800b8e8:	480a      	ldr	r0, [pc, #40]	; (800b914 <MX_USB_DEVICE_Init+0x58>)
 800b8ea:	f7fe fd09 	bl	800a300 <USBD_MIDI_RegisterInterface>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d001      	beq.n	800b8f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b8f4:	f7f4 ff76 	bl	80007e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b8f8:	4806      	ldr	r0, [pc, #24]	; (800b914 <MX_USB_DEVICE_Init+0x58>)
 800b8fa:	f7fe fdc5 	bl	800a488 <USBD_Start>
 800b8fe:	4603      	mov	r3, r0
 800b900:	2b00      	cmp	r3, #0
 800b902:	d001      	beq.n	800b908 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b904:	f7f4 ff6e 	bl	80007e4 <Error_Handler>
  }



  HAL_PWREx_EnableUSBVoltageDetector();
 800b908:	f7f9 fb28 	bl	8004f5c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b90c:	bf00      	nop
 800b90e:	bd80      	pop	{r7, pc}
 800b910:	240000ec 	.word	0x240000ec
 800b914:	240007cc 	.word	0x240007cc
 800b918:	24000020 	.word	0x24000020
 800b91c:	24000008 	.word	0x24000008

0800b920 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b920:	b480      	push	{r7}
 800b922:	b083      	sub	sp, #12
 800b924:	af00      	add	r7, sp, #0
 800b926:	4603      	mov	r3, r0
 800b928:	6039      	str	r1, [r7, #0]
 800b92a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	2212      	movs	r2, #18
 800b930:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b932:	4b03      	ldr	r3, [pc, #12]	; (800b940 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b934:	4618      	mov	r0, r3
 800b936:	370c      	adds	r7, #12
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr
 800b940:	24000108 	.word	0x24000108

0800b944 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	4603      	mov	r3, r0
 800b94c:	6039      	str	r1, [r7, #0]
 800b94e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	2204      	movs	r2, #4
 800b954:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b956:	4b03      	ldr	r3, [pc, #12]	; (800b964 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b958:	4618      	mov	r0, r3
 800b95a:	370c      	adds	r7, #12
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr
 800b964:	2400011c 	.word	0x2400011c

0800b968 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b082      	sub	sp, #8
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	4603      	mov	r3, r0
 800b970:	6039      	str	r1, [r7, #0]
 800b972:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b974:	79fb      	ldrb	r3, [r7, #7]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d105      	bne.n	800b986 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b97a:	683a      	ldr	r2, [r7, #0]
 800b97c:	4907      	ldr	r1, [pc, #28]	; (800b99c <USBD_FS_ProductStrDescriptor+0x34>)
 800b97e:	4808      	ldr	r0, [pc, #32]	; (800b9a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800b980:	f7ff fed8 	bl	800b734 <USBD_GetString>
 800b984:	e004      	b.n	800b990 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b986:	683a      	ldr	r2, [r7, #0]
 800b988:	4904      	ldr	r1, [pc, #16]	; (800b99c <USBD_FS_ProductStrDescriptor+0x34>)
 800b98a:	4805      	ldr	r0, [pc, #20]	; (800b9a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800b98c:	f7ff fed2 	bl	800b734 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b990:	4b02      	ldr	r3, [pc, #8]	; (800b99c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b992:	4618      	mov	r0, r3
 800b994:	3708      	adds	r7, #8
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	24000aa8 	.word	0x24000aa8
 800b9a0:	0800c244 	.word	0x0800c244

0800b9a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	6039      	str	r1, [r7, #0]
 800b9ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b9b0:	683a      	ldr	r2, [r7, #0]
 800b9b2:	4904      	ldr	r1, [pc, #16]	; (800b9c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b9b4:	4804      	ldr	r0, [pc, #16]	; (800b9c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b9b6:	f7ff febd 	bl	800b734 <USBD_GetString>
  return USBD_StrDesc;
 800b9ba:	4b02      	ldr	r3, [pc, #8]	; (800b9c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3708      	adds	r7, #8
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	24000aa8 	.word	0x24000aa8
 800b9c8:	0800c258 	.word	0x0800c258

0800b9cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b082      	sub	sp, #8
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	6039      	str	r1, [r7, #0]
 800b9d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	221a      	movs	r2, #26
 800b9dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b9de:	f000 f843 	bl	800ba68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b9e2:	4b02      	ldr	r3, [pc, #8]	; (800b9ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3708      	adds	r7, #8
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	24000120 	.word	0x24000120

0800b9f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	6039      	str	r1, [r7, #0]
 800b9fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b9fc:	79fb      	ldrb	r3, [r7, #7]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d105      	bne.n	800ba0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ba02:	683a      	ldr	r2, [r7, #0]
 800ba04:	4907      	ldr	r1, [pc, #28]	; (800ba24 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ba06:	4808      	ldr	r0, [pc, #32]	; (800ba28 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ba08:	f7ff fe94 	bl	800b734 <USBD_GetString>
 800ba0c:	e004      	b.n	800ba18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ba0e:	683a      	ldr	r2, [r7, #0]
 800ba10:	4904      	ldr	r1, [pc, #16]	; (800ba24 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ba12:	4805      	ldr	r0, [pc, #20]	; (800ba28 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ba14:	f7ff fe8e 	bl	800b734 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba18:	4b02      	ldr	r3, [pc, #8]	; (800ba24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3708      	adds	r7, #8
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	24000aa8 	.word	0x24000aa8
 800ba28:	0800c26c 	.word	0x0800c26c

0800ba2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b082      	sub	sp, #8
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	4603      	mov	r3, r0
 800ba34:	6039      	str	r1, [r7, #0]
 800ba36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba38:	79fb      	ldrb	r3, [r7, #7]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d105      	bne.n	800ba4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ba3e:	683a      	ldr	r2, [r7, #0]
 800ba40:	4907      	ldr	r1, [pc, #28]	; (800ba60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ba42:	4808      	ldr	r0, [pc, #32]	; (800ba64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ba44:	f7ff fe76 	bl	800b734 <USBD_GetString>
 800ba48:	e004      	b.n	800ba54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ba4a:	683a      	ldr	r2, [r7, #0]
 800ba4c:	4904      	ldr	r1, [pc, #16]	; (800ba60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ba4e:	4805      	ldr	r0, [pc, #20]	; (800ba64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ba50:	f7ff fe70 	bl	800b734 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba54:	4b02      	ldr	r3, [pc, #8]	; (800ba60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3708      	adds	r7, #8
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	24000aa8 	.word	0x24000aa8
 800ba64:	0800c27c 	.word	0x0800c27c

0800ba68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ba6e:	4b0f      	ldr	r3, [pc, #60]	; (800baac <Get_SerialNum+0x44>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ba74:	4b0e      	ldr	r3, [pc, #56]	; (800bab0 <Get_SerialNum+0x48>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ba7a:	4b0e      	ldr	r3, [pc, #56]	; (800bab4 <Get_SerialNum+0x4c>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	4413      	add	r3, r2
 800ba86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d009      	beq.n	800baa2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ba8e:	2208      	movs	r2, #8
 800ba90:	4909      	ldr	r1, [pc, #36]	; (800bab8 <Get_SerialNum+0x50>)
 800ba92:	68f8      	ldr	r0, [r7, #12]
 800ba94:	f000 f814 	bl	800bac0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ba98:	2204      	movs	r2, #4
 800ba9a:	4908      	ldr	r1, [pc, #32]	; (800babc <Get_SerialNum+0x54>)
 800ba9c:	68b8      	ldr	r0, [r7, #8]
 800ba9e:	f000 f80f 	bl	800bac0 <IntToUnicode>
  }
}
 800baa2:	bf00      	nop
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop
 800baac:	1ff1e800 	.word	0x1ff1e800
 800bab0:	1ff1e804 	.word	0x1ff1e804
 800bab4:	1ff1e808 	.word	0x1ff1e808
 800bab8:	24000122 	.word	0x24000122
 800babc:	24000132 	.word	0x24000132

0800bac0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b087      	sub	sp, #28
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	60b9      	str	r1, [r7, #8]
 800baca:	4613      	mov	r3, r2
 800bacc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bace:	2300      	movs	r3, #0
 800bad0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bad2:	2300      	movs	r3, #0
 800bad4:	75fb      	strb	r3, [r7, #23]
 800bad6:	e027      	b.n	800bb28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	0f1b      	lsrs	r3, r3, #28
 800badc:	2b09      	cmp	r3, #9
 800bade:	d80b      	bhi.n	800baf8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	0f1b      	lsrs	r3, r3, #28
 800bae4:	b2da      	uxtb	r2, r3
 800bae6:	7dfb      	ldrb	r3, [r7, #23]
 800bae8:	005b      	lsls	r3, r3, #1
 800baea:	4619      	mov	r1, r3
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	440b      	add	r3, r1
 800baf0:	3230      	adds	r2, #48	; 0x30
 800baf2:	b2d2      	uxtb	r2, r2
 800baf4:	701a      	strb	r2, [r3, #0]
 800baf6:	e00a      	b.n	800bb0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	0f1b      	lsrs	r3, r3, #28
 800bafc:	b2da      	uxtb	r2, r3
 800bafe:	7dfb      	ldrb	r3, [r7, #23]
 800bb00:	005b      	lsls	r3, r3, #1
 800bb02:	4619      	mov	r1, r3
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	440b      	add	r3, r1
 800bb08:	3237      	adds	r2, #55	; 0x37
 800bb0a:	b2d2      	uxtb	r2, r2
 800bb0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	011b      	lsls	r3, r3, #4
 800bb12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bb14:	7dfb      	ldrb	r3, [r7, #23]
 800bb16:	005b      	lsls	r3, r3, #1
 800bb18:	3301      	adds	r3, #1
 800bb1a:	68ba      	ldr	r2, [r7, #8]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	2200      	movs	r2, #0
 800bb20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bb22:	7dfb      	ldrb	r3, [r7, #23]
 800bb24:	3301      	adds	r3, #1
 800bb26:	75fb      	strb	r3, [r7, #23]
 800bb28:	7dfa      	ldrb	r2, [r7, #23]
 800bb2a:	79fb      	ldrb	r3, [r7, #7]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d3d3      	bcc.n	800bad8 <IntToUnicode+0x18>
  }
}
 800bb30:	bf00      	nop
 800bb32:	bf00      	nop
 800bb34:	371c      	adds	r7, #28
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr
	...

0800bb40 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b0b8      	sub	sp, #224	; 0xe0
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb48:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	601a      	str	r2, [r3, #0]
 800bb50:	605a      	str	r2, [r3, #4]
 800bb52:	609a      	str	r2, [r3, #8]
 800bb54:	60da      	str	r2, [r3, #12]
 800bb56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bb58:	f107 0310 	add.w	r3, r7, #16
 800bb5c:	22bc      	movs	r2, #188	; 0xbc
 800bb5e:	2100      	movs	r1, #0
 800bb60:	4618      	mov	r0, r3
 800bb62:	f000 fb55 	bl	800c210 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4a2b      	ldr	r2, [pc, #172]	; (800bc18 <HAL_PCD_MspInit+0xd8>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d14e      	bne.n	800bc0e <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bb70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bb74:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800bb76:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800bb7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bb7e:	f107 0310 	add.w	r3, r7, #16
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7fa f988 	bl	8005e98 <HAL_RCCEx_PeriphCLKConfig>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d001      	beq.n	800bb92 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800bb8e:	f7f4 fe29 	bl	80007e4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800bb92:	f7f9 f9e3 	bl	8004f5c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb96:	4b21      	ldr	r3, [pc, #132]	; (800bc1c <HAL_PCD_MspInit+0xdc>)
 800bb98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bb9c:	4a1f      	ldr	r2, [pc, #124]	; (800bc1c <HAL_PCD_MspInit+0xdc>)
 800bb9e:	f043 0301 	orr.w	r3, r3, #1
 800bba2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bba6:	4b1d      	ldr	r3, [pc, #116]	; (800bc1c <HAL_PCD_MspInit+0xdc>)
 800bba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bbac:	f003 0301 	and.w	r3, r3, #1
 800bbb0:	60fb      	str	r3, [r7, #12]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bbb4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bbb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbbc:	2302      	movs	r3, #2
 800bbbe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800bbce:	230a      	movs	r3, #10
 800bbd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bbd4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800bbd8:	4619      	mov	r1, r3
 800bbda:	4811      	ldr	r0, [pc, #68]	; (800bc20 <HAL_PCD_MspInit+0xe0>)
 800bbdc:	f7f7 f8b2 	bl	8002d44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bbe0:	4b0e      	ldr	r3, [pc, #56]	; (800bc1c <HAL_PCD_MspInit+0xdc>)
 800bbe2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bbe6:	4a0d      	ldr	r2, [pc, #52]	; (800bc1c <HAL_PCD_MspInit+0xdc>)
 800bbe8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bbec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800bbf0:	4b0a      	ldr	r3, [pc, #40]	; (800bc1c <HAL_PCD_MspInit+0xdc>)
 800bbf2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bbf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbfa:	60bb      	str	r3, [r7, #8]
 800bbfc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bbfe:	2200      	movs	r2, #0
 800bc00:	2100      	movs	r1, #0
 800bc02:	2065      	movs	r0, #101	; 0x65
 800bc04:	f7f7 f869 	bl	8002cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bc08:	2065      	movs	r0, #101	; 0x65
 800bc0a:	f7f7 f880 	bl	8002d0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bc0e:	bf00      	nop
 800bc10:	37e0      	adds	r7, #224	; 0xe0
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	bf00      	nop
 800bc18:	40080000 	.word	0x40080000
 800bc1c:	58024400 	.word	0x58024400
 800bc20:	58020000 	.word	0x58020000

0800bc24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bc38:	4619      	mov	r1, r3
 800bc3a:	4610      	mov	r0, r2
 800bc3c:	f7fe fc71 	bl	800a522 <USBD_LL_SetupStage>
}
 800bc40:	bf00      	nop
 800bc42:	3708      	adds	r7, #8
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	460b      	mov	r3, r1
 800bc52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bc5a:	78fa      	ldrb	r2, [r7, #3]
 800bc5c:	6879      	ldr	r1, [r7, #4]
 800bc5e:	4613      	mov	r3, r2
 800bc60:	00db      	lsls	r3, r3, #3
 800bc62:	4413      	add	r3, r2
 800bc64:	009b      	lsls	r3, r3, #2
 800bc66:	440b      	add	r3, r1
 800bc68:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800bc6c:	681a      	ldr	r2, [r3, #0]
 800bc6e:	78fb      	ldrb	r3, [r7, #3]
 800bc70:	4619      	mov	r1, r3
 800bc72:	f7fe fcab 	bl	800a5cc <USBD_LL_DataOutStage>
}
 800bc76:	bf00      	nop
 800bc78:	3708      	adds	r7, #8
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}

0800bc7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc7e:	b580      	push	{r7, lr}
 800bc80:	b082      	sub	sp, #8
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	6078      	str	r0, [r7, #4]
 800bc86:	460b      	mov	r3, r1
 800bc88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bc90:	78fa      	ldrb	r2, [r7, #3]
 800bc92:	6879      	ldr	r1, [r7, #4]
 800bc94:	4613      	mov	r3, r2
 800bc96:	00db      	lsls	r3, r3, #3
 800bc98:	4413      	add	r3, r2
 800bc9a:	009b      	lsls	r3, r3, #2
 800bc9c:	440b      	add	r3, r1
 800bc9e:	334c      	adds	r3, #76	; 0x4c
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	78fb      	ldrb	r3, [r7, #3]
 800bca4:	4619      	mov	r1, r3
 800bca6:	f7fe fd44 	bl	800a732 <USBD_LL_DataInStage>
}
 800bcaa:	bf00      	nop
 800bcac:	3708      	adds	r7, #8
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}

0800bcb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcb2:	b580      	push	{r7, lr}
 800bcb4:	b082      	sub	sp, #8
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f7fe fe78 	bl	800a9b6 <USBD_LL_SOF>
}
 800bcc6:	bf00      	nop
 800bcc8:	3708      	adds	r7, #8
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}

0800bcce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcce:	b580      	push	{r7, lr}
 800bcd0:	b084      	sub	sp, #16
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	68db      	ldr	r3, [r3, #12]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d102      	bne.n	800bce8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bce2:	2300      	movs	r3, #0
 800bce4:	73fb      	strb	r3, [r7, #15]
 800bce6:	e008      	b.n	800bcfa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	2b02      	cmp	r3, #2
 800bcee:	d102      	bne.n	800bcf6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	73fb      	strb	r3, [r7, #15]
 800bcf4:	e001      	b.n	800bcfa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bcf6:	f7f4 fd75 	bl	80007e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd00:	7bfa      	ldrb	r2, [r7, #15]
 800bd02:	4611      	mov	r1, r2
 800bd04:	4618      	mov	r0, r3
 800bd06:	f7fe fe18 	bl	800a93a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd10:	4618      	mov	r0, r3
 800bd12:	f7fe fdc0 	bl	800a896 <USBD_LL_Reset>
}
 800bd16:	bf00      	nop
 800bd18:	3710      	adds	r7, #16
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
	...

0800bd20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7fe fe13 	bl	800a95a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	6812      	ldr	r2, [r2, #0]
 800bd42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bd46:	f043 0301 	orr.w	r3, r3, #1
 800bd4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6a1b      	ldr	r3, [r3, #32]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d005      	beq.n	800bd60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd54:	4b04      	ldr	r3, [pc, #16]	; (800bd68 <HAL_PCD_SuspendCallback+0x48>)
 800bd56:	691b      	ldr	r3, [r3, #16]
 800bd58:	4a03      	ldr	r2, [pc, #12]	; (800bd68 <HAL_PCD_SuspendCallback+0x48>)
 800bd5a:	f043 0306 	orr.w	r3, r3, #6
 800bd5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bd60:	bf00      	nop
 800bd62:	3708      	adds	r7, #8
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}
 800bd68:	e000ed00 	.word	0xe000ed00

0800bd6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7fe fe03 	bl	800a986 <USBD_LL_Resume>
}
 800bd80:	bf00      	nop
 800bd82:	3708      	adds	r7, #8
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	460b      	mov	r3, r1
 800bd92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd9a:	78fa      	ldrb	r2, [r7, #3]
 800bd9c:	4611      	mov	r1, r2
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7fe fe5b 	bl	800aa5a <USBD_LL_IsoOUTIncomplete>
}
 800bda4:	bf00      	nop
 800bda6:	3708      	adds	r7, #8
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bdbe:	78fa      	ldrb	r2, [r7, #3]
 800bdc0:	4611      	mov	r1, r2
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f7fe fe17 	bl	800a9f6 <USBD_LL_IsoINIncomplete>
}
 800bdc8:	bf00      	nop
 800bdca:	3708      	adds	r7, #8
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7fe fe6d 	bl	800aabe <USBD_LL_DevConnected>
}
 800bde4:	bf00      	nop
 800bde6:	3708      	adds	r7, #8
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7fe fe6a 	bl	800aad4 <USBD_LL_DevDisconnected>
}
 800be00:	bf00      	nop
 800be02:	3708      	adds	r7, #8
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d13e      	bne.n	800be96 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800be18:	4a21      	ldr	r2, [pc, #132]	; (800bea0 <USBD_LL_Init+0x98>)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	4a1f      	ldr	r2, [pc, #124]	; (800bea0 <USBD_LL_Init+0x98>)
 800be24:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800be28:	4b1d      	ldr	r3, [pc, #116]	; (800bea0 <USBD_LL_Init+0x98>)
 800be2a:	4a1e      	ldr	r2, [pc, #120]	; (800bea4 <USBD_LL_Init+0x9c>)
 800be2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800be2e:	4b1c      	ldr	r3, [pc, #112]	; (800bea0 <USBD_LL_Init+0x98>)
 800be30:	2209      	movs	r2, #9
 800be32:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800be34:	4b1a      	ldr	r3, [pc, #104]	; (800bea0 <USBD_LL_Init+0x98>)
 800be36:	2202      	movs	r2, #2
 800be38:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800be3a:	4b19      	ldr	r3, [pc, #100]	; (800bea0 <USBD_LL_Init+0x98>)
 800be3c:	2200      	movs	r2, #0
 800be3e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800be40:	4b17      	ldr	r3, [pc, #92]	; (800bea0 <USBD_LL_Init+0x98>)
 800be42:	2202      	movs	r2, #2
 800be44:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800be46:	4b16      	ldr	r3, [pc, #88]	; (800bea0 <USBD_LL_Init+0x98>)
 800be48:	2200      	movs	r2, #0
 800be4a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800be4c:	4b14      	ldr	r3, [pc, #80]	; (800bea0 <USBD_LL_Init+0x98>)
 800be4e:	2200      	movs	r2, #0
 800be50:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800be52:	4b13      	ldr	r3, [pc, #76]	; (800bea0 <USBD_LL_Init+0x98>)
 800be54:	2200      	movs	r2, #0
 800be56:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800be58:	4b11      	ldr	r3, [pc, #68]	; (800bea0 <USBD_LL_Init+0x98>)
 800be5a:	2200      	movs	r2, #0
 800be5c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800be5e:	4b10      	ldr	r3, [pc, #64]	; (800bea0 <USBD_LL_Init+0x98>)
 800be60:	2200      	movs	r2, #0
 800be62:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800be64:	4b0e      	ldr	r3, [pc, #56]	; (800bea0 <USBD_LL_Init+0x98>)
 800be66:	2200      	movs	r2, #0
 800be68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800be6a:	480d      	ldr	r0, [pc, #52]	; (800bea0 <USBD_LL_Init+0x98>)
 800be6c:	f7f7 fd67 	bl	800393e <HAL_PCD_Init>
 800be70:	4603      	mov	r3, r0
 800be72:	2b00      	cmp	r3, #0
 800be74:	d001      	beq.n	800be7a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800be76:	f7f4 fcb5 	bl	80007e4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800be7a:	2180      	movs	r1, #128	; 0x80
 800be7c:	4808      	ldr	r0, [pc, #32]	; (800bea0 <USBD_LL_Init+0x98>)
 800be7e:	f7f8 fff2 	bl	8004e66 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800be82:	2240      	movs	r2, #64	; 0x40
 800be84:	2100      	movs	r1, #0
 800be86:	4806      	ldr	r0, [pc, #24]	; (800bea0 <USBD_LL_Init+0x98>)
 800be88:	f7f8 ffa6 	bl	8004dd8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800be8c:	2280      	movs	r2, #128	; 0x80
 800be8e:	2101      	movs	r1, #1
 800be90:	4803      	ldr	r0, [pc, #12]	; (800bea0 <USBD_LL_Init+0x98>)
 800be92:	f7f8 ffa1 	bl	8004dd8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800be96:	2300      	movs	r3, #0
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3708      	adds	r7, #8
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}
 800bea0:	24000ca8 	.word	0x24000ca8
 800bea4:	40080000 	.word	0x40080000

0800bea8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800beb0:	2300      	movs	r3, #0
 800beb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800beb4:	2300      	movs	r3, #0
 800beb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bebe:	4618      	mov	r0, r3
 800bec0:	f7f7 fe61 	bl	8003b86 <HAL_PCD_Start>
 800bec4:	4603      	mov	r3, r0
 800bec6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bec8:	7bfb      	ldrb	r3, [r7, #15]
 800beca:	4618      	mov	r0, r3
 800becc:	f000 f942 	bl	800c154 <USBD_Get_USB_Status>
 800bed0:	4603      	mov	r3, r0
 800bed2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bed4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3710      	adds	r7, #16
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}

0800bede <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bede:	b580      	push	{r7, lr}
 800bee0:	b084      	sub	sp, #16
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	6078      	str	r0, [r7, #4]
 800bee6:	4608      	mov	r0, r1
 800bee8:	4611      	mov	r1, r2
 800beea:	461a      	mov	r2, r3
 800beec:	4603      	mov	r3, r0
 800beee:	70fb      	strb	r3, [r7, #3]
 800bef0:	460b      	mov	r3, r1
 800bef2:	70bb      	strb	r3, [r7, #2]
 800bef4:	4613      	mov	r3, r2
 800bef6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bef8:	2300      	movs	r3, #0
 800befa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800befc:	2300      	movs	r3, #0
 800befe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bf06:	78bb      	ldrb	r3, [r7, #2]
 800bf08:	883a      	ldrh	r2, [r7, #0]
 800bf0a:	78f9      	ldrb	r1, [r7, #3]
 800bf0c:	f7f8 fb5f 	bl	80045ce <HAL_PCD_EP_Open>
 800bf10:	4603      	mov	r3, r0
 800bf12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf14:	7bfb      	ldrb	r3, [r7, #15]
 800bf16:	4618      	mov	r0, r3
 800bf18:	f000 f91c 	bl	800c154 <USBD_Get_USB_Status>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf20:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3710      	adds	r7, #16
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}

0800bf2a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf2a:	b580      	push	{r7, lr}
 800bf2c:	b084      	sub	sp, #16
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	6078      	str	r0, [r7, #4]
 800bf32:	460b      	mov	r3, r1
 800bf34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf36:	2300      	movs	r3, #0
 800bf38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf44:	78fa      	ldrb	r2, [r7, #3]
 800bf46:	4611      	mov	r1, r2
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7f8 fba8 	bl	800469e <HAL_PCD_EP_Close>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf52:	7bfb      	ldrb	r3, [r7, #15]
 800bf54:	4618      	mov	r0, r3
 800bf56:	f000 f8fd 	bl	800c154 <USBD_Get_USB_Status>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3710      	adds	r7, #16
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}

0800bf68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	460b      	mov	r3, r1
 800bf72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf74:	2300      	movs	r3, #0
 800bf76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf82:	78fa      	ldrb	r2, [r7, #3]
 800bf84:	4611      	mov	r1, r2
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7f8 fc80 	bl	800488c <HAL_PCD_EP_SetStall>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf90:	7bfb      	ldrb	r3, [r7, #15]
 800bf92:	4618      	mov	r0, r3
 800bf94:	f000 f8de 	bl	800c154 <USBD_Get_USB_Status>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3710      	adds	r7, #16
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}

0800bfa6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b084      	sub	sp, #16
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
 800bfae:	460b      	mov	r3, r1
 800bfb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bfc0:	78fa      	ldrb	r2, [r7, #3]
 800bfc2:	4611      	mov	r1, r2
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7f8 fcc5 	bl	8004954 <HAL_PCD_EP_ClrStall>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfce:	7bfb      	ldrb	r3, [r7, #15]
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f000 f8bf 	bl	800c154 <USBD_Get_USB_Status>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfda:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3710      	adds	r7, #16
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b085      	sub	sp, #20
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	460b      	mov	r3, r1
 800bfee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bff6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	da0b      	bge.n	800c018 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c000:	78fb      	ldrb	r3, [r7, #3]
 800c002:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c006:	68f9      	ldr	r1, [r7, #12]
 800c008:	4613      	mov	r3, r2
 800c00a:	00db      	lsls	r3, r3, #3
 800c00c:	4413      	add	r3, r2
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	440b      	add	r3, r1
 800c012:	333e      	adds	r3, #62	; 0x3e
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	e00b      	b.n	800c030 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c018:	78fb      	ldrb	r3, [r7, #3]
 800c01a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c01e:	68f9      	ldr	r1, [r7, #12]
 800c020:	4613      	mov	r3, r2
 800c022:	00db      	lsls	r3, r3, #3
 800c024:	4413      	add	r3, r2
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	440b      	add	r3, r1
 800c02a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c02e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c030:	4618      	mov	r0, r3
 800c032:	3714      	adds	r7, #20
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr

0800c03c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b084      	sub	sp, #16
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	460b      	mov	r3, r1
 800c046:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c048:	2300      	movs	r3, #0
 800c04a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c04c:	2300      	movs	r3, #0
 800c04e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c056:	78fa      	ldrb	r2, [r7, #3]
 800c058:	4611      	mov	r1, r2
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7f8 fa92 	bl	8004584 <HAL_PCD_SetAddress>
 800c060:	4603      	mov	r3, r0
 800c062:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c064:	7bfb      	ldrb	r3, [r7, #15]
 800c066:	4618      	mov	r0, r3
 800c068:	f000 f874 	bl	800c154 <USBD_Get_USB_Status>
 800c06c:	4603      	mov	r3, r0
 800c06e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c070:	7bbb      	ldrb	r3, [r7, #14]
}
 800c072:	4618      	mov	r0, r3
 800c074:	3710      	adds	r7, #16
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}

0800c07a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c07a:	b580      	push	{r7, lr}
 800c07c:	b086      	sub	sp, #24
 800c07e:	af00      	add	r7, sp, #0
 800c080:	60f8      	str	r0, [r7, #12]
 800c082:	607a      	str	r2, [r7, #4]
 800c084:	603b      	str	r3, [r7, #0]
 800c086:	460b      	mov	r3, r1
 800c088:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c08a:	2300      	movs	r3, #0
 800c08c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c08e:	2300      	movs	r3, #0
 800c090:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c098:	7af9      	ldrb	r1, [r7, #11]
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	f7f8 fbab 	bl	80047f8 <HAL_PCD_EP_Transmit>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0a6:	7dfb      	ldrb	r3, [r7, #23]
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f000 f853 	bl	800c154 <USBD_Get_USB_Status>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c0b2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3718      	adds	r7, #24
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b086      	sub	sp, #24
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	607a      	str	r2, [r7, #4]
 800c0c6:	603b      	str	r3, [r7, #0]
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c0da:	7af9      	ldrb	r1, [r7, #11]
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	f7f8 fb27 	bl	8004732 <HAL_PCD_EP_Receive>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0e8:	7dfb      	ldrb	r3, [r7, #23]
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f000 f832 	bl	800c154 <USBD_Get_USB_Status>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c0f4:	7dbb      	ldrb	r3, [r7, #22]
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3718      	adds	r7, #24
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}

0800c0fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0fe:	b580      	push	{r7, lr}
 800c100:	b082      	sub	sp, #8
 800c102:	af00      	add	r7, sp, #0
 800c104:	6078      	str	r0, [r7, #4]
 800c106:	460b      	mov	r3, r1
 800c108:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c110:	78fa      	ldrb	r2, [r7, #3]
 800c112:	4611      	mov	r1, r2
 800c114:	4618      	mov	r0, r3
 800c116:	f7f8 fb57 	bl	80047c8 <HAL_PCD_EP_GetRxCount>
 800c11a:	4603      	mov	r3, r0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3708      	adds	r7, #8
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c124:	b480      	push	{r7}
 800c126:	b083      	sub	sp, #12
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c12c:	4b03      	ldr	r3, [pc, #12]	; (800c13c <USBD_static_malloc+0x18>)
}
 800c12e:	4618      	mov	r0, r3
 800c130:	370c      	adds	r7, #12
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr
 800c13a:	bf00      	nop
 800c13c:	240011b4 	.word	0x240011b4

0800c140 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]

}
 800c148:	bf00      	nop
 800c14a:	370c      	adds	r7, #12
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr

0800c154 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c154:	b480      	push	{r7}
 800c156:	b085      	sub	sp, #20
 800c158:	af00      	add	r7, sp, #0
 800c15a:	4603      	mov	r3, r0
 800c15c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c15e:	2300      	movs	r3, #0
 800c160:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c162:	79fb      	ldrb	r3, [r7, #7]
 800c164:	2b03      	cmp	r3, #3
 800c166:	d817      	bhi.n	800c198 <USBD_Get_USB_Status+0x44>
 800c168:	a201      	add	r2, pc, #4	; (adr r2, 800c170 <USBD_Get_USB_Status+0x1c>)
 800c16a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c16e:	bf00      	nop
 800c170:	0800c181 	.word	0x0800c181
 800c174:	0800c187 	.word	0x0800c187
 800c178:	0800c18d 	.word	0x0800c18d
 800c17c:	0800c193 	.word	0x0800c193
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c180:	2300      	movs	r3, #0
 800c182:	73fb      	strb	r3, [r7, #15]
    break;
 800c184:	e00b      	b.n	800c19e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c186:	2303      	movs	r3, #3
 800c188:	73fb      	strb	r3, [r7, #15]
    break;
 800c18a:	e008      	b.n	800c19e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c18c:	2301      	movs	r3, #1
 800c18e:	73fb      	strb	r3, [r7, #15]
    break;
 800c190:	e005      	b.n	800c19e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c192:	2303      	movs	r3, #3
 800c194:	73fb      	strb	r3, [r7, #15]
    break;
 800c196:	e002      	b.n	800c19e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c198:	2303      	movs	r3, #3
 800c19a:	73fb      	strb	r3, [r7, #15]
    break;
 800c19c:	bf00      	nop
  }
  return usb_status;
 800c19e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3714      	adds	r7, #20
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr

0800c1ac <__libc_init_array>:
 800c1ac:	b570      	push	{r4, r5, r6, lr}
 800c1ae:	4d0d      	ldr	r5, [pc, #52]	; (800c1e4 <__libc_init_array+0x38>)
 800c1b0:	4c0d      	ldr	r4, [pc, #52]	; (800c1e8 <__libc_init_array+0x3c>)
 800c1b2:	1b64      	subs	r4, r4, r5
 800c1b4:	10a4      	asrs	r4, r4, #2
 800c1b6:	2600      	movs	r6, #0
 800c1b8:	42a6      	cmp	r6, r4
 800c1ba:	d109      	bne.n	800c1d0 <__libc_init_array+0x24>
 800c1bc:	4d0b      	ldr	r5, [pc, #44]	; (800c1ec <__libc_init_array+0x40>)
 800c1be:	4c0c      	ldr	r4, [pc, #48]	; (800c1f0 <__libc_init_array+0x44>)
 800c1c0:	f000 f82e 	bl	800c220 <_init>
 800c1c4:	1b64      	subs	r4, r4, r5
 800c1c6:	10a4      	asrs	r4, r4, #2
 800c1c8:	2600      	movs	r6, #0
 800c1ca:	42a6      	cmp	r6, r4
 800c1cc:	d105      	bne.n	800c1da <__libc_init_array+0x2e>
 800c1ce:	bd70      	pop	{r4, r5, r6, pc}
 800c1d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1d4:	4798      	blx	r3
 800c1d6:	3601      	adds	r6, #1
 800c1d8:	e7ee      	b.n	800c1b8 <__libc_init_array+0xc>
 800c1da:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1de:	4798      	blx	r3
 800c1e0:	3601      	adds	r6, #1
 800c1e2:	e7f2      	b.n	800c1ca <__libc_init_array+0x1e>
 800c1e4:	0800c654 	.word	0x0800c654
 800c1e8:	0800c654 	.word	0x0800c654
 800c1ec:	0800c654 	.word	0x0800c654
 800c1f0:	0800c658 	.word	0x0800c658

0800c1f4 <memcpy>:
 800c1f4:	440a      	add	r2, r1
 800c1f6:	4291      	cmp	r1, r2
 800c1f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c1fc:	d100      	bne.n	800c200 <memcpy+0xc>
 800c1fe:	4770      	bx	lr
 800c200:	b510      	push	{r4, lr}
 800c202:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c206:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c20a:	4291      	cmp	r1, r2
 800c20c:	d1f9      	bne.n	800c202 <memcpy+0xe>
 800c20e:	bd10      	pop	{r4, pc}

0800c210 <memset>:
 800c210:	4402      	add	r2, r0
 800c212:	4603      	mov	r3, r0
 800c214:	4293      	cmp	r3, r2
 800c216:	d100      	bne.n	800c21a <memset+0xa>
 800c218:	4770      	bx	lr
 800c21a:	f803 1b01 	strb.w	r1, [r3], #1
 800c21e:	e7f9      	b.n	800c214 <memset+0x4>

0800c220 <_init>:
 800c220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c222:	bf00      	nop
 800c224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c226:	bc08      	pop	{r3}
 800c228:	469e      	mov	lr, r3
 800c22a:	4770      	bx	lr

0800c22c <_fini>:
 800c22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c22e:	bf00      	nop
 800c230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c232:	bc08      	pop	{r3}
 800c234:	469e      	mov	lr, r3
 800c236:	4770      	bx	lr
